/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int aq;
    int rl;
    int rs2;
    int rs1;
    int rd;
} arg_atomic;

typedef struct {
    int imm;
    int rs2;
    int rs1;
} arg_b;

typedef struct {
    int csr;
    int rs1;
    int rd;
} arg_decode_insn3234;

typedef struct {
    int rs3;
    int rs2;
    int rs1;
    int rm;
    int rd;
} arg_decode_insn3235;

typedef struct {
    int rs2;
    int rs1;
    int rm;
    int rd;
} arg_decode_insn3236;

typedef struct {
    int rs1;
    int rm;
    int rd;
} arg_decode_insn3237;

typedef struct {
    int vm;
    int rd;
} arg_decode_insn3238;

typedef struct {
    int rs2;
    int rd;
} arg_decode_insn3239;

typedef struct {
    int zimm;
    int rs1;
    int rd;
} arg_decode_insn3240;

typedef struct {
    int rs1;
} arg_decode_insn3241;

typedef struct {
    int pred;
    int succ;
} arg_decode_insn3242;

typedef struct {
} arg_empty;

typedef struct {
    int imm;
    int rs1;
    int rd;
} arg_i;

typedef struct {
    int imm;
    int rd;
} arg_j;

typedef struct {
    int shamt;
    int rs2;
    int rs1;
    int rd;
} arg_k_aes;

typedef struct {
    int rs1;
    int rd;
} arg_mm_cfg;

typedef struct {
    int uimm7;
    int rd;
} arg_mm_cfg_i;

typedef struct {
    int md;
    int rs2;
    int mo;
} arg_mm_dup;

typedef struct {
    int uimm3;
    int ms2;
    int ms1;
    int md;
} arg_mm_i;

typedef struct {
    int rs2;
    int rs1;
    int md;
} arg_mm_ld;

typedef struct {
    int rs1;
    int md;
} arg_mm_ldm;

typedef struct {
    int md;
    int rs1;
    int rs2;
    int mo;
} arg_mm_mov;

typedef struct {
    int ms1;
    int md;
} arg_mm_mv;

typedef struct {
    int ms1;
    int uimm3;
    int md;
} arg_mm_mv_i;

typedef struct {
    int ms1;
    int rs1;
    int md;
} arg_mm_mv_x;

typedef struct {
    int ms2;
    int rs1;
    int rd;
    int mo;
} arg_mm_mxm;

typedef struct {
    int rs1;
    int ms2;
    int ms1;
    int md;
} arg_mm_r;

typedef struct {
    int md;
} arg_mm_rm;

typedef struct {
    int ms2;
    int ms1;
    int md;
} arg_mm_rmm;

typedef struct {
    int ms2;
    int rs1;
    int md;
} arg_mm_rx;

typedef struct {
    int rs2;
    int rs1;
    int ms3;
} arg_mm_st;

typedef struct {
    int rs1;
    int ms3;
} arg_mm_stm;

typedef struct {
    int rd;
    int rs1;
    int rs2;
} arg_r;

typedef struct {
    int rd;
    int rs1;
} arg_r2;

typedef struct {
    int rs1;
    int rs2;
} arg_r2_s;

typedef struct {
    int vm;
    int rd;
    int rs1;
    int nf;
} arg_r2nfvm;

typedef struct {
    int rd;
    int rs1;
    int rs2;
    int rs3;
} arg_r4;

typedef struct {
    int vm;
    int rd;
    int rs2;
} arg_rmr;

typedef struct {
    int vm;
    int rd;
    int rs1;
    int rs2;
} arg_rmrr;

typedef struct {
    int vm;
    int rd;
    int rs1;
    int rs2;
    int nf;
} arg_rnfvm;

typedef struct {
    int imm;
    int rs1;
    int rs2;
} arg_s;

typedef struct {
    int shamt;
    int rs1;
    int rd;
} arg_shift;

typedef struct {
    int imm;
    int rd;
} arg_u;

typedef arg_empty arg_ecall;
static bool trans_ecall(DisasContext *ctx, arg_ecall *a);
typedef arg_empty arg_ebreak;
static bool trans_ebreak(DisasContext *ctx, arg_ebreak *a);
typedef arg_empty arg_uret;
static bool trans_uret(DisasContext *ctx, arg_uret *a);
typedef arg_empty arg_sret;
static bool trans_sret(DisasContext *ctx, arg_sret *a);
typedef arg_empty arg_mret;
static bool trans_mret(DisasContext *ctx, arg_mret *a);
typedef arg_empty arg_wfi;
static bool trans_wfi(DisasContext *ctx, arg_wfi *a);
typedef arg_r2_s arg_sfence_vma;
static bool trans_sfence_vma(DisasContext *ctx, arg_sfence_vma *a);
typedef arg_decode_insn3241 arg_sfence_vm;
static bool trans_sfence_vm(DisasContext *ctx, arg_sfence_vm *a);
typedef arg_u arg_lui;
static bool trans_lui(DisasContext *ctx, arg_lui *a);
typedef arg_u arg_auipc;
static bool trans_auipc(DisasContext *ctx, arg_auipc *a);
typedef arg_j arg_jal;
static bool trans_jal(DisasContext *ctx, arg_jal *a);
typedef arg_i arg_jalr;
static bool trans_jalr(DisasContext *ctx, arg_jalr *a);
typedef arg_b arg_beq;
static bool trans_beq(DisasContext *ctx, arg_beq *a);
typedef arg_b arg_bne;
static bool trans_bne(DisasContext *ctx, arg_bne *a);
typedef arg_b arg_blt;
static bool trans_blt(DisasContext *ctx, arg_blt *a);
typedef arg_b arg_bge;
static bool trans_bge(DisasContext *ctx, arg_bge *a);
typedef arg_b arg_bltu;
static bool trans_bltu(DisasContext *ctx, arg_bltu *a);
typedef arg_b arg_bgeu;
static bool trans_bgeu(DisasContext *ctx, arg_bgeu *a);
typedef arg_i arg_lb;
static bool trans_lb(DisasContext *ctx, arg_lb *a);
typedef arg_i arg_lh;
static bool trans_lh(DisasContext *ctx, arg_lh *a);
typedef arg_i arg_lw;
static bool trans_lw(DisasContext *ctx, arg_lw *a);
typedef arg_i arg_lbu;
static bool trans_lbu(DisasContext *ctx, arg_lbu *a);
typedef arg_i arg_lhu;
static bool trans_lhu(DisasContext *ctx, arg_lhu *a);
typedef arg_s arg_sb;
static bool trans_sb(DisasContext *ctx, arg_sb *a);
typedef arg_s arg_sh;
static bool trans_sh(DisasContext *ctx, arg_sh *a);
typedef arg_s arg_sw;
static bool trans_sw(DisasContext *ctx, arg_sw *a);
typedef arg_i arg_addi;
static bool trans_addi(DisasContext *ctx, arg_addi *a);
typedef arg_i arg_slti;
static bool trans_slti(DisasContext *ctx, arg_slti *a);
typedef arg_i arg_sltiu;
static bool trans_sltiu(DisasContext *ctx, arg_sltiu *a);
typedef arg_i arg_xori;
static bool trans_xori(DisasContext *ctx, arg_xori *a);
typedef arg_i arg_ori;
static bool trans_ori(DisasContext *ctx, arg_ori *a);
typedef arg_i arg_andi;
static bool trans_andi(DisasContext *ctx, arg_andi *a);
typedef arg_shift arg_slli;
static bool trans_slli(DisasContext *ctx, arg_slli *a);
typedef arg_shift arg_srli;
static bool trans_srli(DisasContext *ctx, arg_srli *a);
typedef arg_shift arg_srai;
static bool trans_srai(DisasContext *ctx, arg_srai *a);
typedef arg_r arg_add;
static bool trans_add(DisasContext *ctx, arg_add *a);
typedef arg_r arg_sub;
static bool trans_sub(DisasContext *ctx, arg_sub *a);
typedef arg_r arg_sll;
static bool trans_sll(DisasContext *ctx, arg_sll *a);
typedef arg_r arg_slt;
static bool trans_slt(DisasContext *ctx, arg_slt *a);
typedef arg_r arg_sltu;
static bool trans_sltu(DisasContext *ctx, arg_sltu *a);
typedef arg_r arg_xor;
static bool trans_xor(DisasContext *ctx, arg_xor *a);
typedef arg_r arg_srl;
static bool trans_srl(DisasContext *ctx, arg_srl *a);
typedef arg_r arg_sra;
static bool trans_sra(DisasContext *ctx, arg_sra *a);
typedef arg_r arg_or;
static bool trans_or(DisasContext *ctx, arg_or *a);
typedef arg_r arg_and;
static bool trans_and(DisasContext *ctx, arg_and *a);
typedef arg_empty arg_pause;
static bool trans_pause(DisasContext *ctx, arg_pause *a);
typedef arg_decode_insn3242 arg_fence;
static bool trans_fence(DisasContext *ctx, arg_fence *a);
typedef arg_empty arg_fence_i;
static bool trans_fence_i(DisasContext *ctx, arg_fence_i *a);
typedef arg_decode_insn3234 arg_csrrw;
static bool trans_csrrw(DisasContext *ctx, arg_csrrw *a);
typedef arg_decode_insn3234 arg_csrrs;
static bool trans_csrrs(DisasContext *ctx, arg_csrrs *a);
typedef arg_decode_insn3234 arg_csrrc;
static bool trans_csrrc(DisasContext *ctx, arg_csrrc *a);
typedef arg_decode_insn3234 arg_csrrwi;
static bool trans_csrrwi(DisasContext *ctx, arg_csrrwi *a);
typedef arg_decode_insn3234 arg_csrrsi;
static bool trans_csrrsi(DisasContext *ctx, arg_csrrsi *a);
typedef arg_decode_insn3234 arg_csrrci;
static bool trans_csrrci(DisasContext *ctx, arg_csrrci *a);
typedef arg_i arg_lwu;
static bool trans_lwu(DisasContext *ctx, arg_lwu *a);
typedef arg_i arg_ld;
static bool trans_ld(DisasContext *ctx, arg_ld *a);
typedef arg_s arg_sd;
static bool trans_sd(DisasContext *ctx, arg_sd *a);
typedef arg_i arg_addiw;
static bool trans_addiw(DisasContext *ctx, arg_addiw *a);
typedef arg_shift arg_slliw;
static bool trans_slliw(DisasContext *ctx, arg_slliw *a);
typedef arg_shift arg_srliw;
static bool trans_srliw(DisasContext *ctx, arg_srliw *a);
typedef arg_shift arg_sraiw;
static bool trans_sraiw(DisasContext *ctx, arg_sraiw *a);
typedef arg_r arg_addw;
static bool trans_addw(DisasContext *ctx, arg_addw *a);
typedef arg_r arg_subw;
static bool trans_subw(DisasContext *ctx, arg_subw *a);
typedef arg_r arg_sllw;
static bool trans_sllw(DisasContext *ctx, arg_sllw *a);
typedef arg_r arg_srlw;
static bool trans_srlw(DisasContext *ctx, arg_srlw *a);
typedef arg_r arg_sraw;
static bool trans_sraw(DisasContext *ctx, arg_sraw *a);
typedef arg_i arg_ldu;
static bool trans_ldu(DisasContext *ctx, arg_ldu *a);
typedef arg_decode_insn3241 arg_cbo_clean;
static bool trans_cbo_clean(DisasContext *ctx, arg_cbo_clean *a);
typedef arg_decode_insn3241 arg_cbo_flush;
static bool trans_cbo_flush(DisasContext *ctx, arg_cbo_flush *a);
typedef arg_decode_insn3241 arg_cbo_inval;
static bool trans_cbo_inval(DisasContext *ctx, arg_cbo_inval *a);
typedef arg_decode_insn3241 arg_cbo_zero;
static bool trans_cbo_zero(DisasContext *ctx, arg_cbo_zero *a);
typedef arg_i arg_lq;
static bool trans_lq(DisasContext *ctx, arg_lq *a);
typedef arg_s arg_sq;
static bool trans_sq(DisasContext *ctx, arg_sq *a);
typedef arg_i arg_addid;
static bool trans_addid(DisasContext *ctx, arg_addid *a);
typedef arg_shift arg_sllid;
static bool trans_sllid(DisasContext *ctx, arg_sllid *a);
typedef arg_shift arg_srlid;
static bool trans_srlid(DisasContext *ctx, arg_srlid *a);
typedef arg_shift arg_sraid;
static bool trans_sraid(DisasContext *ctx, arg_sraid *a);
typedef arg_r arg_addd;
static bool trans_addd(DisasContext *ctx, arg_addd *a);
typedef arg_r arg_subd;
static bool trans_subd(DisasContext *ctx, arg_subd *a);
typedef arg_r arg_slld;
static bool trans_slld(DisasContext *ctx, arg_slld *a);
typedef arg_r arg_srld;
static bool trans_srld(DisasContext *ctx, arg_srld *a);
typedef arg_r arg_srad;
static bool trans_srad(DisasContext *ctx, arg_srad *a);
typedef arg_r arg_mul;
static bool trans_mul(DisasContext *ctx, arg_mul *a);
typedef arg_r arg_mulh;
static bool trans_mulh(DisasContext *ctx, arg_mulh *a);
typedef arg_r arg_mulhsu;
static bool trans_mulhsu(DisasContext *ctx, arg_mulhsu *a);
typedef arg_r arg_mulhu;
static bool trans_mulhu(DisasContext *ctx, arg_mulhu *a);
typedef arg_r arg_div;
static bool trans_div(DisasContext *ctx, arg_div *a);
typedef arg_r arg_divu;
static bool trans_divu(DisasContext *ctx, arg_divu *a);
typedef arg_r arg_rem;
static bool trans_rem(DisasContext *ctx, arg_rem *a);
typedef arg_r arg_remu;
static bool trans_remu(DisasContext *ctx, arg_remu *a);
typedef arg_r arg_mulw;
static bool trans_mulw(DisasContext *ctx, arg_mulw *a);
typedef arg_r arg_divw;
static bool trans_divw(DisasContext *ctx, arg_divw *a);
typedef arg_r arg_divuw;
static bool trans_divuw(DisasContext *ctx, arg_divuw *a);
typedef arg_r arg_remw;
static bool trans_remw(DisasContext *ctx, arg_remw *a);
typedef arg_r arg_remuw;
static bool trans_remuw(DisasContext *ctx, arg_remuw *a);
typedef arg_r arg_muld;
static bool trans_muld(DisasContext *ctx, arg_muld *a);
typedef arg_r arg_divd;
static bool trans_divd(DisasContext *ctx, arg_divd *a);
typedef arg_r arg_divud;
static bool trans_divud(DisasContext *ctx, arg_divud *a);
typedef arg_r arg_remd;
static bool trans_remd(DisasContext *ctx, arg_remd *a);
typedef arg_r arg_remud;
static bool trans_remud(DisasContext *ctx, arg_remud *a);
typedef arg_atomic arg_lr_w;
static bool trans_lr_w(DisasContext *ctx, arg_lr_w *a);
typedef arg_atomic arg_sc_w;
static bool trans_sc_w(DisasContext *ctx, arg_sc_w *a);
typedef arg_atomic arg_amoswap_w;
static bool trans_amoswap_w(DisasContext *ctx, arg_amoswap_w *a);
typedef arg_atomic arg_amoadd_w;
static bool trans_amoadd_w(DisasContext *ctx, arg_amoadd_w *a);
typedef arg_atomic arg_amoxor_w;
static bool trans_amoxor_w(DisasContext *ctx, arg_amoxor_w *a);
typedef arg_atomic arg_amoand_w;
static bool trans_amoand_w(DisasContext *ctx, arg_amoand_w *a);
typedef arg_atomic arg_amoor_w;
static bool trans_amoor_w(DisasContext *ctx, arg_amoor_w *a);
typedef arg_atomic arg_amomin_w;
static bool trans_amomin_w(DisasContext *ctx, arg_amomin_w *a);
typedef arg_atomic arg_amomax_w;
static bool trans_amomax_w(DisasContext *ctx, arg_amomax_w *a);
typedef arg_atomic arg_amominu_w;
static bool trans_amominu_w(DisasContext *ctx, arg_amominu_w *a);
typedef arg_atomic arg_amomaxu_w;
static bool trans_amomaxu_w(DisasContext *ctx, arg_amomaxu_w *a);
typedef arg_atomic arg_lr_d;
static bool trans_lr_d(DisasContext *ctx, arg_lr_d *a);
typedef arg_atomic arg_sc_d;
static bool trans_sc_d(DisasContext *ctx, arg_sc_d *a);
typedef arg_atomic arg_amoswap_d;
static bool trans_amoswap_d(DisasContext *ctx, arg_amoswap_d *a);
typedef arg_atomic arg_amoadd_d;
static bool trans_amoadd_d(DisasContext *ctx, arg_amoadd_d *a);
typedef arg_atomic arg_amoxor_d;
static bool trans_amoxor_d(DisasContext *ctx, arg_amoxor_d *a);
typedef arg_atomic arg_amoand_d;
static bool trans_amoand_d(DisasContext *ctx, arg_amoand_d *a);
typedef arg_atomic arg_amoor_d;
static bool trans_amoor_d(DisasContext *ctx, arg_amoor_d *a);
typedef arg_atomic arg_amomin_d;
static bool trans_amomin_d(DisasContext *ctx, arg_amomin_d *a);
typedef arg_atomic arg_amomax_d;
static bool trans_amomax_d(DisasContext *ctx, arg_amomax_d *a);
typedef arg_atomic arg_amominu_d;
static bool trans_amominu_d(DisasContext *ctx, arg_amominu_d *a);
typedef arg_atomic arg_amomaxu_d;
static bool trans_amomaxu_d(DisasContext *ctx, arg_amomaxu_d *a);
typedef arg_i arg_flw;
static bool trans_flw(DisasContext *ctx, arg_flw *a);
typedef arg_s arg_fsw;
static bool trans_fsw(DisasContext *ctx, arg_fsw *a);
typedef arg_decode_insn3235 arg_fmadd_s;
static bool trans_fmadd_s(DisasContext *ctx, arg_fmadd_s *a);
typedef arg_decode_insn3235 arg_fmsub_s;
static bool trans_fmsub_s(DisasContext *ctx, arg_fmsub_s *a);
typedef arg_decode_insn3235 arg_fnmsub_s;
static bool trans_fnmsub_s(DisasContext *ctx, arg_fnmsub_s *a);
typedef arg_decode_insn3235 arg_fnmadd_s;
static bool trans_fnmadd_s(DisasContext *ctx, arg_fnmadd_s *a);
typedef arg_decode_insn3236 arg_fadd_s;
static bool trans_fadd_s(DisasContext *ctx, arg_fadd_s *a);
typedef arg_decode_insn3236 arg_fsub_s;
static bool trans_fsub_s(DisasContext *ctx, arg_fsub_s *a);
typedef arg_decode_insn3236 arg_fmul_s;
static bool trans_fmul_s(DisasContext *ctx, arg_fmul_s *a);
typedef arg_decode_insn3236 arg_fdiv_s;
static bool trans_fdiv_s(DisasContext *ctx, arg_fdiv_s *a);
typedef arg_decode_insn3237 arg_fsqrt_s;
static bool trans_fsqrt_s(DisasContext *ctx, arg_fsqrt_s *a);
typedef arg_r arg_fsgnj_s;
static bool trans_fsgnj_s(DisasContext *ctx, arg_fsgnj_s *a);
typedef arg_r arg_fsgnjn_s;
static bool trans_fsgnjn_s(DisasContext *ctx, arg_fsgnjn_s *a);
typedef arg_r arg_fsgnjx_s;
static bool trans_fsgnjx_s(DisasContext *ctx, arg_fsgnjx_s *a);
typedef arg_r arg_fmin_s;
static bool trans_fmin_s(DisasContext *ctx, arg_fmin_s *a);
typedef arg_r arg_fmax_s;
static bool trans_fmax_s(DisasContext *ctx, arg_fmax_s *a);
typedef arg_decode_insn3237 arg_fcvt_w_s;
static bool trans_fcvt_w_s(DisasContext *ctx, arg_fcvt_w_s *a);
typedef arg_decode_insn3237 arg_fcvt_wu_s;
static bool trans_fcvt_wu_s(DisasContext *ctx, arg_fcvt_wu_s *a);
typedef arg_r2 arg_fmv_x_w;
static bool trans_fmv_x_w(DisasContext *ctx, arg_fmv_x_w *a);
typedef arg_r arg_feq_s;
static bool trans_feq_s(DisasContext *ctx, arg_feq_s *a);
typedef arg_r arg_flt_s;
static bool trans_flt_s(DisasContext *ctx, arg_flt_s *a);
typedef arg_r arg_fle_s;
static bool trans_fle_s(DisasContext *ctx, arg_fle_s *a);
typedef arg_r2 arg_fclass_s;
static bool trans_fclass_s(DisasContext *ctx, arg_fclass_s *a);
typedef arg_decode_insn3237 arg_fcvt_s_w;
static bool trans_fcvt_s_w(DisasContext *ctx, arg_fcvt_s_w *a);
typedef arg_decode_insn3237 arg_fcvt_s_wu;
static bool trans_fcvt_s_wu(DisasContext *ctx, arg_fcvt_s_wu *a);
typedef arg_r2 arg_fmv_w_x;
static bool trans_fmv_w_x(DisasContext *ctx, arg_fmv_w_x *a);
typedef arg_decode_insn3237 arg_fcvt_l_s;
static bool trans_fcvt_l_s(DisasContext *ctx, arg_fcvt_l_s *a);
typedef arg_decode_insn3237 arg_fcvt_lu_s;
static bool trans_fcvt_lu_s(DisasContext *ctx, arg_fcvt_lu_s *a);
typedef arg_decode_insn3237 arg_fcvt_s_l;
static bool trans_fcvt_s_l(DisasContext *ctx, arg_fcvt_s_l *a);
typedef arg_decode_insn3237 arg_fcvt_s_lu;
static bool trans_fcvt_s_lu(DisasContext *ctx, arg_fcvt_s_lu *a);
typedef arg_i arg_fld;
static bool trans_fld(DisasContext *ctx, arg_fld *a);
typedef arg_s arg_fsd;
static bool trans_fsd(DisasContext *ctx, arg_fsd *a);
typedef arg_decode_insn3235 arg_fmadd_d;
static bool trans_fmadd_d(DisasContext *ctx, arg_fmadd_d *a);
typedef arg_decode_insn3235 arg_fmsub_d;
static bool trans_fmsub_d(DisasContext *ctx, arg_fmsub_d *a);
typedef arg_decode_insn3235 arg_fnmsub_d;
static bool trans_fnmsub_d(DisasContext *ctx, arg_fnmsub_d *a);
typedef arg_decode_insn3235 arg_fnmadd_d;
static bool trans_fnmadd_d(DisasContext *ctx, arg_fnmadd_d *a);
typedef arg_decode_insn3236 arg_fadd_d;
static bool trans_fadd_d(DisasContext *ctx, arg_fadd_d *a);
typedef arg_decode_insn3236 arg_fsub_d;
static bool trans_fsub_d(DisasContext *ctx, arg_fsub_d *a);
typedef arg_decode_insn3236 arg_fmul_d;
static bool trans_fmul_d(DisasContext *ctx, arg_fmul_d *a);
typedef arg_decode_insn3236 arg_fdiv_d;
static bool trans_fdiv_d(DisasContext *ctx, arg_fdiv_d *a);
typedef arg_decode_insn3237 arg_fsqrt_d;
static bool trans_fsqrt_d(DisasContext *ctx, arg_fsqrt_d *a);
typedef arg_r arg_fsgnj_d;
static bool trans_fsgnj_d(DisasContext *ctx, arg_fsgnj_d *a);
typedef arg_r arg_fsgnjn_d;
static bool trans_fsgnjn_d(DisasContext *ctx, arg_fsgnjn_d *a);
typedef arg_r arg_fsgnjx_d;
static bool trans_fsgnjx_d(DisasContext *ctx, arg_fsgnjx_d *a);
typedef arg_r arg_fmin_d;
static bool trans_fmin_d(DisasContext *ctx, arg_fmin_d *a);
typedef arg_r arg_fmax_d;
static bool trans_fmax_d(DisasContext *ctx, arg_fmax_d *a);
typedef arg_decode_insn3237 arg_fcvt_s_d;
static bool trans_fcvt_s_d(DisasContext *ctx, arg_fcvt_s_d *a);
typedef arg_decode_insn3237 arg_fcvt_d_s;
static bool trans_fcvt_d_s(DisasContext *ctx, arg_fcvt_d_s *a);
typedef arg_r arg_feq_d;
static bool trans_feq_d(DisasContext *ctx, arg_feq_d *a);
typedef arg_r arg_flt_d;
static bool trans_flt_d(DisasContext *ctx, arg_flt_d *a);
typedef arg_r arg_fle_d;
static bool trans_fle_d(DisasContext *ctx, arg_fle_d *a);
typedef arg_r2 arg_fclass_d;
static bool trans_fclass_d(DisasContext *ctx, arg_fclass_d *a);
typedef arg_decode_insn3237 arg_fcvt_w_d;
static bool trans_fcvt_w_d(DisasContext *ctx, arg_fcvt_w_d *a);
typedef arg_decode_insn3237 arg_fcvt_wu_d;
static bool trans_fcvt_wu_d(DisasContext *ctx, arg_fcvt_wu_d *a);
typedef arg_decode_insn3237 arg_fcvt_d_w;
static bool trans_fcvt_d_w(DisasContext *ctx, arg_fcvt_d_w *a);
typedef arg_decode_insn3237 arg_fcvt_d_wu;
static bool trans_fcvt_d_wu(DisasContext *ctx, arg_fcvt_d_wu *a);
typedef arg_decode_insn3237 arg_fcvt_l_d;
static bool trans_fcvt_l_d(DisasContext *ctx, arg_fcvt_l_d *a);
typedef arg_decode_insn3237 arg_fcvt_lu_d;
static bool trans_fcvt_lu_d(DisasContext *ctx, arg_fcvt_lu_d *a);
typedef arg_r2 arg_fmv_x_d;
static bool trans_fmv_x_d(DisasContext *ctx, arg_fmv_x_d *a);
typedef arg_decode_insn3237 arg_fcvt_d_l;
static bool trans_fcvt_d_l(DisasContext *ctx, arg_fcvt_d_l *a);
typedef arg_decode_insn3237 arg_fcvt_d_lu;
static bool trans_fcvt_d_lu(DisasContext *ctx, arg_fcvt_d_lu *a);
typedef arg_r2 arg_fmv_d_x;
static bool trans_fmv_d_x(DisasContext *ctx, arg_fmv_d_x *a);
typedef arg_r2 arg_hlv_b;
static bool trans_hlv_b(DisasContext *ctx, arg_hlv_b *a);
typedef arg_r2 arg_hlv_bu;
static bool trans_hlv_bu(DisasContext *ctx, arg_hlv_bu *a);
typedef arg_r2 arg_hlv_h;
static bool trans_hlv_h(DisasContext *ctx, arg_hlv_h *a);
typedef arg_r2 arg_hlv_hu;
static bool trans_hlv_hu(DisasContext *ctx, arg_hlv_hu *a);
typedef arg_r2 arg_hlvx_hu;
static bool trans_hlvx_hu(DisasContext *ctx, arg_hlvx_hu *a);
typedef arg_r2 arg_hlv_w;
static bool trans_hlv_w(DisasContext *ctx, arg_hlv_w *a);
typedef arg_r2 arg_hlvx_wu;
static bool trans_hlvx_wu(DisasContext *ctx, arg_hlvx_wu *a);
typedef arg_r2_s arg_hsv_b;
static bool trans_hsv_b(DisasContext *ctx, arg_hsv_b *a);
typedef arg_r2_s arg_hsv_h;
static bool trans_hsv_h(DisasContext *ctx, arg_hsv_h *a);
typedef arg_r2_s arg_hsv_w;
static bool trans_hsv_w(DisasContext *ctx, arg_hsv_w *a);
typedef arg_r2_s arg_hfence_gvma;
static bool trans_hfence_gvma(DisasContext *ctx, arg_hfence_gvma *a);
typedef arg_r2_s arg_hfence_vvma;
static bool trans_hfence_vvma(DisasContext *ctx, arg_hfence_vvma *a);
typedef arg_r2 arg_hlv_wu;
static bool trans_hlv_wu(DisasContext *ctx, arg_hlv_wu *a);
typedef arg_r2 arg_hlv_d;
static bool trans_hlv_d(DisasContext *ctx, arg_hlv_d *a);
typedef arg_r2_s arg_hsv_d;
static bool trans_hsv_d(DisasContext *ctx, arg_hsv_d *a);
typedef arg_r2nfvm arg_vle8_v;
static bool trans_vle8_v(DisasContext *ctx, arg_vle8_v *a);
typedef arg_r2nfvm arg_vle16_v;
static bool trans_vle16_v(DisasContext *ctx, arg_vle16_v *a);
typedef arg_r2nfvm arg_vle32_v;
static bool trans_vle32_v(DisasContext *ctx, arg_vle32_v *a);
typedef arg_r2nfvm arg_vle64_v;
static bool trans_vle64_v(DisasContext *ctx, arg_vle64_v *a);
typedef arg_r2nfvm arg_vse8_v;
static bool trans_vse8_v(DisasContext *ctx, arg_vse8_v *a);
typedef arg_r2nfvm arg_vse16_v;
static bool trans_vse16_v(DisasContext *ctx, arg_vse16_v *a);
typedef arg_r2nfvm arg_vse32_v;
static bool trans_vse32_v(DisasContext *ctx, arg_vse32_v *a);
typedef arg_r2nfvm arg_vse64_v;
static bool trans_vse64_v(DisasContext *ctx, arg_vse64_v *a);
typedef arg_r2 arg_vlm_v;
static bool trans_vlm_v(DisasContext *ctx, arg_vlm_v *a);
typedef arg_r2 arg_vsm_v;
static bool trans_vsm_v(DisasContext *ctx, arg_vsm_v *a);
typedef arg_rnfvm arg_vlse8_v;
static bool trans_vlse8_v(DisasContext *ctx, arg_vlse8_v *a);
typedef arg_rnfvm arg_vlse16_v;
static bool trans_vlse16_v(DisasContext *ctx, arg_vlse16_v *a);
typedef arg_rnfvm arg_vlse32_v;
static bool trans_vlse32_v(DisasContext *ctx, arg_vlse32_v *a);
typedef arg_rnfvm arg_vlse64_v;
static bool trans_vlse64_v(DisasContext *ctx, arg_vlse64_v *a);
typedef arg_rnfvm arg_vsse8_v;
static bool trans_vsse8_v(DisasContext *ctx, arg_vsse8_v *a);
typedef arg_rnfvm arg_vsse16_v;
static bool trans_vsse16_v(DisasContext *ctx, arg_vsse16_v *a);
typedef arg_rnfvm arg_vsse32_v;
static bool trans_vsse32_v(DisasContext *ctx, arg_vsse32_v *a);
typedef arg_rnfvm arg_vsse64_v;
static bool trans_vsse64_v(DisasContext *ctx, arg_vsse64_v *a);
typedef arg_rnfvm arg_vlxei8_v;
static bool trans_vlxei8_v(DisasContext *ctx, arg_vlxei8_v *a);
typedef arg_rnfvm arg_vlxei16_v;
static bool trans_vlxei16_v(DisasContext *ctx, arg_vlxei16_v *a);
typedef arg_rnfvm arg_vlxei32_v;
static bool trans_vlxei32_v(DisasContext *ctx, arg_vlxei32_v *a);
typedef arg_rnfvm arg_vlxei64_v;
static bool trans_vlxei64_v(DisasContext *ctx, arg_vlxei64_v *a);
typedef arg_rnfvm arg_vsxei8_v;
static bool trans_vsxei8_v(DisasContext *ctx, arg_vsxei8_v *a);
typedef arg_rnfvm arg_vsxei16_v;
static bool trans_vsxei16_v(DisasContext *ctx, arg_vsxei16_v *a);
typedef arg_rnfvm arg_vsxei32_v;
static bool trans_vsxei32_v(DisasContext *ctx, arg_vsxei32_v *a);
typedef arg_rnfvm arg_vsxei64_v;
static bool trans_vsxei64_v(DisasContext *ctx, arg_vsxei64_v *a);
typedef arg_r2nfvm arg_vle8ff_v;
static bool trans_vle8ff_v(DisasContext *ctx, arg_vle8ff_v *a);
typedef arg_r2nfvm arg_vle16ff_v;
static bool trans_vle16ff_v(DisasContext *ctx, arg_vle16ff_v *a);
typedef arg_r2nfvm arg_vle32ff_v;
static bool trans_vle32ff_v(DisasContext *ctx, arg_vle32ff_v *a);
typedef arg_r2nfvm arg_vle64ff_v;
static bool trans_vle64ff_v(DisasContext *ctx, arg_vle64ff_v *a);
typedef arg_r2 arg_vl1re8_v;
static bool trans_vl1re8_v(DisasContext *ctx, arg_vl1re8_v *a);
typedef arg_r2 arg_vl1re16_v;
static bool trans_vl1re16_v(DisasContext *ctx, arg_vl1re16_v *a);
typedef arg_r2 arg_vl1re32_v;
static bool trans_vl1re32_v(DisasContext *ctx, arg_vl1re32_v *a);
typedef arg_r2 arg_vl1re64_v;
static bool trans_vl1re64_v(DisasContext *ctx, arg_vl1re64_v *a);
typedef arg_r2 arg_vl2re8_v;
static bool trans_vl2re8_v(DisasContext *ctx, arg_vl2re8_v *a);
typedef arg_r2 arg_vl2re16_v;
static bool trans_vl2re16_v(DisasContext *ctx, arg_vl2re16_v *a);
typedef arg_r2 arg_vl2re32_v;
static bool trans_vl2re32_v(DisasContext *ctx, arg_vl2re32_v *a);
typedef arg_r2 arg_vl2re64_v;
static bool trans_vl2re64_v(DisasContext *ctx, arg_vl2re64_v *a);
typedef arg_r2 arg_vl4re8_v;
static bool trans_vl4re8_v(DisasContext *ctx, arg_vl4re8_v *a);
typedef arg_r2 arg_vl4re16_v;
static bool trans_vl4re16_v(DisasContext *ctx, arg_vl4re16_v *a);
typedef arg_r2 arg_vl4re32_v;
static bool trans_vl4re32_v(DisasContext *ctx, arg_vl4re32_v *a);
typedef arg_r2 arg_vl4re64_v;
static bool trans_vl4re64_v(DisasContext *ctx, arg_vl4re64_v *a);
typedef arg_r2 arg_vl8re8_v;
static bool trans_vl8re8_v(DisasContext *ctx, arg_vl8re8_v *a);
typedef arg_r2 arg_vl8re16_v;
static bool trans_vl8re16_v(DisasContext *ctx, arg_vl8re16_v *a);
typedef arg_r2 arg_vl8re32_v;
static bool trans_vl8re32_v(DisasContext *ctx, arg_vl8re32_v *a);
typedef arg_r2 arg_vl8re64_v;
static bool trans_vl8re64_v(DisasContext *ctx, arg_vl8re64_v *a);
typedef arg_r2 arg_vs1r_v;
static bool trans_vs1r_v(DisasContext *ctx, arg_vs1r_v *a);
typedef arg_r2 arg_vs2r_v;
static bool trans_vs2r_v(DisasContext *ctx, arg_vs2r_v *a);
typedef arg_r2 arg_vs4r_v;
static bool trans_vs4r_v(DisasContext *ctx, arg_vs4r_v *a);
typedef arg_r2 arg_vs8r_v;
static bool trans_vs8r_v(DisasContext *ctx, arg_vs8r_v *a);
typedef arg_rmrr arg_vadd_vv;
static bool trans_vadd_vv(DisasContext *ctx, arg_vadd_vv *a);
typedef arg_rmrr arg_vadd_vx;
static bool trans_vadd_vx(DisasContext *ctx, arg_vadd_vx *a);
typedef arg_rmrr arg_vadd_vi;
static bool trans_vadd_vi(DisasContext *ctx, arg_vadd_vi *a);
typedef arg_rmrr arg_vsub_vv;
static bool trans_vsub_vv(DisasContext *ctx, arg_vsub_vv *a);
typedef arg_rmrr arg_vsub_vx;
static bool trans_vsub_vx(DisasContext *ctx, arg_vsub_vx *a);
typedef arg_rmrr arg_vrsub_vx;
static bool trans_vrsub_vx(DisasContext *ctx, arg_vrsub_vx *a);
typedef arg_rmrr arg_vrsub_vi;
static bool trans_vrsub_vi(DisasContext *ctx, arg_vrsub_vi *a);
typedef arg_rmrr arg_vwaddu_vv;
static bool trans_vwaddu_vv(DisasContext *ctx, arg_vwaddu_vv *a);
typedef arg_rmrr arg_vwaddu_vx;
static bool trans_vwaddu_vx(DisasContext *ctx, arg_vwaddu_vx *a);
typedef arg_rmrr arg_vwadd_vv;
static bool trans_vwadd_vv(DisasContext *ctx, arg_vwadd_vv *a);
typedef arg_rmrr arg_vwadd_vx;
static bool trans_vwadd_vx(DisasContext *ctx, arg_vwadd_vx *a);
typedef arg_rmrr arg_vwsubu_vv;
static bool trans_vwsubu_vv(DisasContext *ctx, arg_vwsubu_vv *a);
typedef arg_rmrr arg_vwsubu_vx;
static bool trans_vwsubu_vx(DisasContext *ctx, arg_vwsubu_vx *a);
typedef arg_rmrr arg_vwsub_vv;
static bool trans_vwsub_vv(DisasContext *ctx, arg_vwsub_vv *a);
typedef arg_rmrr arg_vwsub_vx;
static bool trans_vwsub_vx(DisasContext *ctx, arg_vwsub_vx *a);
typedef arg_rmrr arg_vwaddu_wv;
static bool trans_vwaddu_wv(DisasContext *ctx, arg_vwaddu_wv *a);
typedef arg_rmrr arg_vwaddu_wx;
static bool trans_vwaddu_wx(DisasContext *ctx, arg_vwaddu_wx *a);
typedef arg_rmrr arg_vwadd_wv;
static bool trans_vwadd_wv(DisasContext *ctx, arg_vwadd_wv *a);
typedef arg_rmrr arg_vwadd_wx;
static bool trans_vwadd_wx(DisasContext *ctx, arg_vwadd_wx *a);
typedef arg_rmrr arg_vwsubu_wv;
static bool trans_vwsubu_wv(DisasContext *ctx, arg_vwsubu_wv *a);
typedef arg_rmrr arg_vwsubu_wx;
static bool trans_vwsubu_wx(DisasContext *ctx, arg_vwsubu_wx *a);
typedef arg_rmrr arg_vwsub_wv;
static bool trans_vwsub_wv(DisasContext *ctx, arg_vwsub_wv *a);
typedef arg_rmrr arg_vwsub_wx;
static bool trans_vwsub_wx(DisasContext *ctx, arg_vwsub_wx *a);
typedef arg_rmrr arg_vadc_vvm;
static bool trans_vadc_vvm(DisasContext *ctx, arg_vadc_vvm *a);
typedef arg_rmrr arg_vadc_vxm;
static bool trans_vadc_vxm(DisasContext *ctx, arg_vadc_vxm *a);
typedef arg_rmrr arg_vadc_vim;
static bool trans_vadc_vim(DisasContext *ctx, arg_vadc_vim *a);
typedef arg_rmrr arg_vmadc_vvm;
static bool trans_vmadc_vvm(DisasContext *ctx, arg_vmadc_vvm *a);
typedef arg_rmrr arg_vmadc_vxm;
static bool trans_vmadc_vxm(DisasContext *ctx, arg_vmadc_vxm *a);
typedef arg_rmrr arg_vmadc_vim;
static bool trans_vmadc_vim(DisasContext *ctx, arg_vmadc_vim *a);
typedef arg_rmrr arg_vsbc_vvm;
static bool trans_vsbc_vvm(DisasContext *ctx, arg_vsbc_vvm *a);
typedef arg_rmrr arg_vsbc_vxm;
static bool trans_vsbc_vxm(DisasContext *ctx, arg_vsbc_vxm *a);
typedef arg_rmrr arg_vmsbc_vvm;
static bool trans_vmsbc_vvm(DisasContext *ctx, arg_vmsbc_vvm *a);
typedef arg_rmrr arg_vmsbc_vxm;
static bool trans_vmsbc_vxm(DisasContext *ctx, arg_vmsbc_vxm *a);
typedef arg_rmrr arg_vand_vv;
static bool trans_vand_vv(DisasContext *ctx, arg_vand_vv *a);
typedef arg_rmrr arg_vand_vx;
static bool trans_vand_vx(DisasContext *ctx, arg_vand_vx *a);
typedef arg_rmrr arg_vand_vi;
static bool trans_vand_vi(DisasContext *ctx, arg_vand_vi *a);
typedef arg_rmrr arg_vor_vv;
static bool trans_vor_vv(DisasContext *ctx, arg_vor_vv *a);
typedef arg_rmrr arg_vor_vx;
static bool trans_vor_vx(DisasContext *ctx, arg_vor_vx *a);
typedef arg_rmrr arg_vor_vi;
static bool trans_vor_vi(DisasContext *ctx, arg_vor_vi *a);
typedef arg_rmrr arg_vxor_vv;
static bool trans_vxor_vv(DisasContext *ctx, arg_vxor_vv *a);
typedef arg_rmrr arg_vxor_vx;
static bool trans_vxor_vx(DisasContext *ctx, arg_vxor_vx *a);
typedef arg_rmrr arg_vxor_vi;
static bool trans_vxor_vi(DisasContext *ctx, arg_vxor_vi *a);
typedef arg_rmrr arg_vsll_vv;
static bool trans_vsll_vv(DisasContext *ctx, arg_vsll_vv *a);
typedef arg_rmrr arg_vsll_vx;
static bool trans_vsll_vx(DisasContext *ctx, arg_vsll_vx *a);
typedef arg_rmrr arg_vsll_vi;
static bool trans_vsll_vi(DisasContext *ctx, arg_vsll_vi *a);
typedef arg_rmrr arg_vsrl_vv;
static bool trans_vsrl_vv(DisasContext *ctx, arg_vsrl_vv *a);
typedef arg_rmrr arg_vsrl_vx;
static bool trans_vsrl_vx(DisasContext *ctx, arg_vsrl_vx *a);
typedef arg_rmrr arg_vsrl_vi;
static bool trans_vsrl_vi(DisasContext *ctx, arg_vsrl_vi *a);
typedef arg_rmrr arg_vsra_vv;
static bool trans_vsra_vv(DisasContext *ctx, arg_vsra_vv *a);
typedef arg_rmrr arg_vsra_vx;
static bool trans_vsra_vx(DisasContext *ctx, arg_vsra_vx *a);
typedef arg_rmrr arg_vsra_vi;
static bool trans_vsra_vi(DisasContext *ctx, arg_vsra_vi *a);
typedef arg_rmrr arg_vnsrl_wv;
static bool trans_vnsrl_wv(DisasContext *ctx, arg_vnsrl_wv *a);
typedef arg_rmrr arg_vnsrl_wx;
static bool trans_vnsrl_wx(DisasContext *ctx, arg_vnsrl_wx *a);
typedef arg_rmrr arg_vnsrl_wi;
static bool trans_vnsrl_wi(DisasContext *ctx, arg_vnsrl_wi *a);
typedef arg_rmrr arg_vnsra_wv;
static bool trans_vnsra_wv(DisasContext *ctx, arg_vnsra_wv *a);
typedef arg_rmrr arg_vnsra_wx;
static bool trans_vnsra_wx(DisasContext *ctx, arg_vnsra_wx *a);
typedef arg_rmrr arg_vnsra_wi;
static bool trans_vnsra_wi(DisasContext *ctx, arg_vnsra_wi *a);
typedef arg_rmrr arg_vmseq_vv;
static bool trans_vmseq_vv(DisasContext *ctx, arg_vmseq_vv *a);
typedef arg_rmrr arg_vmseq_vx;
static bool trans_vmseq_vx(DisasContext *ctx, arg_vmseq_vx *a);
typedef arg_rmrr arg_vmseq_vi;
static bool trans_vmseq_vi(DisasContext *ctx, arg_vmseq_vi *a);
typedef arg_rmrr arg_vmsne_vv;
static bool trans_vmsne_vv(DisasContext *ctx, arg_vmsne_vv *a);
typedef arg_rmrr arg_vmsne_vx;
static bool trans_vmsne_vx(DisasContext *ctx, arg_vmsne_vx *a);
typedef arg_rmrr arg_vmsne_vi;
static bool trans_vmsne_vi(DisasContext *ctx, arg_vmsne_vi *a);
typedef arg_rmrr arg_vmsltu_vv;
static bool trans_vmsltu_vv(DisasContext *ctx, arg_vmsltu_vv *a);
typedef arg_rmrr arg_vmsltu_vx;
static bool trans_vmsltu_vx(DisasContext *ctx, arg_vmsltu_vx *a);
typedef arg_rmrr arg_vmslt_vv;
static bool trans_vmslt_vv(DisasContext *ctx, arg_vmslt_vv *a);
typedef arg_rmrr arg_vmslt_vx;
static bool trans_vmslt_vx(DisasContext *ctx, arg_vmslt_vx *a);
typedef arg_rmrr arg_vmsleu_vv;
static bool trans_vmsleu_vv(DisasContext *ctx, arg_vmsleu_vv *a);
typedef arg_rmrr arg_vmsleu_vx;
static bool trans_vmsleu_vx(DisasContext *ctx, arg_vmsleu_vx *a);
typedef arg_rmrr arg_vmsleu_vi;
static bool trans_vmsleu_vi(DisasContext *ctx, arg_vmsleu_vi *a);
typedef arg_rmrr arg_vmsle_vv;
static bool trans_vmsle_vv(DisasContext *ctx, arg_vmsle_vv *a);
typedef arg_rmrr arg_vmsle_vx;
static bool trans_vmsle_vx(DisasContext *ctx, arg_vmsle_vx *a);
typedef arg_rmrr arg_vmsle_vi;
static bool trans_vmsle_vi(DisasContext *ctx, arg_vmsle_vi *a);
typedef arg_rmrr arg_vmsgtu_vx;
static bool trans_vmsgtu_vx(DisasContext *ctx, arg_vmsgtu_vx *a);
typedef arg_rmrr arg_vmsgtu_vi;
static bool trans_vmsgtu_vi(DisasContext *ctx, arg_vmsgtu_vi *a);
typedef arg_rmrr arg_vmsgt_vx;
static bool trans_vmsgt_vx(DisasContext *ctx, arg_vmsgt_vx *a);
typedef arg_rmrr arg_vmsgt_vi;
static bool trans_vmsgt_vi(DisasContext *ctx, arg_vmsgt_vi *a);
typedef arg_rmrr arg_vminu_vv;
static bool trans_vminu_vv(DisasContext *ctx, arg_vminu_vv *a);
typedef arg_rmrr arg_vminu_vx;
static bool trans_vminu_vx(DisasContext *ctx, arg_vminu_vx *a);
typedef arg_rmrr arg_vmin_vv;
static bool trans_vmin_vv(DisasContext *ctx, arg_vmin_vv *a);
typedef arg_rmrr arg_vmin_vx;
static bool trans_vmin_vx(DisasContext *ctx, arg_vmin_vx *a);
typedef arg_rmrr arg_vmaxu_vv;
static bool trans_vmaxu_vv(DisasContext *ctx, arg_vmaxu_vv *a);
typedef arg_rmrr arg_vmaxu_vx;
static bool trans_vmaxu_vx(DisasContext *ctx, arg_vmaxu_vx *a);
typedef arg_rmrr arg_vmax_vv;
static bool trans_vmax_vv(DisasContext *ctx, arg_vmax_vv *a);
typedef arg_rmrr arg_vmax_vx;
static bool trans_vmax_vx(DisasContext *ctx, arg_vmax_vx *a);
typedef arg_rmrr arg_vmul_vv;
static bool trans_vmul_vv(DisasContext *ctx, arg_vmul_vv *a);
typedef arg_rmrr arg_vmul_vx;
static bool trans_vmul_vx(DisasContext *ctx, arg_vmul_vx *a);
typedef arg_rmrr arg_vmulh_vv;
static bool trans_vmulh_vv(DisasContext *ctx, arg_vmulh_vv *a);
typedef arg_rmrr arg_vmulh_vx;
static bool trans_vmulh_vx(DisasContext *ctx, arg_vmulh_vx *a);
typedef arg_rmrr arg_vmulhu_vv;
static bool trans_vmulhu_vv(DisasContext *ctx, arg_vmulhu_vv *a);
typedef arg_rmrr arg_vmulhu_vx;
static bool trans_vmulhu_vx(DisasContext *ctx, arg_vmulhu_vx *a);
typedef arg_rmrr arg_vmulhsu_vv;
static bool trans_vmulhsu_vv(DisasContext *ctx, arg_vmulhsu_vv *a);
typedef arg_rmrr arg_vmulhsu_vx;
static bool trans_vmulhsu_vx(DisasContext *ctx, arg_vmulhsu_vx *a);
typedef arg_rmrr arg_vdivu_vv;
static bool trans_vdivu_vv(DisasContext *ctx, arg_vdivu_vv *a);
typedef arg_rmrr arg_vdivu_vx;
static bool trans_vdivu_vx(DisasContext *ctx, arg_vdivu_vx *a);
typedef arg_rmrr arg_vdiv_vv;
static bool trans_vdiv_vv(DisasContext *ctx, arg_vdiv_vv *a);
typedef arg_rmrr arg_vdiv_vx;
static bool trans_vdiv_vx(DisasContext *ctx, arg_vdiv_vx *a);
typedef arg_rmrr arg_vremu_vv;
static bool trans_vremu_vv(DisasContext *ctx, arg_vremu_vv *a);
typedef arg_rmrr arg_vremu_vx;
static bool trans_vremu_vx(DisasContext *ctx, arg_vremu_vx *a);
typedef arg_rmrr arg_vrem_vv;
static bool trans_vrem_vv(DisasContext *ctx, arg_vrem_vv *a);
typedef arg_rmrr arg_vrem_vx;
static bool trans_vrem_vx(DisasContext *ctx, arg_vrem_vx *a);
typedef arg_rmrr arg_vwmulu_vv;
static bool trans_vwmulu_vv(DisasContext *ctx, arg_vwmulu_vv *a);
typedef arg_rmrr arg_vwmulu_vx;
static bool trans_vwmulu_vx(DisasContext *ctx, arg_vwmulu_vx *a);
typedef arg_rmrr arg_vwmulsu_vv;
static bool trans_vwmulsu_vv(DisasContext *ctx, arg_vwmulsu_vv *a);
typedef arg_rmrr arg_vwmulsu_vx;
static bool trans_vwmulsu_vx(DisasContext *ctx, arg_vwmulsu_vx *a);
typedef arg_rmrr arg_vwmul_vv;
static bool trans_vwmul_vv(DisasContext *ctx, arg_vwmul_vv *a);
typedef arg_rmrr arg_vwmul_vx;
static bool trans_vwmul_vx(DisasContext *ctx, arg_vwmul_vx *a);
typedef arg_rmrr arg_vmacc_vv;
static bool trans_vmacc_vv(DisasContext *ctx, arg_vmacc_vv *a);
typedef arg_rmrr arg_vmacc_vx;
static bool trans_vmacc_vx(DisasContext *ctx, arg_vmacc_vx *a);
typedef arg_rmrr arg_vnmsac_vv;
static bool trans_vnmsac_vv(DisasContext *ctx, arg_vnmsac_vv *a);
typedef arg_rmrr arg_vnmsac_vx;
static bool trans_vnmsac_vx(DisasContext *ctx, arg_vnmsac_vx *a);
typedef arg_rmrr arg_vmadd_vv;
static bool trans_vmadd_vv(DisasContext *ctx, arg_vmadd_vv *a);
typedef arg_rmrr arg_vmadd_vx;
static bool trans_vmadd_vx(DisasContext *ctx, arg_vmadd_vx *a);
typedef arg_rmrr arg_vnmsub_vv;
static bool trans_vnmsub_vv(DisasContext *ctx, arg_vnmsub_vv *a);
typedef arg_rmrr arg_vnmsub_vx;
static bool trans_vnmsub_vx(DisasContext *ctx, arg_vnmsub_vx *a);
typedef arg_rmrr arg_vwmaccu_vv;
static bool trans_vwmaccu_vv(DisasContext *ctx, arg_vwmaccu_vv *a);
typedef arg_rmrr arg_vwmaccu_vx;
static bool trans_vwmaccu_vx(DisasContext *ctx, arg_vwmaccu_vx *a);
typedef arg_rmrr arg_vwmacc_vv;
static bool trans_vwmacc_vv(DisasContext *ctx, arg_vwmacc_vv *a);
typedef arg_rmrr arg_vwmacc_vx;
static bool trans_vwmacc_vx(DisasContext *ctx, arg_vwmacc_vx *a);
typedef arg_rmrr arg_vwmaccsu_vv;
static bool trans_vwmaccsu_vv(DisasContext *ctx, arg_vwmaccsu_vv *a);
typedef arg_rmrr arg_vwmaccsu_vx;
static bool trans_vwmaccsu_vx(DisasContext *ctx, arg_vwmaccsu_vx *a);
typedef arg_rmrr arg_vwmaccus_vx;
static bool trans_vwmaccus_vx(DisasContext *ctx, arg_vwmaccus_vx *a);
typedef arg_r2 arg_vmv_v_v;
static bool trans_vmv_v_v(DisasContext *ctx, arg_vmv_v_v *a);
typedef arg_r2 arg_vmv_v_x;
static bool trans_vmv_v_x(DisasContext *ctx, arg_vmv_v_x *a);
typedef arg_r2 arg_vmv_v_i;
static bool trans_vmv_v_i(DisasContext *ctx, arg_vmv_v_i *a);
typedef arg_rmrr arg_vmerge_vvm;
static bool trans_vmerge_vvm(DisasContext *ctx, arg_vmerge_vvm *a);
typedef arg_rmrr arg_vmerge_vxm;
static bool trans_vmerge_vxm(DisasContext *ctx, arg_vmerge_vxm *a);
typedef arg_rmrr arg_vmerge_vim;
static bool trans_vmerge_vim(DisasContext *ctx, arg_vmerge_vim *a);
typedef arg_rmrr arg_vsaddu_vv;
static bool trans_vsaddu_vv(DisasContext *ctx, arg_vsaddu_vv *a);
typedef arg_rmrr arg_vsaddu_vx;
static bool trans_vsaddu_vx(DisasContext *ctx, arg_vsaddu_vx *a);
typedef arg_rmrr arg_vsaddu_vi;
static bool trans_vsaddu_vi(DisasContext *ctx, arg_vsaddu_vi *a);
typedef arg_rmrr arg_vsadd_vv;
static bool trans_vsadd_vv(DisasContext *ctx, arg_vsadd_vv *a);
typedef arg_rmrr arg_vsadd_vx;
static bool trans_vsadd_vx(DisasContext *ctx, arg_vsadd_vx *a);
typedef arg_rmrr arg_vsadd_vi;
static bool trans_vsadd_vi(DisasContext *ctx, arg_vsadd_vi *a);
typedef arg_rmrr arg_vssubu_vv;
static bool trans_vssubu_vv(DisasContext *ctx, arg_vssubu_vv *a);
typedef arg_rmrr arg_vssubu_vx;
static bool trans_vssubu_vx(DisasContext *ctx, arg_vssubu_vx *a);
typedef arg_rmrr arg_vssub_vv;
static bool trans_vssub_vv(DisasContext *ctx, arg_vssub_vv *a);
typedef arg_rmrr arg_vssub_vx;
static bool trans_vssub_vx(DisasContext *ctx, arg_vssub_vx *a);
typedef arg_rmrr arg_vaadd_vv;
static bool trans_vaadd_vv(DisasContext *ctx, arg_vaadd_vv *a);
typedef arg_rmrr arg_vaadd_vx;
static bool trans_vaadd_vx(DisasContext *ctx, arg_vaadd_vx *a);
typedef arg_rmrr arg_vaaddu_vv;
static bool trans_vaaddu_vv(DisasContext *ctx, arg_vaaddu_vv *a);
typedef arg_rmrr arg_vaaddu_vx;
static bool trans_vaaddu_vx(DisasContext *ctx, arg_vaaddu_vx *a);
typedef arg_rmrr arg_vasub_vv;
static bool trans_vasub_vv(DisasContext *ctx, arg_vasub_vv *a);
typedef arg_rmrr arg_vasub_vx;
static bool trans_vasub_vx(DisasContext *ctx, arg_vasub_vx *a);
typedef arg_rmrr arg_vasubu_vv;
static bool trans_vasubu_vv(DisasContext *ctx, arg_vasubu_vv *a);
typedef arg_rmrr arg_vasubu_vx;
static bool trans_vasubu_vx(DisasContext *ctx, arg_vasubu_vx *a);
typedef arg_rmrr arg_vsmul_vv;
static bool trans_vsmul_vv(DisasContext *ctx, arg_vsmul_vv *a);
typedef arg_rmrr arg_vsmul_vx;
static bool trans_vsmul_vx(DisasContext *ctx, arg_vsmul_vx *a);
typedef arg_rmrr arg_vssrl_vv;
static bool trans_vssrl_vv(DisasContext *ctx, arg_vssrl_vv *a);
typedef arg_rmrr arg_vssrl_vx;
static bool trans_vssrl_vx(DisasContext *ctx, arg_vssrl_vx *a);
typedef arg_rmrr arg_vssrl_vi;
static bool trans_vssrl_vi(DisasContext *ctx, arg_vssrl_vi *a);
typedef arg_rmrr arg_vssra_vv;
static bool trans_vssra_vv(DisasContext *ctx, arg_vssra_vv *a);
typedef arg_rmrr arg_vssra_vx;
static bool trans_vssra_vx(DisasContext *ctx, arg_vssra_vx *a);
typedef arg_rmrr arg_vssra_vi;
static bool trans_vssra_vi(DisasContext *ctx, arg_vssra_vi *a);
typedef arg_rmrr arg_vnclipu_wv;
static bool trans_vnclipu_wv(DisasContext *ctx, arg_vnclipu_wv *a);
typedef arg_rmrr arg_vnclipu_wx;
static bool trans_vnclipu_wx(DisasContext *ctx, arg_vnclipu_wx *a);
typedef arg_rmrr arg_vnclipu_wi;
static bool trans_vnclipu_wi(DisasContext *ctx, arg_vnclipu_wi *a);
typedef arg_rmrr arg_vnclip_wv;
static bool trans_vnclip_wv(DisasContext *ctx, arg_vnclip_wv *a);
typedef arg_rmrr arg_vnclip_wx;
static bool trans_vnclip_wx(DisasContext *ctx, arg_vnclip_wx *a);
typedef arg_rmrr arg_vnclip_wi;
static bool trans_vnclip_wi(DisasContext *ctx, arg_vnclip_wi *a);
typedef arg_rmrr arg_vfadd_vv;
static bool trans_vfadd_vv(DisasContext *ctx, arg_vfadd_vv *a);
typedef arg_rmrr arg_vfadd_vf;
static bool trans_vfadd_vf(DisasContext *ctx, arg_vfadd_vf *a);
typedef arg_rmrr arg_vfsub_vv;
static bool trans_vfsub_vv(DisasContext *ctx, arg_vfsub_vv *a);
typedef arg_rmrr arg_vfsub_vf;
static bool trans_vfsub_vf(DisasContext *ctx, arg_vfsub_vf *a);
typedef arg_rmrr arg_vfrsub_vf;
static bool trans_vfrsub_vf(DisasContext *ctx, arg_vfrsub_vf *a);
typedef arg_rmrr arg_vfwadd_vv;
static bool trans_vfwadd_vv(DisasContext *ctx, arg_vfwadd_vv *a);
typedef arg_rmrr arg_vfwadd_vf;
static bool trans_vfwadd_vf(DisasContext *ctx, arg_vfwadd_vf *a);
typedef arg_rmrr arg_vfwadd_wv;
static bool trans_vfwadd_wv(DisasContext *ctx, arg_vfwadd_wv *a);
typedef arg_rmrr arg_vfwadd_wf;
static bool trans_vfwadd_wf(DisasContext *ctx, arg_vfwadd_wf *a);
typedef arg_rmrr arg_vfwsub_vv;
static bool trans_vfwsub_vv(DisasContext *ctx, arg_vfwsub_vv *a);
typedef arg_rmrr arg_vfwsub_vf;
static bool trans_vfwsub_vf(DisasContext *ctx, arg_vfwsub_vf *a);
typedef arg_rmrr arg_vfwsub_wv;
static bool trans_vfwsub_wv(DisasContext *ctx, arg_vfwsub_wv *a);
typedef arg_rmrr arg_vfwsub_wf;
static bool trans_vfwsub_wf(DisasContext *ctx, arg_vfwsub_wf *a);
typedef arg_rmrr arg_vfmul_vv;
static bool trans_vfmul_vv(DisasContext *ctx, arg_vfmul_vv *a);
typedef arg_rmrr arg_vfmul_vf;
static bool trans_vfmul_vf(DisasContext *ctx, arg_vfmul_vf *a);
typedef arg_rmrr arg_vfdiv_vv;
static bool trans_vfdiv_vv(DisasContext *ctx, arg_vfdiv_vv *a);
typedef arg_rmrr arg_vfdiv_vf;
static bool trans_vfdiv_vf(DisasContext *ctx, arg_vfdiv_vf *a);
typedef arg_rmrr arg_vfrdiv_vf;
static bool trans_vfrdiv_vf(DisasContext *ctx, arg_vfrdiv_vf *a);
typedef arg_rmrr arg_vfwmul_vv;
static bool trans_vfwmul_vv(DisasContext *ctx, arg_vfwmul_vv *a);
typedef arg_rmrr arg_vfwmul_vf;
static bool trans_vfwmul_vf(DisasContext *ctx, arg_vfwmul_vf *a);
typedef arg_rmrr arg_vfmacc_vv;
static bool trans_vfmacc_vv(DisasContext *ctx, arg_vfmacc_vv *a);
typedef arg_rmrr arg_vfnmacc_vv;
static bool trans_vfnmacc_vv(DisasContext *ctx, arg_vfnmacc_vv *a);
typedef arg_rmrr arg_vfnmacc_vf;
static bool trans_vfnmacc_vf(DisasContext *ctx, arg_vfnmacc_vf *a);
typedef arg_rmrr arg_vfmacc_vf;
static bool trans_vfmacc_vf(DisasContext *ctx, arg_vfmacc_vf *a);
typedef arg_rmrr arg_vfmsac_vv;
static bool trans_vfmsac_vv(DisasContext *ctx, arg_vfmsac_vv *a);
typedef arg_rmrr arg_vfmsac_vf;
static bool trans_vfmsac_vf(DisasContext *ctx, arg_vfmsac_vf *a);
typedef arg_rmrr arg_vfnmsac_vv;
static bool trans_vfnmsac_vv(DisasContext *ctx, arg_vfnmsac_vv *a);
typedef arg_rmrr arg_vfnmsac_vf;
static bool trans_vfnmsac_vf(DisasContext *ctx, arg_vfnmsac_vf *a);
typedef arg_rmrr arg_vfmadd_vv;
static bool trans_vfmadd_vv(DisasContext *ctx, arg_vfmadd_vv *a);
typedef arg_rmrr arg_vfmadd_vf;
static bool trans_vfmadd_vf(DisasContext *ctx, arg_vfmadd_vf *a);
typedef arg_rmrr arg_vfnmadd_vv;
static bool trans_vfnmadd_vv(DisasContext *ctx, arg_vfnmadd_vv *a);
typedef arg_rmrr arg_vfnmadd_vf;
static bool trans_vfnmadd_vf(DisasContext *ctx, arg_vfnmadd_vf *a);
typedef arg_rmrr arg_vfmsub_vv;
static bool trans_vfmsub_vv(DisasContext *ctx, arg_vfmsub_vv *a);
typedef arg_rmrr arg_vfmsub_vf;
static bool trans_vfmsub_vf(DisasContext *ctx, arg_vfmsub_vf *a);
typedef arg_rmrr arg_vfnmsub_vv;
static bool trans_vfnmsub_vv(DisasContext *ctx, arg_vfnmsub_vv *a);
typedef arg_rmrr arg_vfnmsub_vf;
static bool trans_vfnmsub_vf(DisasContext *ctx, arg_vfnmsub_vf *a);
typedef arg_rmrr arg_vfwmacc_vv;
static bool trans_vfwmacc_vv(DisasContext *ctx, arg_vfwmacc_vv *a);
typedef arg_rmrr arg_vfwmacc_vf;
static bool trans_vfwmacc_vf(DisasContext *ctx, arg_vfwmacc_vf *a);
typedef arg_rmrr arg_vfwnmacc_vv;
static bool trans_vfwnmacc_vv(DisasContext *ctx, arg_vfwnmacc_vv *a);
typedef arg_rmrr arg_vfwnmacc_vf;
static bool trans_vfwnmacc_vf(DisasContext *ctx, arg_vfwnmacc_vf *a);
typedef arg_rmrr arg_vfwmsac_vv;
static bool trans_vfwmsac_vv(DisasContext *ctx, arg_vfwmsac_vv *a);
typedef arg_rmrr arg_vfwmsac_vf;
static bool trans_vfwmsac_vf(DisasContext *ctx, arg_vfwmsac_vf *a);
typedef arg_rmrr arg_vfwnmsac_vv;
static bool trans_vfwnmsac_vv(DisasContext *ctx, arg_vfwnmsac_vv *a);
typedef arg_rmrr arg_vfwnmsac_vf;
static bool trans_vfwnmsac_vf(DisasContext *ctx, arg_vfwnmsac_vf *a);
typedef arg_rmr arg_vfsqrt_v;
static bool trans_vfsqrt_v(DisasContext *ctx, arg_vfsqrt_v *a);
typedef arg_rmr arg_vfrsqrt7_v;
static bool trans_vfrsqrt7_v(DisasContext *ctx, arg_vfrsqrt7_v *a);
typedef arg_rmr arg_vfrec7_v;
static bool trans_vfrec7_v(DisasContext *ctx, arg_vfrec7_v *a);
typedef arg_rmrr arg_vfmin_vv;
static bool trans_vfmin_vv(DisasContext *ctx, arg_vfmin_vv *a);
typedef arg_rmrr arg_vfmin_vf;
static bool trans_vfmin_vf(DisasContext *ctx, arg_vfmin_vf *a);
typedef arg_rmrr arg_vfmax_vv;
static bool trans_vfmax_vv(DisasContext *ctx, arg_vfmax_vv *a);
typedef arg_rmrr arg_vfmax_vf;
static bool trans_vfmax_vf(DisasContext *ctx, arg_vfmax_vf *a);
typedef arg_rmrr arg_vfsgnj_vv;
static bool trans_vfsgnj_vv(DisasContext *ctx, arg_vfsgnj_vv *a);
typedef arg_rmrr arg_vfsgnj_vf;
static bool trans_vfsgnj_vf(DisasContext *ctx, arg_vfsgnj_vf *a);
typedef arg_rmrr arg_vfsgnjn_vv;
static bool trans_vfsgnjn_vv(DisasContext *ctx, arg_vfsgnjn_vv *a);
typedef arg_rmrr arg_vfsgnjn_vf;
static bool trans_vfsgnjn_vf(DisasContext *ctx, arg_vfsgnjn_vf *a);
typedef arg_rmrr arg_vfsgnjx_vv;
static bool trans_vfsgnjx_vv(DisasContext *ctx, arg_vfsgnjx_vv *a);
typedef arg_rmrr arg_vfsgnjx_vf;
static bool trans_vfsgnjx_vf(DisasContext *ctx, arg_vfsgnjx_vf *a);
typedef arg_rmrr arg_vfslide1up_vf;
static bool trans_vfslide1up_vf(DisasContext *ctx, arg_vfslide1up_vf *a);
typedef arg_rmrr arg_vfslide1down_vf;
static bool trans_vfslide1down_vf(DisasContext *ctx, arg_vfslide1down_vf *a);
typedef arg_rmrr arg_vmfeq_vv;
static bool trans_vmfeq_vv(DisasContext *ctx, arg_vmfeq_vv *a);
typedef arg_rmrr arg_vmfeq_vf;
static bool trans_vmfeq_vf(DisasContext *ctx, arg_vmfeq_vf *a);
typedef arg_rmrr arg_vmfne_vv;
static bool trans_vmfne_vv(DisasContext *ctx, arg_vmfne_vv *a);
typedef arg_rmrr arg_vmfne_vf;
static bool trans_vmfne_vf(DisasContext *ctx, arg_vmfne_vf *a);
typedef arg_rmrr arg_vmflt_vv;
static bool trans_vmflt_vv(DisasContext *ctx, arg_vmflt_vv *a);
typedef arg_rmrr arg_vmflt_vf;
static bool trans_vmflt_vf(DisasContext *ctx, arg_vmflt_vf *a);
typedef arg_rmrr arg_vmfle_vv;
static bool trans_vmfle_vv(DisasContext *ctx, arg_vmfle_vv *a);
typedef arg_rmrr arg_vmfle_vf;
static bool trans_vmfle_vf(DisasContext *ctx, arg_vmfle_vf *a);
typedef arg_rmrr arg_vmfgt_vf;
static bool trans_vmfgt_vf(DisasContext *ctx, arg_vmfgt_vf *a);
typedef arg_rmrr arg_vmfge_vf;
static bool trans_vmfge_vf(DisasContext *ctx, arg_vmfge_vf *a);
typedef arg_rmr arg_vfclass_v;
static bool trans_vfclass_v(DisasContext *ctx, arg_vfclass_v *a);
typedef arg_rmrr arg_vfmerge_vfm;
static bool trans_vfmerge_vfm(DisasContext *ctx, arg_vfmerge_vfm *a);
typedef arg_r2 arg_vfmv_v_f;
static bool trans_vfmv_v_f(DisasContext *ctx, arg_vfmv_v_f *a);
typedef arg_rmr arg_vfcvt_xu_f_v;
static bool trans_vfcvt_xu_f_v(DisasContext *ctx, arg_vfcvt_xu_f_v *a);
typedef arg_rmr arg_vfcvt_x_f_v;
static bool trans_vfcvt_x_f_v(DisasContext *ctx, arg_vfcvt_x_f_v *a);
typedef arg_rmr arg_vfcvt_f_xu_v;
static bool trans_vfcvt_f_xu_v(DisasContext *ctx, arg_vfcvt_f_xu_v *a);
typedef arg_rmr arg_vfcvt_f_x_v;
static bool trans_vfcvt_f_x_v(DisasContext *ctx, arg_vfcvt_f_x_v *a);
typedef arg_rmr arg_vfcvt_rtz_xu_f_v;
static bool trans_vfcvt_rtz_xu_f_v(DisasContext *ctx, arg_vfcvt_rtz_xu_f_v *a);
typedef arg_rmr arg_vfcvt_rtz_x_f_v;
static bool trans_vfcvt_rtz_x_f_v(DisasContext *ctx, arg_vfcvt_rtz_x_f_v *a);
typedef arg_rmr arg_vfwcvt_xu_f_v;
static bool trans_vfwcvt_xu_f_v(DisasContext *ctx, arg_vfwcvt_xu_f_v *a);
typedef arg_rmr arg_vfwcvt_x_f_v;
static bool trans_vfwcvt_x_f_v(DisasContext *ctx, arg_vfwcvt_x_f_v *a);
typedef arg_rmr arg_vfwcvt_f_xu_v;
static bool trans_vfwcvt_f_xu_v(DisasContext *ctx, arg_vfwcvt_f_xu_v *a);
typedef arg_rmr arg_vfwcvt_f_x_v;
static bool trans_vfwcvt_f_x_v(DisasContext *ctx, arg_vfwcvt_f_x_v *a);
typedef arg_rmr arg_vfwcvt_f_f_v;
static bool trans_vfwcvt_f_f_v(DisasContext *ctx, arg_vfwcvt_f_f_v *a);
typedef arg_rmr arg_vfwcvt_rtz_xu_f_v;
static bool trans_vfwcvt_rtz_xu_f_v(DisasContext *ctx, arg_vfwcvt_rtz_xu_f_v *a);
typedef arg_rmr arg_vfwcvt_rtz_x_f_v;
static bool trans_vfwcvt_rtz_x_f_v(DisasContext *ctx, arg_vfwcvt_rtz_x_f_v *a);
typedef arg_rmr arg_vfncvt_xu_f_w;
static bool trans_vfncvt_xu_f_w(DisasContext *ctx, arg_vfncvt_xu_f_w *a);
typedef arg_rmr arg_vfncvt_x_f_w;
static bool trans_vfncvt_x_f_w(DisasContext *ctx, arg_vfncvt_x_f_w *a);
typedef arg_rmr arg_vfncvt_f_xu_w;
static bool trans_vfncvt_f_xu_w(DisasContext *ctx, arg_vfncvt_f_xu_w *a);
typedef arg_rmr arg_vfncvt_f_x_w;
static bool trans_vfncvt_f_x_w(DisasContext *ctx, arg_vfncvt_f_x_w *a);
typedef arg_rmr arg_vfncvt_f_f_w;
static bool trans_vfncvt_f_f_w(DisasContext *ctx, arg_vfncvt_f_f_w *a);
typedef arg_rmr arg_vfncvt_rod_f_f_w;
static bool trans_vfncvt_rod_f_f_w(DisasContext *ctx, arg_vfncvt_rod_f_f_w *a);
typedef arg_rmr arg_vfncvt_rtz_xu_f_w;
static bool trans_vfncvt_rtz_xu_f_w(DisasContext *ctx, arg_vfncvt_rtz_xu_f_w *a);
typedef arg_rmr arg_vfncvt_rtz_x_f_w;
static bool trans_vfncvt_rtz_x_f_w(DisasContext *ctx, arg_vfncvt_rtz_x_f_w *a);
typedef arg_rmrr arg_vredsum_vs;
static bool trans_vredsum_vs(DisasContext *ctx, arg_vredsum_vs *a);
typedef arg_rmrr arg_vredand_vs;
static bool trans_vredand_vs(DisasContext *ctx, arg_vredand_vs *a);
typedef arg_rmrr arg_vredor_vs;
static bool trans_vredor_vs(DisasContext *ctx, arg_vredor_vs *a);
typedef arg_rmrr arg_vredxor_vs;
static bool trans_vredxor_vs(DisasContext *ctx, arg_vredxor_vs *a);
typedef arg_rmrr arg_vredminu_vs;
static bool trans_vredminu_vs(DisasContext *ctx, arg_vredminu_vs *a);
typedef arg_rmrr arg_vredmin_vs;
static bool trans_vredmin_vs(DisasContext *ctx, arg_vredmin_vs *a);
typedef arg_rmrr arg_vredmaxu_vs;
static bool trans_vredmaxu_vs(DisasContext *ctx, arg_vredmaxu_vs *a);
typedef arg_rmrr arg_vredmax_vs;
static bool trans_vredmax_vs(DisasContext *ctx, arg_vredmax_vs *a);
typedef arg_rmrr arg_vwredsumu_vs;
static bool trans_vwredsumu_vs(DisasContext *ctx, arg_vwredsumu_vs *a);
typedef arg_rmrr arg_vwredsum_vs;
static bool trans_vwredsum_vs(DisasContext *ctx, arg_vwredsum_vs *a);
typedef arg_rmrr arg_vfredusum_vs;
static bool trans_vfredusum_vs(DisasContext *ctx, arg_vfredusum_vs *a);
typedef arg_rmrr arg_vfredosum_vs;
static bool trans_vfredosum_vs(DisasContext *ctx, arg_vfredosum_vs *a);
typedef arg_rmrr arg_vfredmin_vs;
static bool trans_vfredmin_vs(DisasContext *ctx, arg_vfredmin_vs *a);
typedef arg_rmrr arg_vfredmax_vs;
static bool trans_vfredmax_vs(DisasContext *ctx, arg_vfredmax_vs *a);
typedef arg_rmrr arg_vfwredusum_vs;
static bool trans_vfwredusum_vs(DisasContext *ctx, arg_vfwredusum_vs *a);
typedef arg_rmrr arg_vfwredosum_vs;
static bool trans_vfwredosum_vs(DisasContext *ctx, arg_vfwredosum_vs *a);
typedef arg_r arg_vmand_mm;
static bool trans_vmand_mm(DisasContext *ctx, arg_vmand_mm *a);
typedef arg_r arg_vmnand_mm;
static bool trans_vmnand_mm(DisasContext *ctx, arg_vmnand_mm *a);
typedef arg_r arg_vmandn_mm;
static bool trans_vmandn_mm(DisasContext *ctx, arg_vmandn_mm *a);
typedef arg_r arg_vmxor_mm;
static bool trans_vmxor_mm(DisasContext *ctx, arg_vmxor_mm *a);
typedef arg_r arg_vmor_mm;
static bool trans_vmor_mm(DisasContext *ctx, arg_vmor_mm *a);
typedef arg_r arg_vmnor_mm;
static bool trans_vmnor_mm(DisasContext *ctx, arg_vmnor_mm *a);
typedef arg_r arg_vmorn_mm;
static bool trans_vmorn_mm(DisasContext *ctx, arg_vmorn_mm *a);
typedef arg_r arg_vmxnor_mm;
static bool trans_vmxnor_mm(DisasContext *ctx, arg_vmxnor_mm *a);
typedef arg_rmr arg_vcpop_m;
static bool trans_vcpop_m(DisasContext *ctx, arg_vcpop_m *a);
typedef arg_rmr arg_vfirst_m;
static bool trans_vfirst_m(DisasContext *ctx, arg_vfirst_m *a);
typedef arg_rmr arg_vmsbf_m;
static bool trans_vmsbf_m(DisasContext *ctx, arg_vmsbf_m *a);
typedef arg_rmr arg_vmsif_m;
static bool trans_vmsif_m(DisasContext *ctx, arg_vmsif_m *a);
typedef arg_rmr arg_vmsof_m;
static bool trans_vmsof_m(DisasContext *ctx, arg_vmsof_m *a);
typedef arg_rmr arg_viota_m;
static bool trans_viota_m(DisasContext *ctx, arg_viota_m *a);
typedef arg_decode_insn3238 arg_vid_v;
static bool trans_vid_v(DisasContext *ctx, arg_vid_v *a);
typedef arg_decode_insn3239 arg_vmv_x_s;
static bool trans_vmv_x_s(DisasContext *ctx, arg_vmv_x_s *a);
typedef arg_r2 arg_vmv_s_x;
static bool trans_vmv_s_x(DisasContext *ctx, arg_vmv_s_x *a);
typedef arg_decode_insn3239 arg_vfmv_f_s;
static bool trans_vfmv_f_s(DisasContext *ctx, arg_vfmv_f_s *a);
typedef arg_r2 arg_vfmv_s_f;
static bool trans_vfmv_s_f(DisasContext *ctx, arg_vfmv_s_f *a);
typedef arg_rmrr arg_vslideup_vx;
static bool trans_vslideup_vx(DisasContext *ctx, arg_vslideup_vx *a);
typedef arg_rmrr arg_vslideup_vi;
static bool trans_vslideup_vi(DisasContext *ctx, arg_vslideup_vi *a);
typedef arg_rmrr arg_vslide1up_vx;
static bool trans_vslide1up_vx(DisasContext *ctx, arg_vslide1up_vx *a);
typedef arg_rmrr arg_vslidedown_vx;
static bool trans_vslidedown_vx(DisasContext *ctx, arg_vslidedown_vx *a);
typedef arg_rmrr arg_vslidedown_vi;
static bool trans_vslidedown_vi(DisasContext *ctx, arg_vslidedown_vi *a);
typedef arg_rmrr arg_vslide1down_vx;
static bool trans_vslide1down_vx(DisasContext *ctx, arg_vslide1down_vx *a);
typedef arg_rmrr arg_vrgather_vv;
static bool trans_vrgather_vv(DisasContext *ctx, arg_vrgather_vv *a);
typedef arg_rmrr arg_vrgatherei16_vv;
static bool trans_vrgatherei16_vv(DisasContext *ctx, arg_vrgatherei16_vv *a);
typedef arg_rmrr arg_vrgather_vx;
static bool trans_vrgather_vx(DisasContext *ctx, arg_vrgather_vx *a);
typedef arg_rmrr arg_vrgather_vi;
static bool trans_vrgather_vi(DisasContext *ctx, arg_vrgather_vi *a);
typedef arg_r arg_vcompress_vm;
static bool trans_vcompress_vm(DisasContext *ctx, arg_vcompress_vm *a);
typedef arg_decode_insn3239 arg_vmv1r_v;
static bool trans_vmv1r_v(DisasContext *ctx, arg_vmv1r_v *a);
typedef arg_decode_insn3239 arg_vmv2r_v;
static bool trans_vmv2r_v(DisasContext *ctx, arg_vmv2r_v *a);
typedef arg_decode_insn3239 arg_vmv4r_v;
static bool trans_vmv4r_v(DisasContext *ctx, arg_vmv4r_v *a);
typedef arg_decode_insn3239 arg_vmv8r_v;
static bool trans_vmv8r_v(DisasContext *ctx, arg_vmv8r_v *a);
typedef arg_rmr arg_vzext_vf2;
static bool trans_vzext_vf2(DisasContext *ctx, arg_vzext_vf2 *a);
typedef arg_rmr arg_vzext_vf4;
static bool trans_vzext_vf4(DisasContext *ctx, arg_vzext_vf4 *a);
typedef arg_rmr arg_vzext_vf8;
static bool trans_vzext_vf8(DisasContext *ctx, arg_vzext_vf8 *a);
typedef arg_rmr arg_vsext_vf2;
static bool trans_vsext_vf2(DisasContext *ctx, arg_vsext_vf2 *a);
typedef arg_rmr arg_vsext_vf4;
static bool trans_vsext_vf4(DisasContext *ctx, arg_vsext_vf4 *a);
typedef arg_rmr arg_vsext_vf8;
static bool trans_vsext_vf8(DisasContext *ctx, arg_vsext_vf8 *a);
typedef arg_decode_insn3240 arg_vsetvli;
static bool trans_vsetvli(DisasContext *ctx, arg_vsetvli *a);
typedef arg_decode_insn3240 arg_vsetivli;
static bool trans_vsetivli(DisasContext *ctx, arg_vsetivli *a);
typedef arg_r arg_vsetvl;
static bool trans_vsetvl(DisasContext *ctx, arg_vsetvl *a);
typedef arg_empty arg_wrs_nto;
static bool trans_wrs_nto(DisasContext *ctx, arg_wrs_nto *a);
typedef arg_empty arg_wrs_sto;
static bool trans_wrs_sto(DisasContext *ctx, arg_wrs_sto *a);
typedef arg_r arg_sh1add;
static bool trans_sh1add(DisasContext *ctx, arg_sh1add *a);
typedef arg_r arg_sh2add;
static bool trans_sh2add(DisasContext *ctx, arg_sh2add *a);
typedef arg_r arg_sh3add;
static bool trans_sh3add(DisasContext *ctx, arg_sh3add *a);
typedef arg_r arg_add_uw;
static bool trans_add_uw(DisasContext *ctx, arg_add_uw *a);
typedef arg_r arg_sh1add_uw;
static bool trans_sh1add_uw(DisasContext *ctx, arg_sh1add_uw *a);
typedef arg_r arg_sh2add_uw;
static bool trans_sh2add_uw(DisasContext *ctx, arg_sh2add_uw *a);
typedef arg_r arg_sh3add_uw;
static bool trans_sh3add_uw(DisasContext *ctx, arg_sh3add_uw *a);
typedef arg_shift arg_slli_uw;
static bool trans_slli_uw(DisasContext *ctx, arg_slli_uw *a);
typedef arg_r arg_andn;
static bool trans_andn(DisasContext *ctx, arg_andn *a);
typedef arg_r arg_rol;
static bool trans_rol(DisasContext *ctx, arg_rol *a);
typedef arg_r arg_ror;
static bool trans_ror(DisasContext *ctx, arg_ror *a);
typedef arg_shift arg_rori;
static bool trans_rori(DisasContext *ctx, arg_rori *a);
typedef arg_r2 arg_rev8_32;
static bool trans_rev8_32(DisasContext *ctx, arg_rev8_32 *a);
typedef arg_r2 arg_zext_h_32;
static bool trans_zext_h_32(DisasContext *ctx, arg_zext_h_32 *a);
typedef arg_r arg_pack;
static bool trans_pack(DisasContext *ctx, arg_pack *a);
typedef arg_r arg_xnor;
static bool trans_xnor(DisasContext *ctx, arg_xnor *a);
typedef arg_r2 arg_clz;
static bool trans_clz(DisasContext *ctx, arg_clz *a);
typedef arg_r2 arg_cpop;
static bool trans_cpop(DisasContext *ctx, arg_cpop *a);
typedef arg_r2 arg_ctz;
static bool trans_ctz(DisasContext *ctx, arg_ctz *a);
typedef arg_r arg_max;
static bool trans_max(DisasContext *ctx, arg_max *a);
typedef arg_r arg_maxu;
static bool trans_maxu(DisasContext *ctx, arg_maxu *a);
typedef arg_r arg_min;
static bool trans_min(DisasContext *ctx, arg_min *a);
typedef arg_r arg_minu;
static bool trans_minu(DisasContext *ctx, arg_minu *a);
typedef arg_r2 arg_orc_b;
static bool trans_orc_b(DisasContext *ctx, arg_orc_b *a);
typedef arg_r arg_orn;
static bool trans_orn(DisasContext *ctx, arg_orn *a);
typedef arg_r2 arg_sext_b;
static bool trans_sext_b(DisasContext *ctx, arg_sext_b *a);
typedef arg_r2 arg_sext_h;
static bool trans_sext_h(DisasContext *ctx, arg_sext_h *a);
typedef arg_r2 arg_brev8;
static bool trans_brev8(DisasContext *ctx, arg_brev8 *a);
typedef arg_r arg_packh;
static bool trans_packh(DisasContext *ctx, arg_packh *a);
typedef arg_r2 arg_unzip;
static bool trans_unzip(DisasContext *ctx, arg_unzip *a);
typedef arg_r2 arg_zip;
static bool trans_zip(DisasContext *ctx, arg_zip *a);
typedef arg_r2 arg_rev8_64;
static bool trans_rev8_64(DisasContext *ctx, arg_rev8_64 *a);
typedef arg_r arg_rolw;
static bool trans_rolw(DisasContext *ctx, arg_rolw *a);
typedef arg_shift arg_roriw;
static bool trans_roriw(DisasContext *ctx, arg_roriw *a);
typedef arg_r arg_rorw;
static bool trans_rorw(DisasContext *ctx, arg_rorw *a);
typedef arg_r2 arg_zext_h_64;
static bool trans_zext_h_64(DisasContext *ctx, arg_zext_h_64 *a);
typedef arg_r arg_packw;
static bool trans_packw(DisasContext *ctx, arg_packw *a);
typedef arg_r2 arg_clzw;
static bool trans_clzw(DisasContext *ctx, arg_clzw *a);
typedef arg_r2 arg_ctzw;
static bool trans_ctzw(DisasContext *ctx, arg_ctzw *a);
typedef arg_r2 arg_cpopw;
static bool trans_cpopw(DisasContext *ctx, arg_cpopw *a);
typedef arg_r arg_clmul;
static bool trans_clmul(DisasContext *ctx, arg_clmul *a);
typedef arg_r arg_clmulh;
static bool trans_clmulh(DisasContext *ctx, arg_clmulh *a);
typedef arg_r arg_clmulr;
static bool trans_clmulr(DisasContext *ctx, arg_clmulr *a);
typedef arg_r arg_xperm4;
static bool trans_xperm4(DisasContext *ctx, arg_xperm4 *a);
typedef arg_r arg_xperm8;
static bool trans_xperm8(DisasContext *ctx, arg_xperm8 *a);
typedef arg_r arg_bclr;
static bool trans_bclr(DisasContext *ctx, arg_bclr *a);
typedef arg_shift arg_bclri;
static bool trans_bclri(DisasContext *ctx, arg_bclri *a);
typedef arg_r arg_bext;
static bool trans_bext(DisasContext *ctx, arg_bext *a);
typedef arg_shift arg_bexti;
static bool trans_bexti(DisasContext *ctx, arg_bexti *a);
typedef arg_r arg_binv;
static bool trans_binv(DisasContext *ctx, arg_binv *a);
typedef arg_shift arg_binvi;
static bool trans_binvi(DisasContext *ctx, arg_binvi *a);
typedef arg_r arg_bset;
static bool trans_bset(DisasContext *ctx, arg_bset *a);
typedef arg_shift arg_bseti;
static bool trans_bseti(DisasContext *ctx, arg_bseti *a);
typedef arg_r2 arg_fli_s;
static bool trans_fli_s(DisasContext *ctx, arg_fli_s *a);
typedef arg_r2 arg_fli_d;
static bool trans_fli_d(DisasContext *ctx, arg_fli_d *a);
typedef arg_r2 arg_fli_h;
static bool trans_fli_h(DisasContext *ctx, arg_fli_h *a);
typedef arg_r arg_fminm_s;
static bool trans_fminm_s(DisasContext *ctx, arg_fminm_s *a);
typedef arg_r arg_fmaxm_s;
static bool trans_fmaxm_s(DisasContext *ctx, arg_fmaxm_s *a);
typedef arg_r arg_fminm_d;
static bool trans_fminm_d(DisasContext *ctx, arg_fminm_d *a);
typedef arg_r arg_fmaxm_d;
static bool trans_fmaxm_d(DisasContext *ctx, arg_fmaxm_d *a);
typedef arg_r arg_fminm_h;
static bool trans_fminm_h(DisasContext *ctx, arg_fminm_h *a);
typedef arg_r arg_fmaxm_h;
static bool trans_fmaxm_h(DisasContext *ctx, arg_fmaxm_h *a);
typedef arg_decode_insn3237 arg_fround_s;
static bool trans_fround_s(DisasContext *ctx, arg_fround_s *a);
typedef arg_decode_insn3237 arg_froundnx_s;
static bool trans_froundnx_s(DisasContext *ctx, arg_froundnx_s *a);
typedef arg_decode_insn3237 arg_fround_d;
static bool trans_fround_d(DisasContext *ctx, arg_fround_d *a);
typedef arg_decode_insn3237 arg_froundnx_d;
static bool trans_froundnx_d(DisasContext *ctx, arg_froundnx_d *a);
typedef arg_decode_insn3237 arg_fround_h;
static bool trans_fround_h(DisasContext *ctx, arg_fround_h *a);
typedef arg_decode_insn3237 arg_froundnx_h;
static bool trans_froundnx_h(DisasContext *ctx, arg_froundnx_h *a);
typedef arg_r2 arg_fcvtmod_w_d;
static bool trans_fcvtmod_w_d(DisasContext *ctx, arg_fcvtmod_w_d *a);
typedef arg_r2 arg_fmvh_x_d;
static bool trans_fmvh_x_d(DisasContext *ctx, arg_fmvh_x_d *a);
typedef arg_r arg_fmvp_d_x;
static bool trans_fmvp_d_x(DisasContext *ctx, arg_fmvp_d_x *a);
typedef arg_r arg_fleq_s;
static bool trans_fleq_s(DisasContext *ctx, arg_fleq_s *a);
typedef arg_r arg_fltq_s;
static bool trans_fltq_s(DisasContext *ctx, arg_fltq_s *a);
typedef arg_r arg_fleq_d;
static bool trans_fleq_d(DisasContext *ctx, arg_fleq_d *a);
typedef arg_r arg_fltq_d;
static bool trans_fltq_d(DisasContext *ctx, arg_fltq_d *a);
typedef arg_r arg_fleq_h;
static bool trans_fleq_h(DisasContext *ctx, arg_fleq_h *a);
typedef arg_r arg_fltq_h;
static bool trans_fltq_h(DisasContext *ctx, arg_fltq_h *a);
typedef arg_i arg_flh;
static bool trans_flh(DisasContext *ctx, arg_flh *a);
typedef arg_s arg_fsh;
static bool trans_fsh(DisasContext *ctx, arg_fsh *a);
typedef arg_decode_insn3235 arg_fmadd_h;
static bool trans_fmadd_h(DisasContext *ctx, arg_fmadd_h *a);
typedef arg_decode_insn3235 arg_fmsub_h;
static bool trans_fmsub_h(DisasContext *ctx, arg_fmsub_h *a);
typedef arg_decode_insn3235 arg_fnmsub_h;
static bool trans_fnmsub_h(DisasContext *ctx, arg_fnmsub_h *a);
typedef arg_decode_insn3235 arg_fnmadd_h;
static bool trans_fnmadd_h(DisasContext *ctx, arg_fnmadd_h *a);
typedef arg_decode_insn3236 arg_fadd_h;
static bool trans_fadd_h(DisasContext *ctx, arg_fadd_h *a);
typedef arg_decode_insn3236 arg_fsub_h;
static bool trans_fsub_h(DisasContext *ctx, arg_fsub_h *a);
typedef arg_decode_insn3236 arg_fmul_h;
static bool trans_fmul_h(DisasContext *ctx, arg_fmul_h *a);
typedef arg_decode_insn3236 arg_fdiv_h;
static bool trans_fdiv_h(DisasContext *ctx, arg_fdiv_h *a);
typedef arg_decode_insn3237 arg_fsqrt_h;
static bool trans_fsqrt_h(DisasContext *ctx, arg_fsqrt_h *a);
typedef arg_r arg_fsgnj_h;
static bool trans_fsgnj_h(DisasContext *ctx, arg_fsgnj_h *a);
typedef arg_r arg_fsgnjn_h;
static bool trans_fsgnjn_h(DisasContext *ctx, arg_fsgnjn_h *a);
typedef arg_r arg_fsgnjx_h;
static bool trans_fsgnjx_h(DisasContext *ctx, arg_fsgnjx_h *a);
typedef arg_r arg_fmin_h;
static bool trans_fmin_h(DisasContext *ctx, arg_fmin_h *a);
typedef arg_r arg_fmax_h;
static bool trans_fmax_h(DisasContext *ctx, arg_fmax_h *a);
typedef arg_decode_insn3237 arg_fcvt_h_s;
static bool trans_fcvt_h_s(DisasContext *ctx, arg_fcvt_h_s *a);
typedef arg_decode_insn3237 arg_fcvt_s_h;
static bool trans_fcvt_s_h(DisasContext *ctx, arg_fcvt_s_h *a);
typedef arg_decode_insn3237 arg_fcvt_h_d;
static bool trans_fcvt_h_d(DisasContext *ctx, arg_fcvt_h_d *a);
typedef arg_decode_insn3237 arg_fcvt_d_h;
static bool trans_fcvt_d_h(DisasContext *ctx, arg_fcvt_d_h *a);
typedef arg_decode_insn3237 arg_fcvt_w_h;
static bool trans_fcvt_w_h(DisasContext *ctx, arg_fcvt_w_h *a);
typedef arg_decode_insn3237 arg_fcvt_wu_h;
static bool trans_fcvt_wu_h(DisasContext *ctx, arg_fcvt_wu_h *a);
typedef arg_r2 arg_fmv_x_h;
static bool trans_fmv_x_h(DisasContext *ctx, arg_fmv_x_h *a);
typedef arg_r arg_feq_h;
static bool trans_feq_h(DisasContext *ctx, arg_feq_h *a);
typedef arg_r arg_flt_h;
static bool trans_flt_h(DisasContext *ctx, arg_flt_h *a);
typedef arg_r arg_fle_h;
static bool trans_fle_h(DisasContext *ctx, arg_fle_h *a);
typedef arg_r2 arg_fclass_h;
static bool trans_fclass_h(DisasContext *ctx, arg_fclass_h *a);
typedef arg_decode_insn3237 arg_fcvt_h_w;
static bool trans_fcvt_h_w(DisasContext *ctx, arg_fcvt_h_w *a);
typedef arg_decode_insn3237 arg_fcvt_h_wu;
static bool trans_fcvt_h_wu(DisasContext *ctx, arg_fcvt_h_wu *a);
typedef arg_r2 arg_fmv_h_x;
static bool trans_fmv_h_x(DisasContext *ctx, arg_fmv_h_x *a);
typedef arg_decode_insn3237 arg_fcvt_l_h;
static bool trans_fcvt_l_h(DisasContext *ctx, arg_fcvt_l_h *a);
typedef arg_decode_insn3237 arg_fcvt_lu_h;
static bool trans_fcvt_lu_h(DisasContext *ctx, arg_fcvt_lu_h *a);
typedef arg_decode_insn3237 arg_fcvt_h_l;
static bool trans_fcvt_h_l(DisasContext *ctx, arg_fcvt_h_l *a);
typedef arg_decode_insn3237 arg_fcvt_h_lu;
static bool trans_fcvt_h_lu(DisasContext *ctx, arg_fcvt_h_lu *a);
typedef arg_r2_s arg_sinval_vma;
static bool trans_sinval_vma(DisasContext *ctx, arg_sinval_vma *a);
typedef arg_empty arg_sfence_w_inval;
static bool trans_sfence_w_inval(DisasContext *ctx, arg_sfence_w_inval *a);
typedef arg_empty arg_sfence_inval_ir;
static bool trans_sfence_inval_ir(DisasContext *ctx, arg_sfence_inval_ir *a);
typedef arg_r2_s arg_hinval_vvma;
static bool trans_hinval_vvma(DisasContext *ctx, arg_hinval_vvma *a);
typedef arg_r2_s arg_hinval_gvma;
static bool trans_hinval_gvma(DisasContext *ctx, arg_hinval_gvma *a);
typedef arg_k_aes arg_aes32dsmi;
static bool trans_aes32dsmi(DisasContext *ctx, arg_aes32dsmi *a);
typedef arg_k_aes arg_aes32dsi;
static bool trans_aes32dsi(DisasContext *ctx, arg_aes32dsi *a);
typedef arg_r arg_aes64dsm;
static bool trans_aes64dsm(DisasContext *ctx, arg_aes64dsm *a);
typedef arg_r arg_aes64ds;
static bool trans_aes64ds(DisasContext *ctx, arg_aes64ds *a);
typedef arg_r2 arg_aes64im;
static bool trans_aes64im(DisasContext *ctx, arg_aes64im *a);
typedef arg_k_aes arg_aes32esmi;
static bool trans_aes32esmi(DisasContext *ctx, arg_aes32esmi *a);
typedef arg_k_aes arg_aes32esi;
static bool trans_aes32esi(DisasContext *ctx, arg_aes32esi *a);
typedef arg_r arg_aes64es;
static bool trans_aes64es(DisasContext *ctx, arg_aes64es *a);
typedef arg_r arg_aes64esm;
static bool trans_aes64esm(DisasContext *ctx, arg_aes64esm *a);
typedef arg_r arg_aes64ks2;
static bool trans_aes64ks2(DisasContext *ctx, arg_aes64ks2 *a);
typedef arg_i arg_aes64ks1i;
static bool trans_aes64ks1i(DisasContext *ctx, arg_aes64ks1i *a);
typedef arg_r2 arg_sha256sig0;
static bool trans_sha256sig0(DisasContext *ctx, arg_sha256sig0 *a);
typedef arg_r2 arg_sha256sig1;
static bool trans_sha256sig1(DisasContext *ctx, arg_sha256sig1 *a);
typedef arg_r2 arg_sha256sum0;
static bool trans_sha256sum0(DisasContext *ctx, arg_sha256sum0 *a);
typedef arg_r2 arg_sha256sum1;
static bool trans_sha256sum1(DisasContext *ctx, arg_sha256sum1 *a);
typedef arg_r arg_sha512sum0r;
static bool trans_sha512sum0r(DisasContext *ctx, arg_sha512sum0r *a);
typedef arg_r arg_sha512sum1r;
static bool trans_sha512sum1r(DisasContext *ctx, arg_sha512sum1r *a);
typedef arg_r arg_sha512sig0l;
static bool trans_sha512sig0l(DisasContext *ctx, arg_sha512sig0l *a);
typedef arg_r arg_sha512sig0h;
static bool trans_sha512sig0h(DisasContext *ctx, arg_sha512sig0h *a);
typedef arg_r arg_sha512sig1l;
static bool trans_sha512sig1l(DisasContext *ctx, arg_sha512sig1l *a);
typedef arg_r arg_sha512sig1h;
static bool trans_sha512sig1h(DisasContext *ctx, arg_sha512sig1h *a);
typedef arg_r2 arg_sha512sig0;
static bool trans_sha512sig0(DisasContext *ctx, arg_sha512sig0 *a);
typedef arg_r2 arg_sha512sig1;
static bool trans_sha512sig1(DisasContext *ctx, arg_sha512sig1 *a);
typedef arg_r2 arg_sha512sum0;
static bool trans_sha512sum0(DisasContext *ctx, arg_sha512sum0 *a);
typedef arg_r2 arg_sha512sum1;
static bool trans_sha512sum1(DisasContext *ctx, arg_sha512sum1 *a);
typedef arg_r2 arg_sm3p0;
static bool trans_sm3p0(DisasContext *ctx, arg_sm3p0 *a);
typedef arg_r2 arg_sm3p1;
static bool trans_sm3p1(DisasContext *ctx, arg_sm3p1 *a);
typedef arg_k_aes arg_sm4ed;
static bool trans_sm4ed(DisasContext *ctx, arg_sm4ed *a);
typedef arg_k_aes arg_sm4ks;
static bool trans_sm4ks(DisasContext *ctx, arg_sm4ks *a);
typedef arg_r arg_czero_eqz;
static bool trans_czero_eqz(DisasContext *ctx, arg_czero_eqz *a);
typedef arg_r arg_czero_nez;
static bool trans_czero_nez(DisasContext *ctx, arg_czero_nez *a);
typedef arg_decode_insn3237 arg_fcvt_bf16_s;
static bool trans_fcvt_bf16_s(DisasContext *ctx, arg_fcvt_bf16_s *a);
typedef arg_decode_insn3237 arg_fcvt_s_bf16;
static bool trans_fcvt_s_bf16(DisasContext *ctx, arg_fcvt_s_bf16 *a);
typedef arg_rmr arg_vfncvtbf16_f_f_w;
static bool trans_vfncvtbf16_f_f_w(DisasContext *ctx, arg_vfncvtbf16_f_f_w *a);
typedef arg_rmr arg_vfwcvtbf16_f_f_v;
static bool trans_vfwcvtbf16_f_f_v(DisasContext *ctx, arg_vfwcvtbf16_f_f_v *a);
typedef arg_rmrr arg_vfwmaccbf16_vv;
static bool trans_vfwmaccbf16_vv(DisasContext *ctx, arg_vfwmaccbf16_vv *a);
typedef arg_rmrr arg_vfwmaccbf16_vf;
static bool trans_vfwmaccbf16_vf(DisasContext *ctx, arg_vfwmaccbf16_vf *a);
typedef arg_r arg_add16;
static bool trans_add16(DisasContext *ctx, arg_add16 *a);
typedef arg_r arg_radd16;
static bool trans_radd16(DisasContext *ctx, arg_radd16 *a);
typedef arg_r arg_uradd16;
static bool trans_uradd16(DisasContext *ctx, arg_uradd16 *a);
typedef arg_r arg_kadd16;
static bool trans_kadd16(DisasContext *ctx, arg_kadd16 *a);
typedef arg_r arg_ukadd16;
static bool trans_ukadd16(DisasContext *ctx, arg_ukadd16 *a);
typedef arg_r arg_sub16;
static bool trans_sub16(DisasContext *ctx, arg_sub16 *a);
typedef arg_r arg_rsub16;
static bool trans_rsub16(DisasContext *ctx, arg_rsub16 *a);
typedef arg_r arg_ursub16;
static bool trans_ursub16(DisasContext *ctx, arg_ursub16 *a);
typedef arg_r arg_ksub16;
static bool trans_ksub16(DisasContext *ctx, arg_ksub16 *a);
typedef arg_r arg_uksub16;
static bool trans_uksub16(DisasContext *ctx, arg_uksub16 *a);
typedef arg_r arg_cras16;
static bool trans_cras16(DisasContext *ctx, arg_cras16 *a);
typedef arg_r arg_rcras16;
static bool trans_rcras16(DisasContext *ctx, arg_rcras16 *a);
typedef arg_r arg_urcras16;
static bool trans_urcras16(DisasContext *ctx, arg_urcras16 *a);
typedef arg_r arg_kcras16;
static bool trans_kcras16(DisasContext *ctx, arg_kcras16 *a);
typedef arg_r arg_ukcras16;
static bool trans_ukcras16(DisasContext *ctx, arg_ukcras16 *a);
typedef arg_r arg_crsa16;
static bool trans_crsa16(DisasContext *ctx, arg_crsa16 *a);
typedef arg_r arg_rcrsa16;
static bool trans_rcrsa16(DisasContext *ctx, arg_rcrsa16 *a);
typedef arg_r arg_urcrsa16;
static bool trans_urcrsa16(DisasContext *ctx, arg_urcrsa16 *a);
typedef arg_r arg_kcrsa16;
static bool trans_kcrsa16(DisasContext *ctx, arg_kcrsa16 *a);
typedef arg_r arg_ukcrsa16;
static bool trans_ukcrsa16(DisasContext *ctx, arg_ukcrsa16 *a);
typedef arg_r arg_stas16;
static bool trans_stas16(DisasContext *ctx, arg_stas16 *a);
typedef arg_r arg_rstas16;
static bool trans_rstas16(DisasContext *ctx, arg_rstas16 *a);
typedef arg_r arg_urstas16;
static bool trans_urstas16(DisasContext *ctx, arg_urstas16 *a);
typedef arg_r arg_kstas16;
static bool trans_kstas16(DisasContext *ctx, arg_kstas16 *a);
typedef arg_r arg_ukstas16;
static bool trans_ukstas16(DisasContext *ctx, arg_ukstas16 *a);
typedef arg_r arg_stsa16;
static bool trans_stsa16(DisasContext *ctx, arg_stsa16 *a);
typedef arg_r arg_rstsa16;
static bool trans_rstsa16(DisasContext *ctx, arg_rstsa16 *a);
typedef arg_r arg_urstsa16;
static bool trans_urstsa16(DisasContext *ctx, arg_urstsa16 *a);
typedef arg_r arg_kstsa16;
static bool trans_kstsa16(DisasContext *ctx, arg_kstsa16 *a);
typedef arg_r arg_ukstsa16;
static bool trans_ukstsa16(DisasContext *ctx, arg_ukstsa16 *a);
typedef arg_r arg_add8;
static bool trans_add8(DisasContext *ctx, arg_add8 *a);
typedef arg_r arg_radd8;
static bool trans_radd8(DisasContext *ctx, arg_radd8 *a);
typedef arg_r arg_uradd8;
static bool trans_uradd8(DisasContext *ctx, arg_uradd8 *a);
typedef arg_r arg_kadd8;
static bool trans_kadd8(DisasContext *ctx, arg_kadd8 *a);
typedef arg_r arg_ukadd8;
static bool trans_ukadd8(DisasContext *ctx, arg_ukadd8 *a);
typedef arg_r arg_sub8;
static bool trans_sub8(DisasContext *ctx, arg_sub8 *a);
typedef arg_r arg_rsub8;
static bool trans_rsub8(DisasContext *ctx, arg_rsub8 *a);
typedef arg_r arg_ursub8;
static bool trans_ursub8(DisasContext *ctx, arg_ursub8 *a);
typedef arg_r arg_ksub8;
static bool trans_ksub8(DisasContext *ctx, arg_ksub8 *a);
typedef arg_r arg_uksub8;
static bool trans_uksub8(DisasContext *ctx, arg_uksub8 *a);
typedef arg_r arg_sra16;
static bool trans_sra16(DisasContext *ctx, arg_sra16 *a);
typedef arg_r arg_sra16_u;
static bool trans_sra16_u(DisasContext *ctx, arg_sra16_u *a);
typedef arg_shift arg_srai16;
static bool trans_srai16(DisasContext *ctx, arg_srai16 *a);
typedef arg_shift arg_srai16_u;
static bool trans_srai16_u(DisasContext *ctx, arg_srai16_u *a);
typedef arg_r arg_srl16;
static bool trans_srl16(DisasContext *ctx, arg_srl16 *a);
typedef arg_r arg_srl16_u;
static bool trans_srl16_u(DisasContext *ctx, arg_srl16_u *a);
typedef arg_shift arg_srli16;
static bool trans_srli16(DisasContext *ctx, arg_srli16 *a);
typedef arg_shift arg_srli16_u;
static bool trans_srli16_u(DisasContext *ctx, arg_srli16_u *a);
typedef arg_r arg_sll16;
static bool trans_sll16(DisasContext *ctx, arg_sll16 *a);
typedef arg_shift arg_slli16;
static bool trans_slli16(DisasContext *ctx, arg_slli16 *a);
typedef arg_r arg_ksll16;
static bool trans_ksll16(DisasContext *ctx, arg_ksll16 *a);
typedef arg_shift arg_kslli16;
static bool trans_kslli16(DisasContext *ctx, arg_kslli16 *a);
typedef arg_r arg_kslra16;
static bool trans_kslra16(DisasContext *ctx, arg_kslra16 *a);
typedef arg_r arg_kslra16_u;
static bool trans_kslra16_u(DisasContext *ctx, arg_kslra16_u *a);
typedef arg_r arg_sra8;
static bool trans_sra8(DisasContext *ctx, arg_sra8 *a);
typedef arg_r arg_sra8_u;
static bool trans_sra8_u(DisasContext *ctx, arg_sra8_u *a);
typedef arg_shift arg_srai8;
static bool trans_srai8(DisasContext *ctx, arg_srai8 *a);
typedef arg_shift arg_srai8_u;
static bool trans_srai8_u(DisasContext *ctx, arg_srai8_u *a);
typedef arg_r arg_srl8;
static bool trans_srl8(DisasContext *ctx, arg_srl8 *a);
typedef arg_r arg_srl8_u;
static bool trans_srl8_u(DisasContext *ctx, arg_srl8_u *a);
typedef arg_shift arg_srli8;
static bool trans_srli8(DisasContext *ctx, arg_srli8 *a);
typedef arg_shift arg_srli8_u;
static bool trans_srli8_u(DisasContext *ctx, arg_srli8_u *a);
typedef arg_r arg_sll8;
static bool trans_sll8(DisasContext *ctx, arg_sll8 *a);
typedef arg_shift arg_slli8;
static bool trans_slli8(DisasContext *ctx, arg_slli8 *a);
typedef arg_r arg_ksll8;
static bool trans_ksll8(DisasContext *ctx, arg_ksll8 *a);
typedef arg_shift arg_kslli8;
static bool trans_kslli8(DisasContext *ctx, arg_kslli8 *a);
typedef arg_r arg_kslra8;
static bool trans_kslra8(DisasContext *ctx, arg_kslra8 *a);
typedef arg_r arg_kslra8_u;
static bool trans_kslra8_u(DisasContext *ctx, arg_kslra8_u *a);
typedef arg_r arg_cmpeq16;
static bool trans_cmpeq16(DisasContext *ctx, arg_cmpeq16 *a);
typedef arg_r arg_scmplt16;
static bool trans_scmplt16(DisasContext *ctx, arg_scmplt16 *a);
typedef arg_r arg_scmple16;
static bool trans_scmple16(DisasContext *ctx, arg_scmple16 *a);
typedef arg_r arg_ucmplt16;
static bool trans_ucmplt16(DisasContext *ctx, arg_ucmplt16 *a);
typedef arg_r arg_ucmple16;
static bool trans_ucmple16(DisasContext *ctx, arg_ucmple16 *a);
typedef arg_r arg_cmpeq8;
static bool trans_cmpeq8(DisasContext *ctx, arg_cmpeq8 *a);
typedef arg_r arg_scmplt8;
static bool trans_scmplt8(DisasContext *ctx, arg_scmplt8 *a);
typedef arg_r arg_scmple8;
static bool trans_scmple8(DisasContext *ctx, arg_scmple8 *a);
typedef arg_r arg_ucmplt8;
static bool trans_ucmplt8(DisasContext *ctx, arg_ucmplt8 *a);
typedef arg_r arg_ucmple8;
static bool trans_ucmple8(DisasContext *ctx, arg_ucmple8 *a);
typedef arg_r arg_smul16;
static bool trans_smul16(DisasContext *ctx, arg_smul16 *a);
typedef arg_r arg_smulx16;
static bool trans_smulx16(DisasContext *ctx, arg_smulx16 *a);
typedef arg_r arg_umul16;
static bool trans_umul16(DisasContext *ctx, arg_umul16 *a);
typedef arg_r arg_umulx16;
static bool trans_umulx16(DisasContext *ctx, arg_umulx16 *a);
typedef arg_r arg_khm16;
static bool trans_khm16(DisasContext *ctx, arg_khm16 *a);
typedef arg_r arg_khmx16;
static bool trans_khmx16(DisasContext *ctx, arg_khmx16 *a);
typedef arg_r arg_smul8;
static bool trans_smul8(DisasContext *ctx, arg_smul8 *a);
typedef arg_r arg_smulx8;
static bool trans_smulx8(DisasContext *ctx, arg_smulx8 *a);
typedef arg_r arg_umul8;
static bool trans_umul8(DisasContext *ctx, arg_umul8 *a);
typedef arg_r arg_umulx8;
static bool trans_umulx8(DisasContext *ctx, arg_umulx8 *a);
typedef arg_r arg_khm8;
static bool trans_khm8(DisasContext *ctx, arg_khm8 *a);
typedef arg_r arg_khmx8;
static bool trans_khmx8(DisasContext *ctx, arg_khmx8 *a);
typedef arg_r arg_smin16;
static bool trans_smin16(DisasContext *ctx, arg_smin16 *a);
typedef arg_r arg_umin16;
static bool trans_umin16(DisasContext *ctx, arg_umin16 *a);
typedef arg_r arg_smax16;
static bool trans_smax16(DisasContext *ctx, arg_smax16 *a);
typedef arg_r arg_umax16;
static bool trans_umax16(DisasContext *ctx, arg_umax16 *a);
typedef arg_shift arg_sclip16;
static bool trans_sclip16(DisasContext *ctx, arg_sclip16 *a);
typedef arg_shift arg_uclip16;
static bool trans_uclip16(DisasContext *ctx, arg_uclip16 *a);
typedef arg_r2 arg_kabs16;
static bool trans_kabs16(DisasContext *ctx, arg_kabs16 *a);
typedef arg_r2 arg_clrs16;
static bool trans_clrs16(DisasContext *ctx, arg_clrs16 *a);
typedef arg_r2 arg_clz16;
static bool trans_clz16(DisasContext *ctx, arg_clz16 *a);
typedef arg_r2 arg_clo16;
static bool trans_clo16(DisasContext *ctx, arg_clo16 *a);
typedef arg_r arg_smin8;
static bool trans_smin8(DisasContext *ctx, arg_smin8 *a);
typedef arg_r arg_umin8;
static bool trans_umin8(DisasContext *ctx, arg_umin8 *a);
typedef arg_r arg_smax8;
static bool trans_smax8(DisasContext *ctx, arg_smax8 *a);
typedef arg_r arg_umax8;
static bool trans_umax8(DisasContext *ctx, arg_umax8 *a);
typedef arg_shift arg_sclip8;
static bool trans_sclip8(DisasContext *ctx, arg_sclip8 *a);
typedef arg_shift arg_uclip8;
static bool trans_uclip8(DisasContext *ctx, arg_uclip8 *a);
typedef arg_r2 arg_kabs8;
static bool trans_kabs8(DisasContext *ctx, arg_kabs8 *a);
typedef arg_r2 arg_clrs8;
static bool trans_clrs8(DisasContext *ctx, arg_clrs8 *a);
typedef arg_r2 arg_clz8;
static bool trans_clz8(DisasContext *ctx, arg_clz8 *a);
typedef arg_r2 arg_clo8;
static bool trans_clo8(DisasContext *ctx, arg_clo8 *a);
typedef arg_r2 arg_swap8;
static bool trans_swap8(DisasContext *ctx, arg_swap8 *a);
typedef arg_r2 arg_sunpkd810;
static bool trans_sunpkd810(DisasContext *ctx, arg_sunpkd810 *a);
typedef arg_r2 arg_sunpkd820;
static bool trans_sunpkd820(DisasContext *ctx, arg_sunpkd820 *a);
typedef arg_r2 arg_sunpkd830;
static bool trans_sunpkd830(DisasContext *ctx, arg_sunpkd830 *a);
typedef arg_r2 arg_sunpkd831;
static bool trans_sunpkd831(DisasContext *ctx, arg_sunpkd831 *a);
typedef arg_r2 arg_sunpkd832;
static bool trans_sunpkd832(DisasContext *ctx, arg_sunpkd832 *a);
typedef arg_r2 arg_zunpkd810;
static bool trans_zunpkd810(DisasContext *ctx, arg_zunpkd810 *a);
typedef arg_r2 arg_zunpkd820;
static bool trans_zunpkd820(DisasContext *ctx, arg_zunpkd820 *a);
typedef arg_r2 arg_zunpkd830;
static bool trans_zunpkd830(DisasContext *ctx, arg_zunpkd830 *a);
typedef arg_r2 arg_zunpkd831;
static bool trans_zunpkd831(DisasContext *ctx, arg_zunpkd831 *a);
typedef arg_r2 arg_zunpkd832;
static bool trans_zunpkd832(DisasContext *ctx, arg_zunpkd832 *a);
typedef arg_r arg_pkbb16;
static bool trans_pkbb16(DisasContext *ctx, arg_pkbb16 *a);
typedef arg_r arg_pkbt16;
static bool trans_pkbt16(DisasContext *ctx, arg_pkbt16 *a);
typedef arg_r arg_pktt16;
static bool trans_pktt16(DisasContext *ctx, arg_pktt16 *a);
typedef arg_r arg_pktb16;
static bool trans_pktb16(DisasContext *ctx, arg_pktb16 *a);
typedef arg_r arg_smmul;
static bool trans_smmul(DisasContext *ctx, arg_smmul *a);
typedef arg_r arg_smmul_u;
static bool trans_smmul_u(DisasContext *ctx, arg_smmul_u *a);
typedef arg_r arg_kmmac;
static bool trans_kmmac(DisasContext *ctx, arg_kmmac *a);
typedef arg_r arg_kmmac_u;
static bool trans_kmmac_u(DisasContext *ctx, arg_kmmac_u *a);
typedef arg_r arg_kmmsb;
static bool trans_kmmsb(DisasContext *ctx, arg_kmmsb *a);
typedef arg_r arg_kmmsb_u;
static bool trans_kmmsb_u(DisasContext *ctx, arg_kmmsb_u *a);
typedef arg_r arg_kwmmul;
static bool trans_kwmmul(DisasContext *ctx, arg_kwmmul *a);
typedef arg_r arg_kwmmul_u;
static bool trans_kwmmul_u(DisasContext *ctx, arg_kwmmul_u *a);
typedef arg_r arg_smmwb;
static bool trans_smmwb(DisasContext *ctx, arg_smmwb *a);
typedef arg_r arg_smmwb_u;
static bool trans_smmwb_u(DisasContext *ctx, arg_smmwb_u *a);
typedef arg_r arg_smmwt;
static bool trans_smmwt(DisasContext *ctx, arg_smmwt *a);
typedef arg_r arg_smmwt_u;
static bool trans_smmwt_u(DisasContext *ctx, arg_smmwt_u *a);
typedef arg_r arg_kmmawb;
static bool trans_kmmawb(DisasContext *ctx, arg_kmmawb *a);
typedef arg_r arg_kmmawb_u;
static bool trans_kmmawb_u(DisasContext *ctx, arg_kmmawb_u *a);
typedef arg_r arg_kmmawt;
static bool trans_kmmawt(DisasContext *ctx, arg_kmmawt *a);
typedef arg_r arg_kmmawt_u;
static bool trans_kmmawt_u(DisasContext *ctx, arg_kmmawt_u *a);
typedef arg_r arg_kmmwb2;
static bool trans_kmmwb2(DisasContext *ctx, arg_kmmwb2 *a);
typedef arg_r arg_kmmwb2_u;
static bool trans_kmmwb2_u(DisasContext *ctx, arg_kmmwb2_u *a);
typedef arg_r arg_kmmwt2;
static bool trans_kmmwt2(DisasContext *ctx, arg_kmmwt2 *a);
typedef arg_r arg_kmmwt2_u;
static bool trans_kmmwt2_u(DisasContext *ctx, arg_kmmwt2_u *a);
typedef arg_r arg_kmmawb2;
static bool trans_kmmawb2(DisasContext *ctx, arg_kmmawb2 *a);
typedef arg_r arg_kmmawb2_u;
static bool trans_kmmawb2_u(DisasContext *ctx, arg_kmmawb2_u *a);
typedef arg_r arg_kmmawt2;
static bool trans_kmmawt2(DisasContext *ctx, arg_kmmawt2 *a);
typedef arg_r arg_kmmawt2_u;
static bool trans_kmmawt2_u(DisasContext *ctx, arg_kmmawt2_u *a);
typedef arg_r arg_smbb16;
static bool trans_smbb16(DisasContext *ctx, arg_smbb16 *a);
typedef arg_r arg_smbt16;
static bool trans_smbt16(DisasContext *ctx, arg_smbt16 *a);
typedef arg_r arg_smtt16;
static bool trans_smtt16(DisasContext *ctx, arg_smtt16 *a);
typedef arg_r arg_kmda;
static bool trans_kmda(DisasContext *ctx, arg_kmda *a);
typedef arg_r arg_kmxda;
static bool trans_kmxda(DisasContext *ctx, arg_kmxda *a);
typedef arg_r arg_smds;
static bool trans_smds(DisasContext *ctx, arg_smds *a);
typedef arg_r arg_smdrs;
static bool trans_smdrs(DisasContext *ctx, arg_smdrs *a);
typedef arg_r arg_smxds;
static bool trans_smxds(DisasContext *ctx, arg_smxds *a);
typedef arg_r arg_kmabb;
static bool trans_kmabb(DisasContext *ctx, arg_kmabb *a);
typedef arg_r arg_kmabt;
static bool trans_kmabt(DisasContext *ctx, arg_kmabt *a);
typedef arg_r arg_kmatt;
static bool trans_kmatt(DisasContext *ctx, arg_kmatt *a);
typedef arg_r arg_kmada;
static bool trans_kmada(DisasContext *ctx, arg_kmada *a);
typedef arg_r arg_kmaxda;
static bool trans_kmaxda(DisasContext *ctx, arg_kmaxda *a);
typedef arg_r arg_kmads;
static bool trans_kmads(DisasContext *ctx, arg_kmads *a);
typedef arg_r arg_kmadrs;
static bool trans_kmadrs(DisasContext *ctx, arg_kmadrs *a);
typedef arg_r arg_kmaxds;
static bool trans_kmaxds(DisasContext *ctx, arg_kmaxds *a);
typedef arg_r arg_kmsda;
static bool trans_kmsda(DisasContext *ctx, arg_kmsda *a);
typedef arg_r arg_kmsxda;
static bool trans_kmsxda(DisasContext *ctx, arg_kmsxda *a);
typedef arg_r arg_smal;
static bool trans_smal(DisasContext *ctx, arg_smal *a);
typedef arg_shift arg_sclip32;
static bool trans_sclip32(DisasContext *ctx, arg_sclip32 *a);
typedef arg_shift arg_uclip32;
static bool trans_uclip32(DisasContext *ctx, arg_uclip32 *a);
typedef arg_r2 arg_clrs32;
static bool trans_clrs32(DisasContext *ctx, arg_clrs32 *a);
typedef arg_r2 arg_clz32;
static bool trans_clz32(DisasContext *ctx, arg_clz32 *a);
typedef arg_r2 arg_clo32;
static bool trans_clo32(DisasContext *ctx, arg_clo32 *a);
typedef arg_r arg_pbsad;
static bool trans_pbsad(DisasContext *ctx, arg_pbsad *a);
typedef arg_r arg_pbsada;
static bool trans_pbsada(DisasContext *ctx, arg_pbsada *a);
typedef arg_r arg_smaqa;
static bool trans_smaqa(DisasContext *ctx, arg_smaqa *a);
typedef arg_r arg_umaqa;
static bool trans_umaqa(DisasContext *ctx, arg_umaqa *a);
typedef arg_r arg_smaqa_su;
static bool trans_smaqa_su(DisasContext *ctx, arg_smaqa_su *a);
typedef arg_r arg_add64;
static bool trans_add64(DisasContext *ctx, arg_add64 *a);
typedef arg_r arg_radd64;
static bool trans_radd64(DisasContext *ctx, arg_radd64 *a);
typedef arg_r arg_uradd64;
static bool trans_uradd64(DisasContext *ctx, arg_uradd64 *a);
typedef arg_r arg_kadd64;
static bool trans_kadd64(DisasContext *ctx, arg_kadd64 *a);
typedef arg_r arg_ukadd64;
static bool trans_ukadd64(DisasContext *ctx, arg_ukadd64 *a);
typedef arg_r arg_sub64;
static bool trans_sub64(DisasContext *ctx, arg_sub64 *a);
typedef arg_r arg_rsub64;
static bool trans_rsub64(DisasContext *ctx, arg_rsub64 *a);
typedef arg_r arg_ursub64;
static bool trans_ursub64(DisasContext *ctx, arg_ursub64 *a);
typedef arg_r arg_ksub64;
static bool trans_ksub64(DisasContext *ctx, arg_ksub64 *a);
typedef arg_r arg_uksub64;
static bool trans_uksub64(DisasContext *ctx, arg_uksub64 *a);
typedef arg_r arg_smar64;
static bool trans_smar64(DisasContext *ctx, arg_smar64 *a);
typedef arg_r arg_smsr64;
static bool trans_smsr64(DisasContext *ctx, arg_smsr64 *a);
typedef arg_r arg_umar64;
static bool trans_umar64(DisasContext *ctx, arg_umar64 *a);
typedef arg_r arg_umsr64;
static bool trans_umsr64(DisasContext *ctx, arg_umsr64 *a);
typedef arg_r arg_kmar64;
static bool trans_kmar64(DisasContext *ctx, arg_kmar64 *a);
typedef arg_r arg_kmsr64;
static bool trans_kmsr64(DisasContext *ctx, arg_kmsr64 *a);
typedef arg_r arg_ukmar64;
static bool trans_ukmar64(DisasContext *ctx, arg_ukmar64 *a);
typedef arg_r arg_ukmsr64;
static bool trans_ukmsr64(DisasContext *ctx, arg_ukmsr64 *a);
typedef arg_r arg_smalbb;
static bool trans_smalbb(DisasContext *ctx, arg_smalbb *a);
typedef arg_r arg_smalbt;
static bool trans_smalbt(DisasContext *ctx, arg_smalbt *a);
typedef arg_r arg_smaltt;
static bool trans_smaltt(DisasContext *ctx, arg_smaltt *a);
typedef arg_r arg_smalda;
static bool trans_smalda(DisasContext *ctx, arg_smalda *a);
typedef arg_r arg_smalxda;
static bool trans_smalxda(DisasContext *ctx, arg_smalxda *a);
typedef arg_r arg_smalds;
static bool trans_smalds(DisasContext *ctx, arg_smalds *a);
typedef arg_r arg_smaldrs;
static bool trans_smaldrs(DisasContext *ctx, arg_smaldrs *a);
typedef arg_r arg_smalxds;
static bool trans_smalxds(DisasContext *ctx, arg_smalxds *a);
typedef arg_r arg_smslda;
static bool trans_smslda(DisasContext *ctx, arg_smslda *a);
typedef arg_r arg_smslxda;
static bool trans_smslxda(DisasContext *ctx, arg_smslxda *a);
typedef arg_r arg_kaddh;
static bool trans_kaddh(DisasContext *ctx, arg_kaddh *a);
typedef arg_r arg_ksubh;
static bool trans_ksubh(DisasContext *ctx, arg_ksubh *a);
typedef arg_r arg_khmbb;
static bool trans_khmbb(DisasContext *ctx, arg_khmbb *a);
typedef arg_r arg_khmbt;
static bool trans_khmbt(DisasContext *ctx, arg_khmbt *a);
typedef arg_r arg_khmtt;
static bool trans_khmtt(DisasContext *ctx, arg_khmtt *a);
typedef arg_r arg_ukaddh;
static bool trans_ukaddh(DisasContext *ctx, arg_ukaddh *a);
typedef arg_r arg_uksubh;
static bool trans_uksubh(DisasContext *ctx, arg_uksubh *a);
typedef arg_r arg_kaddw;
static bool trans_kaddw(DisasContext *ctx, arg_kaddw *a);
typedef arg_r arg_ukaddw;
static bool trans_ukaddw(DisasContext *ctx, arg_ukaddw *a);
typedef arg_r arg_ksubw;
static bool trans_ksubw(DisasContext *ctx, arg_ksubw *a);
typedef arg_r arg_uksubw;
static bool trans_uksubw(DisasContext *ctx, arg_uksubw *a);
typedef arg_r arg_kdmbb;
static bool trans_kdmbb(DisasContext *ctx, arg_kdmbb *a);
typedef arg_r arg_kdmbt;
static bool trans_kdmbt(DisasContext *ctx, arg_kdmbt *a);
typedef arg_r arg_kdmtt;
static bool trans_kdmtt(DisasContext *ctx, arg_kdmtt *a);
typedef arg_r arg_kslraw;
static bool trans_kslraw(DisasContext *ctx, arg_kslraw *a);
typedef arg_r arg_kslraw_u;
static bool trans_kslraw_u(DisasContext *ctx, arg_kslraw_u *a);
typedef arg_r arg_ksllw;
static bool trans_ksllw(DisasContext *ctx, arg_ksllw *a);
typedef arg_shift arg_kslliw;
static bool trans_kslliw(DisasContext *ctx, arg_kslliw *a);
typedef arg_r arg_kdmabb;
static bool trans_kdmabb(DisasContext *ctx, arg_kdmabb *a);
typedef arg_r arg_kdmabt;
static bool trans_kdmabt(DisasContext *ctx, arg_kdmabt *a);
typedef arg_r arg_kdmatt;
static bool trans_kdmatt(DisasContext *ctx, arg_kdmatt *a);
typedef arg_r2 arg_kabsw;
static bool trans_kabsw(DisasContext *ctx, arg_kabsw *a);
typedef arg_r arg_raddw;
static bool trans_raddw(DisasContext *ctx, arg_raddw *a);
typedef arg_r arg_uraddw;
static bool trans_uraddw(DisasContext *ctx, arg_uraddw *a);
typedef arg_r arg_rsubw;
static bool trans_rsubw(DisasContext *ctx, arg_rsubw *a);
typedef arg_r arg_ursubw;
static bool trans_ursubw(DisasContext *ctx, arg_ursubw *a);
typedef arg_r arg_maxw;
static bool trans_maxw(DisasContext *ctx, arg_maxw *a);
typedef arg_r arg_minw;
static bool trans_minw(DisasContext *ctx, arg_minw *a);
typedef arg_r arg_mulr64;
static bool trans_mulr64(DisasContext *ctx, arg_mulr64 *a);
typedef arg_r arg_mulsr64;
static bool trans_mulsr64(DisasContext *ctx, arg_mulsr64 *a);
typedef arg_r arg_ave;
static bool trans_ave(DisasContext *ctx, arg_ave *a);
typedef arg_r arg_sra_u;
static bool trans_sra_u(DisasContext *ctx, arg_sra_u *a);
typedef arg_shift arg_srai_u;
static bool trans_srai_u(DisasContext *ctx, arg_srai_u *a);
typedef arg_r arg_bitrev;
static bool trans_bitrev(DisasContext *ctx, arg_bitrev *a);
typedef arg_shift arg_bitrevi;
static bool trans_bitrevi(DisasContext *ctx, arg_bitrevi *a);
typedef arg_r arg_wext;
static bool trans_wext(DisasContext *ctx, arg_wext *a);
typedef arg_shift arg_wexti;
static bool trans_wexti(DisasContext *ctx, arg_wexti *a);
typedef arg_r4 arg_bpick;
static bool trans_bpick(DisasContext *ctx, arg_bpick *a);
typedef arg_shift arg_insb;
static bool trans_insb(DisasContext *ctx, arg_insb *a);
typedef arg_r arg_maddr32;
static bool trans_maddr32(DisasContext *ctx, arg_maddr32 *a);
typedef arg_r arg_msubr32;
static bool trans_msubr32(DisasContext *ctx, arg_msubr32 *a);
typedef arg_r arg_add32;
static bool trans_add32(DisasContext *ctx, arg_add32 *a);
typedef arg_r arg_radd32;
static bool trans_radd32(DisasContext *ctx, arg_radd32 *a);
typedef arg_r arg_uradd32;
static bool trans_uradd32(DisasContext *ctx, arg_uradd32 *a);
typedef arg_r arg_kadd32;
static bool trans_kadd32(DisasContext *ctx, arg_kadd32 *a);
typedef arg_r arg_ukadd32;
static bool trans_ukadd32(DisasContext *ctx, arg_ukadd32 *a);
typedef arg_r arg_sub32;
static bool trans_sub32(DisasContext *ctx, arg_sub32 *a);
typedef arg_r arg_rsub32;
static bool trans_rsub32(DisasContext *ctx, arg_rsub32 *a);
typedef arg_r arg_ursub32;
static bool trans_ursub32(DisasContext *ctx, arg_ursub32 *a);
typedef arg_r arg_ksub32;
static bool trans_ksub32(DisasContext *ctx, arg_ksub32 *a);
typedef arg_r arg_uksub32;
static bool trans_uksub32(DisasContext *ctx, arg_uksub32 *a);
typedef arg_r arg_cras32;
static bool trans_cras32(DisasContext *ctx, arg_cras32 *a);
typedef arg_r arg_rcras32;
static bool trans_rcras32(DisasContext *ctx, arg_rcras32 *a);
typedef arg_r arg_urcras32;
static bool trans_urcras32(DisasContext *ctx, arg_urcras32 *a);
typedef arg_r arg_kcras32;
static bool trans_kcras32(DisasContext *ctx, arg_kcras32 *a);
typedef arg_r arg_ukcras32;
static bool trans_ukcras32(DisasContext *ctx, arg_ukcras32 *a);
typedef arg_r arg_crsa32;
static bool trans_crsa32(DisasContext *ctx, arg_crsa32 *a);
typedef arg_r arg_rcrsa32;
static bool trans_rcrsa32(DisasContext *ctx, arg_rcrsa32 *a);
typedef arg_r arg_urcrsa32;
static bool trans_urcrsa32(DisasContext *ctx, arg_urcrsa32 *a);
typedef arg_r arg_kcrsa32;
static bool trans_kcrsa32(DisasContext *ctx, arg_kcrsa32 *a);
typedef arg_r arg_ukcrsa32;
static bool trans_ukcrsa32(DisasContext *ctx, arg_ukcrsa32 *a);
typedef arg_r arg_stas32;
static bool trans_stas32(DisasContext *ctx, arg_stas32 *a);
typedef arg_r arg_rstas32;
static bool trans_rstas32(DisasContext *ctx, arg_rstas32 *a);
typedef arg_r arg_urstas32;
static bool trans_urstas32(DisasContext *ctx, arg_urstas32 *a);
typedef arg_r arg_kstas32;
static bool trans_kstas32(DisasContext *ctx, arg_kstas32 *a);
typedef arg_r arg_ukstas32;
static bool trans_ukstas32(DisasContext *ctx, arg_ukstas32 *a);
typedef arg_r arg_stsa32;
static bool trans_stsa32(DisasContext *ctx, arg_stsa32 *a);
typedef arg_r arg_rstsa32;
static bool trans_rstsa32(DisasContext *ctx, arg_rstsa32 *a);
typedef arg_r arg_urstsa32;
static bool trans_urstsa32(DisasContext *ctx, arg_urstsa32 *a);
typedef arg_r arg_kstsa32;
static bool trans_kstsa32(DisasContext *ctx, arg_kstsa32 *a);
typedef arg_r arg_ukstsa32;
static bool trans_ukstsa32(DisasContext *ctx, arg_ukstsa32 *a);
typedef arg_r arg_sra32;
static bool trans_sra32(DisasContext *ctx, arg_sra32 *a);
typedef arg_r arg_sra32_u;
static bool trans_sra32_u(DisasContext *ctx, arg_sra32_u *a);
typedef arg_shift arg_srai32;
static bool trans_srai32(DisasContext *ctx, arg_srai32 *a);
typedef arg_shift arg_srai32_u;
static bool trans_srai32_u(DisasContext *ctx, arg_srai32_u *a);
typedef arg_r arg_srl32;
static bool trans_srl32(DisasContext *ctx, arg_srl32 *a);
typedef arg_r arg_srl32_u;
static bool trans_srl32_u(DisasContext *ctx, arg_srl32_u *a);
typedef arg_shift arg_srli32;
static bool trans_srli32(DisasContext *ctx, arg_srli32 *a);
typedef arg_shift arg_srli32_u;
static bool trans_srli32_u(DisasContext *ctx, arg_srli32_u *a);
typedef arg_r arg_sll32;
static bool trans_sll32(DisasContext *ctx, arg_sll32 *a);
typedef arg_shift arg_slli32;
static bool trans_slli32(DisasContext *ctx, arg_slli32 *a);
typedef arg_r arg_ksll32;
static bool trans_ksll32(DisasContext *ctx, arg_ksll32 *a);
typedef arg_shift arg_kslli32;
static bool trans_kslli32(DisasContext *ctx, arg_kslli32 *a);
typedef arg_r arg_kslra32;
static bool trans_kslra32(DisasContext *ctx, arg_kslra32 *a);
typedef arg_r arg_kslra32_u;
static bool trans_kslra32_u(DisasContext *ctx, arg_kslra32_u *a);
typedef arg_r arg_smin32;
static bool trans_smin32(DisasContext *ctx, arg_smin32 *a);
typedef arg_r arg_umin32;
static bool trans_umin32(DisasContext *ctx, arg_umin32 *a);
typedef arg_r arg_smax32;
static bool trans_smax32(DisasContext *ctx, arg_smax32 *a);
typedef arg_r arg_umax32;
static bool trans_umax32(DisasContext *ctx, arg_umax32 *a);
typedef arg_r2 arg_kabs32;
static bool trans_kabs32(DisasContext *ctx, arg_kabs32 *a);
typedef arg_r arg_khmbb16;
static bool trans_khmbb16(DisasContext *ctx, arg_khmbb16 *a);
typedef arg_r arg_khmbt16;
static bool trans_khmbt16(DisasContext *ctx, arg_khmbt16 *a);
typedef arg_r arg_khmtt16;
static bool trans_khmtt16(DisasContext *ctx, arg_khmtt16 *a);
typedef arg_r arg_kdmbb16;
static bool trans_kdmbb16(DisasContext *ctx, arg_kdmbb16 *a);
typedef arg_r arg_kdmbt16;
static bool trans_kdmbt16(DisasContext *ctx, arg_kdmbt16 *a);
typedef arg_r arg_kdmtt16;
static bool trans_kdmtt16(DisasContext *ctx, arg_kdmtt16 *a);
typedef arg_r arg_kdmabb16;
static bool trans_kdmabb16(DisasContext *ctx, arg_kdmabb16 *a);
typedef arg_r arg_kdmabt16;
static bool trans_kdmabt16(DisasContext *ctx, arg_kdmabt16 *a);
typedef arg_r arg_kdmatt16;
static bool trans_kdmatt16(DisasContext *ctx, arg_kdmatt16 *a);
typedef arg_r arg_smbt32;
static bool trans_smbt32(DisasContext *ctx, arg_smbt32 *a);
typedef arg_r arg_smtt32;
static bool trans_smtt32(DisasContext *ctx, arg_smtt32 *a);
typedef arg_r arg_kmabb32;
static bool trans_kmabb32(DisasContext *ctx, arg_kmabb32 *a);
typedef arg_r arg_kmabt32;
static bool trans_kmabt32(DisasContext *ctx, arg_kmabt32 *a);
typedef arg_r arg_kmatt32;
static bool trans_kmatt32(DisasContext *ctx, arg_kmatt32 *a);
typedef arg_r arg_kmda32;
static bool trans_kmda32(DisasContext *ctx, arg_kmda32 *a);
typedef arg_r arg_kmxda32;
static bool trans_kmxda32(DisasContext *ctx, arg_kmxda32 *a);
typedef arg_r arg_kmaxda32;
static bool trans_kmaxda32(DisasContext *ctx, arg_kmaxda32 *a);
typedef arg_r arg_kmads32;
static bool trans_kmads32(DisasContext *ctx, arg_kmads32 *a);
typedef arg_r arg_kmadrs32;
static bool trans_kmadrs32(DisasContext *ctx, arg_kmadrs32 *a);
typedef arg_r arg_kmaxds32;
static bool trans_kmaxds32(DisasContext *ctx, arg_kmaxds32 *a);
typedef arg_r arg_kmsda32;
static bool trans_kmsda32(DisasContext *ctx, arg_kmsda32 *a);
typedef arg_r arg_kmsxda32;
static bool trans_kmsxda32(DisasContext *ctx, arg_kmsxda32 *a);
typedef arg_r arg_smds32;
static bool trans_smds32(DisasContext *ctx, arg_smds32 *a);
typedef arg_r arg_smdrs32;
static bool trans_smdrs32(DisasContext *ctx, arg_smdrs32 *a);
typedef arg_r arg_smxds32;
static bool trans_smxds32(DisasContext *ctx, arg_smxds32 *a);
typedef arg_shift arg_sraiw_u;
static bool trans_sraiw_u(DisasContext *ctx, arg_sraiw_u *a);
typedef arg_r arg_pkbb32;
static bool trans_pkbb32(DisasContext *ctx, arg_pkbb32 *a);
typedef arg_r arg_pkbt32;
static bool trans_pkbt32(DisasContext *ctx, arg_pkbt32 *a);
typedef arg_r arg_pktt32;
static bool trans_pktt32(DisasContext *ctx, arg_pktt32 *a);
typedef arg_r arg_pktb32;
static bool trans_pktb32(DisasContext *ctx, arg_pktb32 *a);
typedef arg_mm_i arg_madd_s_mv_i;
static bool trans_madd_s_mv_i(DisasContext *ctx, arg_madd_s_mv_i *a);
typedef arg_mm_i arg_msub_s_mv_i;
static bool trans_msub_s_mv_i(DisasContext *ctx, arg_msub_s_mv_i *a);
typedef arg_mm_i arg_msra_s_mv_i;
static bool trans_msra_s_mv_i(DisasContext *ctx, arg_msra_s_mv_i *a);
typedef arg_mm_i arg_mn4clip_s_mv_i;
static bool trans_mn4clip_s_mv_i(DisasContext *ctx, arg_mn4clip_s_mv_i *a);
typedef arg_mm_i arg_mn4clipu_s_mv_i;
static bool trans_mn4clipu_s_mv_i(DisasContext *ctx, arg_mn4clipu_s_mv_i *a);
typedef arg_mm_i arg_mmul_s_mv_i;
static bool trans_mmul_s_mv_i(DisasContext *ctx, arg_mmul_s_mv_i *a);
typedef arg_mm_i arg_madd_d_mv_i;
static bool trans_madd_d_mv_i(DisasContext *ctx, arg_madd_d_mv_i *a);
typedef arg_mm_i arg_msub_d_mv_i;
static bool trans_msub_d_mv_i(DisasContext *ctx, arg_msub_d_mv_i *a);
typedef arg_mm_i arg_msra_d_mv_i;
static bool trans_msra_d_mv_i(DisasContext *ctx, arg_msra_d_mv_i *a);
typedef arg_mm_i arg_mn4clip_d_mv_i;
static bool trans_mn4clip_d_mv_i(DisasContext *ctx, arg_mn4clip_d_mv_i *a);
typedef arg_mm_i arg_mn4clipu_d_mv_i;
static bool trans_mn4clipu_d_mv_i(DisasContext *ctx, arg_mn4clipu_d_mv_i *a);
typedef arg_mm_i arg_mmul_d_mv_i;
static bool trans_mmul_d_mv_i(DisasContext *ctx, arg_mmul_d_mv_i *a);
typedef arg_mm_r arg_madd_s_mv_x;
static bool trans_madd_s_mv_x(DisasContext *ctx, arg_madd_s_mv_x *a);
typedef arg_mm_rx arg_madd_s_mx;
static bool trans_madd_s_mx(DisasContext *ctx, arg_madd_s_mx *a);
typedef arg_mm_r arg_msub_s_mv_x;
static bool trans_msub_s_mv_x(DisasContext *ctx, arg_msub_s_mv_x *a);
typedef arg_mm_rx arg_msub_s_mx;
static bool trans_msub_s_mx(DisasContext *ctx, arg_msub_s_mx *a);
typedef arg_mm_r arg_msra_s_mv_x;
static bool trans_msra_s_mv_x(DisasContext *ctx, arg_msra_s_mv_x *a);
typedef arg_mm_rx arg_msra_s_mx;
static bool trans_msra_s_mx(DisasContext *ctx, arg_msra_s_mx *a);
typedef arg_mm_r arg_mn4clip_s_mv_x;
static bool trans_mn4clip_s_mv_x(DisasContext *ctx, arg_mn4clip_s_mv_x *a);
typedef arg_mm_rx arg_mn4clip_s_mx;
static bool trans_mn4clip_s_mx(DisasContext *ctx, arg_mn4clip_s_mx *a);
typedef arg_mm_r arg_mn4clipu_s_mv_x;
static bool trans_mn4clipu_s_mv_x(DisasContext *ctx, arg_mn4clipu_s_mv_x *a);
typedef arg_mm_rx arg_mn4clipu_s_mx;
static bool trans_mn4clipu_s_mx(DisasContext *ctx, arg_mn4clipu_s_mx *a);
typedef arg_mm_r arg_mmul_s_mv_x;
static bool trans_mmul_s_mv_x(DisasContext *ctx, arg_mmul_s_mv_x *a);
typedef arg_mm_rx arg_mmul_s_mx;
static bool trans_mmul_s_mx(DisasContext *ctx, arg_mmul_s_mx *a);
typedef arg_mm_r arg_madd_d_mv_x;
static bool trans_madd_d_mv_x(DisasContext *ctx, arg_madd_d_mv_x *a);
typedef arg_mm_rx arg_madd_d_mx;
static bool trans_madd_d_mx(DisasContext *ctx, arg_madd_d_mx *a);
typedef arg_mm_r arg_msub_d_mv_x;
static bool trans_msub_d_mv_x(DisasContext *ctx, arg_msub_d_mv_x *a);
typedef arg_mm_rx arg_msub_d_mx;
static bool trans_msub_d_mx(DisasContext *ctx, arg_msub_d_mx *a);
typedef arg_mm_r arg_msra_d_mv_x;
static bool trans_msra_d_mv_x(DisasContext *ctx, arg_msra_d_mv_x *a);
typedef arg_mm_rx arg_msra_d_mx;
static bool trans_msra_d_mx(DisasContext *ctx, arg_msra_d_mx *a);
typedef arg_mm_r arg_mn4clip_d_mv_x;
static bool trans_mn4clip_d_mv_x(DisasContext *ctx, arg_mn4clip_d_mv_x *a);
typedef arg_mm_rx arg_mn4clip_d_mx;
static bool trans_mn4clip_d_mx(DisasContext *ctx, arg_mn4clip_d_mx *a);
typedef arg_mm_r arg_mn4clipu_d_mv_x;
static bool trans_mn4clipu_d_mv_x(DisasContext *ctx, arg_mn4clipu_d_mv_x *a);
typedef arg_mm_rx arg_mn4clipu_d_mx;
static bool trans_mn4clipu_d_mx(DisasContext *ctx, arg_mn4clipu_d_mx *a);
typedef arg_mm_r arg_mmul_d_mv_x;
static bool trans_mmul_d_mv_x(DisasContext *ctx, arg_mmul_d_mv_x *a);
typedef arg_mm_rx arg_mmul_d_mx;
static bool trans_mmul_d_mx(DisasContext *ctx, arg_mmul_d_mx *a);
typedef arg_mm_rmm arg_mmaqasu_b;
static bool trans_mmaqasu_b(DisasContext *ctx, arg_mmaqasu_b *a);
typedef arg_mm_rmm arg_mmaqasu_h;
static bool trans_mmaqasu_h(DisasContext *ctx, arg_mmaqasu_h *a);
typedef arg_mm_rmm arg_pmmaqasu_b;
static bool trans_pmmaqasu_b(DisasContext *ctx, arg_pmmaqasu_b *a);
typedef arg_mm_rmm arg_mmaqaus_b;
static bool trans_mmaqaus_b(DisasContext *ctx, arg_mmaqaus_b *a);
typedef arg_mm_rmm arg_mmaqaus_h;
static bool trans_mmaqaus_h(DisasContext *ctx, arg_mmaqaus_h *a);
typedef arg_mm_rmm arg_pmmaqaus_b;
static bool trans_pmmaqaus_b(DisasContext *ctx, arg_pmmaqaus_b *a);
typedef arg_mm_mv arg_mmov_mm;
static bool trans_mmov_mm(DisasContext *ctx, arg_mmov_mm *a);
typedef arg_mm_mv_x arg_mmov_mv_x;
static bool trans_mmov_mv_x(DisasContext *ctx, arg_mmov_mv_x *a);
typedef arg_mm_mv_i arg_mmov_mv_i;
static bool trans_mmov_mv_i(DisasContext *ctx, arg_mmov_mv_i *a);
typedef arg_mm_rmm arg_mmaqau_b;
static bool trans_mmaqau_b(DisasContext *ctx, arg_mmaqau_b *a);
typedef arg_mm_rmm arg_mmaqau_h;
static bool trans_mmaqau_h(DisasContext *ctx, arg_mmaqau_h *a);
typedef arg_mm_rmm arg_pmmaqau_b;
static bool trans_pmmaqau_b(DisasContext *ctx, arg_pmmaqau_b *a);
typedef arg_mm_rmm arg_fmmacc_h;
static bool trans_fmmacc_h(DisasContext *ctx, arg_fmmacc_h *a);
typedef arg_mm_rmm arg_fmmacc_s;
static bool trans_fmmacc_s(DisasContext *ctx, arg_fmmacc_s *a);
typedef arg_mm_rmm arg_fmmacc_d;
static bool trans_fmmacc_d(DisasContext *ctx, arg_fmmacc_d *a);
typedef arg_mm_rmm arg_fwmmacc_h;
static bool trans_fwmmacc_h(DisasContext *ctx, arg_fwmmacc_h *a);
typedef arg_mm_rmm arg_fwmmacc_s;
static bool trans_fwmmacc_s(DisasContext *ctx, arg_fwmmacc_s *a);
typedef arg_mm_rmm arg_mmaqa_b;
static bool trans_mmaqa_b(DisasContext *ctx, arg_mmaqa_b *a);
typedef arg_mm_rmm arg_mmaqa_h;
static bool trans_mmaqa_h(DisasContext *ctx, arg_mmaqa_h *a);
typedef arg_mm_rmm arg_pmmaqa_b;
static bool trans_pmmaqa_b(DisasContext *ctx, arg_pmmaqa_b *a);
typedef arg_mm_rmm arg_madd_s_mm;
static bool trans_madd_s_mm(DisasContext *ctx, arg_madd_s_mm *a);
typedef arg_mm_rmm arg_msub_s_mm;
static bool trans_msub_s_mm(DisasContext *ctx, arg_msub_s_mm *a);
typedef arg_mm_rmm arg_msra_s_mm;
static bool trans_msra_s_mm(DisasContext *ctx, arg_msra_s_mm *a);
typedef arg_mm_rmm arg_mn4clip_s_mm;
static bool trans_mn4clip_s_mm(DisasContext *ctx, arg_mn4clip_s_mm *a);
typedef arg_mm_rmm arg_mn4clipu_s_mm;
static bool trans_mn4clipu_s_mm(DisasContext *ctx, arg_mn4clipu_s_mm *a);
typedef arg_mm_rmm arg_mmul_s_mm;
static bool trans_mmul_s_mm(DisasContext *ctx, arg_mmul_s_mm *a);
typedef arg_mm_rmm arg_madd_d_mm;
static bool trans_madd_d_mm(DisasContext *ctx, arg_madd_d_mm *a);
typedef arg_mm_rmm arg_msub_d_mm;
static bool trans_msub_d_mm(DisasContext *ctx, arg_msub_d_mm *a);
typedef arg_mm_rmm arg_msra_d_mm;
static bool trans_msra_d_mm(DisasContext *ctx, arg_msra_d_mm *a);
typedef arg_mm_rmm arg_mn4clip_d_mm;
static bool trans_mn4clip_d_mm(DisasContext *ctx, arg_mn4clip_d_mm *a);
typedef arg_mm_rmm arg_mn4clipu_d_mm;
static bool trans_mn4clipu_d_mm(DisasContext *ctx, arg_mn4clipu_d_mm *a);
typedef arg_mm_rmm arg_mmul_d_mm;
static bool trans_mmul_d_mm(DisasContext *ctx, arg_mmul_d_mm *a);
typedef arg_mm_ld arg_mld_b;
static bool trans_mld_b(DisasContext *ctx, arg_mld_b *a);
typedef arg_mm_ld arg_mld_h;
static bool trans_mld_h(DisasContext *ctx, arg_mld_h *a);
typedef arg_mm_ld arg_mld_w;
static bool trans_mld_w(DisasContext *ctx, arg_mld_w *a);
typedef arg_mm_ld arg_mld_d;
static bool trans_mld_d(DisasContext *ctx, arg_mld_d *a);
typedef arg_mm_ld arg_msld_b;
static bool trans_msld_b(DisasContext *ctx, arg_msld_b *a);
typedef arg_mm_ld arg_msld_h;
static bool trans_msld_h(DisasContext *ctx, arg_msld_h *a);
typedef arg_mm_ld arg_msld_w;
static bool trans_msld_w(DisasContext *ctx, arg_msld_w *a);
typedef arg_mm_ld arg_msld_d;
static bool trans_msld_d(DisasContext *ctx, arg_msld_d *a);
typedef arg_mm_ldm arg_mld1m_b;
static bool trans_mld1m_b(DisasContext *ctx, arg_mld1m_b *a);
typedef arg_mm_ldm arg_mld2m_b;
static bool trans_mld2m_b(DisasContext *ctx, arg_mld2m_b *a);
typedef arg_mm_ldm arg_mld4m_b;
static bool trans_mld4m_b(DisasContext *ctx, arg_mld4m_b *a);
typedef arg_mm_ldm arg_mld8m_b;
static bool trans_mld8m_b(DisasContext *ctx, arg_mld8m_b *a);
typedef arg_mm_ldm arg_mld1m_h;
static bool trans_mld1m_h(DisasContext *ctx, arg_mld1m_h *a);
typedef arg_mm_ldm arg_mld2m_h;
static bool trans_mld2m_h(DisasContext *ctx, arg_mld2m_h *a);
typedef arg_mm_ldm arg_mld4m_h;
static bool trans_mld4m_h(DisasContext *ctx, arg_mld4m_h *a);
typedef arg_mm_ldm arg_mld8m_h;
static bool trans_mld8m_h(DisasContext *ctx, arg_mld8m_h *a);
typedef arg_mm_ldm arg_mld1m_w;
static bool trans_mld1m_w(DisasContext *ctx, arg_mld1m_w *a);
typedef arg_mm_ldm arg_mld2m_w;
static bool trans_mld2m_w(DisasContext *ctx, arg_mld2m_w *a);
typedef arg_mm_ldm arg_mld4m_w;
static bool trans_mld4m_w(DisasContext *ctx, arg_mld4m_w *a);
typedef arg_mm_ldm arg_mld8m_w;
static bool trans_mld8m_w(DisasContext *ctx, arg_mld8m_w *a);
typedef arg_mm_ldm arg_mld1m_d;
static bool trans_mld1m_d(DisasContext *ctx, arg_mld1m_d *a);
typedef arg_mm_ldm arg_mld2m_d;
static bool trans_mld2m_d(DisasContext *ctx, arg_mld2m_d *a);
typedef arg_mm_ldm arg_mld4m_d;
static bool trans_mld4m_d(DisasContext *ctx, arg_mld4m_d *a);
typedef arg_mm_ldm arg_mld8m_d;
static bool trans_mld8m_d(DisasContext *ctx, arg_mld8m_d *a);
typedef arg_mm_st arg_mst_b;
static bool trans_mst_b(DisasContext *ctx, arg_mst_b *a);
typedef arg_mm_st arg_mst_h;
static bool trans_mst_h(DisasContext *ctx, arg_mst_h *a);
typedef arg_mm_st arg_mst_w;
static bool trans_mst_w(DisasContext *ctx, arg_mst_w *a);
typedef arg_mm_st arg_mst_d;
static bool trans_mst_d(DisasContext *ctx, arg_mst_d *a);
typedef arg_mm_st arg_msst_b;
static bool trans_msst_b(DisasContext *ctx, arg_msst_b *a);
typedef arg_mm_st arg_msst_h;
static bool trans_msst_h(DisasContext *ctx, arg_msst_h *a);
typedef arg_mm_st arg_msst_w;
static bool trans_msst_w(DisasContext *ctx, arg_msst_w *a);
typedef arg_mm_st arg_msst_d;
static bool trans_msst_d(DisasContext *ctx, arg_msst_d *a);
typedef arg_mm_stm arg_mst1m_b;
static bool trans_mst1m_b(DisasContext *ctx, arg_mst1m_b *a);
typedef arg_mm_stm arg_mst2m_b;
static bool trans_mst2m_b(DisasContext *ctx, arg_mst2m_b *a);
typedef arg_mm_stm arg_mst4m_b;
static bool trans_mst4m_b(DisasContext *ctx, arg_mst4m_b *a);
typedef arg_mm_stm arg_mst8m_b;
static bool trans_mst8m_b(DisasContext *ctx, arg_mst8m_b *a);
typedef arg_mm_stm arg_mst1m_h;
static bool trans_mst1m_h(DisasContext *ctx, arg_mst1m_h *a);
typedef arg_mm_stm arg_mst2m_h;
static bool trans_mst2m_h(DisasContext *ctx, arg_mst2m_h *a);
typedef arg_mm_stm arg_mst4m_h;
static bool trans_mst4m_h(DisasContext *ctx, arg_mst4m_h *a);
typedef arg_mm_stm arg_mst8m_h;
static bool trans_mst8m_h(DisasContext *ctx, arg_mst8m_h *a);
typedef arg_mm_stm arg_mst1m_w;
static bool trans_mst1m_w(DisasContext *ctx, arg_mst1m_w *a);
typedef arg_mm_stm arg_mst2m_w;
static bool trans_mst2m_w(DisasContext *ctx, arg_mst2m_w *a);
typedef arg_mm_stm arg_mst4m_w;
static bool trans_mst4m_w(DisasContext *ctx, arg_mst4m_w *a);
typedef arg_mm_stm arg_mst8m_w;
static bool trans_mst8m_w(DisasContext *ctx, arg_mst8m_w *a);
typedef arg_mm_stm arg_mst1m_d;
static bool trans_mst1m_d(DisasContext *ctx, arg_mst1m_d *a);
typedef arg_mm_stm arg_mst2m_d;
static bool trans_mst2m_d(DisasContext *ctx, arg_mst2m_d *a);
typedef arg_mm_stm arg_mst4m_d;
static bool trans_mst4m_d(DisasContext *ctx, arg_mst4m_d *a);
typedef arg_mm_stm arg_mst8m_d;
static bool trans_mst8m_d(DisasContext *ctx, arg_mst8m_d *a);
typedef arg_mm_cfg arg_mcfgk;
static bool trans_mcfgk(DisasContext *ctx, arg_mcfgk *a);
typedef arg_mm_cfg arg_mcfgm;
static bool trans_mcfgm(DisasContext *ctx, arg_mcfgm *a);
typedef arg_mm_cfg arg_mcfgn;
static bool trans_mcfgn(DisasContext *ctx, arg_mcfgn *a);
typedef arg_mm_cfg arg_mcfg;
static bool trans_mcfg(DisasContext *ctx, arg_mcfg *a);
typedef arg_empty arg_mrelease;
static bool trans_mrelease(DisasContext *ctx, arg_mrelease *a);
typedef arg_mm_cfg_i arg_mcfgki;
static bool trans_mcfgki(DisasContext *ctx, arg_mcfgki *a);
typedef arg_mm_cfg_i arg_mcfgmi;
static bool trans_mcfgmi(DisasContext *ctx, arg_mcfgmi *a);
typedef arg_mm_cfg_i arg_mcfgni;
static bool trans_mcfgni(DisasContext *ctx, arg_mcfgni *a);
typedef arg_mm_rmm arg_mmulh_s_mm;
static bool trans_mmulh_s_mm(DisasContext *ctx, arg_mmulh_s_mm *a);
typedef arg_mm_r arg_mmulh_s_mv_x;
static bool trans_mmulh_s_mv_x(DisasContext *ctx, arg_mmulh_s_mv_x *a);
typedef arg_mm_i arg_mmulh_s_mv_i;
static bool trans_mmulh_s_mv_i(DisasContext *ctx, arg_mmulh_s_mv_i *a);
typedef arg_mm_rx arg_mmulh_s_mx;
static bool trans_mmulh_s_mx(DisasContext *ctx, arg_mmulh_s_mx *a);
typedef arg_mm_rm arg_mzero;
static bool trans_mzero(DisasContext *ctx, arg_mzero *a);
typedef arg_mm_dup arg_mdup_m_x;
static bool trans_mdup_m_x(DisasContext *ctx, arg_mdup_m_x *a);
typedef arg_mm_mov arg_mmov_m_x;
static bool trans_mmov_m_x(DisasContext *ctx, arg_mmov_m_x *a);
typedef arg_mm_mxm arg_mmov_x_m;
static bool trans_mmov_x_m(DisasContext *ctx, arg_mmov_x_m *a);
typedef arg_rmrr arg_vmaqa_vv;
static bool trans_vmaqa_vv(DisasContext *ctx, arg_vmaqa_vv *a);
typedef arg_rmrr arg_vmaqau_vv;
static bool trans_vmaqau_vv(DisasContext *ctx, arg_vmaqau_vv *a);
typedef arg_rmrr arg_vmaqasu_vv;
static bool trans_vmaqasu_vv(DisasContext *ctx, arg_vmaqasu_vv *a);
typedef arg_rmrr arg_vmaqa_vx;
static bool trans_vmaqa_vx(DisasContext *ctx, arg_vmaqa_vx *a);
typedef arg_rmrr arg_vmaqau_vx;
static bool trans_vmaqau_vx(DisasContext *ctx, arg_vmaqau_vx *a);
typedef arg_rmrr arg_vmaqasu_vx;
static bool trans_vmaqasu_vx(DisasContext *ctx, arg_vmaqasu_vx *a);
typedef arg_rmrr arg_vmaqaus_vx;
static bool trans_vmaqaus_vx(DisasContext *ctx, arg_vmaqaus_vx *a);
typedef arg_rmrr arg_vpmaqa_vv;
static bool trans_vpmaqa_vv(DisasContext *ctx, arg_vpmaqa_vv *a);
typedef arg_rmrr arg_vpmaqau_vv;
static bool trans_vpmaqau_vv(DisasContext *ctx, arg_vpmaqau_vv *a);
typedef arg_rmrr arg_vpmaqasu_vv;
static bool trans_vpmaqasu_vv(DisasContext *ctx, arg_vpmaqasu_vv *a);
typedef arg_rmrr arg_vpmaqa_vx;
static bool trans_vpmaqa_vx(DisasContext *ctx, arg_vpmaqa_vx *a);
typedef arg_rmrr arg_vpmaqau_vx;
static bool trans_vpmaqau_vx(DisasContext *ctx, arg_vpmaqau_vx *a);
typedef arg_rmrr arg_vpmaqasu_vx;
static bool trans_vpmaqasu_vx(DisasContext *ctx, arg_vpmaqasu_vx *a);
typedef arg_rmrr arg_vpmaqaus_vx;
static bool trans_vpmaqaus_vx(DisasContext *ctx, arg_vpmaqaus_vx *a);
typedef arg_rmrr arg_vpnclip_wv;
static bool trans_vpnclip_wv(DisasContext *ctx, arg_vpnclip_wv *a);
typedef arg_rmrr arg_vpnclipu_wv;
static bool trans_vpnclipu_wv(DisasContext *ctx, arg_vpnclipu_wv *a);
typedef arg_rmrr arg_vpnclip_wx;
static bool trans_vpnclip_wx(DisasContext *ctx, arg_vpnclip_wx *a);
typedef arg_rmrr arg_vpnclipu_wx;
static bool trans_vpnclipu_wx(DisasContext *ctx, arg_vpnclipu_wx *a);
typedef arg_rmrr arg_vpwadd_vv;
static bool trans_vpwadd_vv(DisasContext *ctx, arg_vpwadd_vv *a);
typedef arg_rmrr arg_vpwaddu_vv;
static bool trans_vpwaddu_vv(DisasContext *ctx, arg_vpwaddu_vv *a);
typedef arg_rmrr arg_vpwadd_vx;
static bool trans_vpwadd_vx(DisasContext *ctx, arg_vpwadd_vx *a);
typedef arg_rmrr arg_vpwaddu_vx;
static bool trans_vpwaddu_vx(DisasContext *ctx, arg_vpwaddu_vx *a);

static void decode_insn32_extract_atom_ld(DisasContext *ctx, arg_atomic *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->aq = extract32(insn, 26, 1);
    a->rs2 = 0;
    a->rl = extract32(insn, 25, 1);
}

static void decode_insn32_extract_atom_st(DisasContext *ctx, arg_atomic *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->aq = extract32(insn, 26, 1);
    a->rs2 = extract32(insn, 20, 5);
    a->rl = extract32(insn, 25, 1);
}

static void decode_insn32_extract_b(DisasContext *ctx, arg_b *a, uint32_t insn)
{
    a->imm = ex_shift_1(ctx, deposit32(deposit32(deposit32(extract32(insn, 8, 4), 4, 28, extract32(insn, 25, 6)), 10, 22, extract32(insn, 7, 1)), 11, 21, sextract32(insn, 31, 1)));
    a->rs2 = extract32(insn, 20, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_csr(DisasContext *ctx, arg_decode_insn3234 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->csr = extract32(insn, 20, 12);
}

static void decode_insn32_extract_decode_insn32_Fmt_53(DisasContext *ctx, arg_empty *a, uint32_t insn)
{
}

static void decode_insn32_extract_decode_insn32_Fmt_54(DisasContext *ctx, arg_decode_insn3242 *a, uint32_t insn)
{
    a->succ = extract32(insn, 20, 4);
    a->pred = extract32(insn, 24, 4);
}

static void decode_insn32_extract_hfence_gvma(DisasContext *ctx, arg_r2_s *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_hfence_vvma(DisasContext *ctx, arg_r2_s *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_i(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = sextract32(insn, 20, 12);
    a->rd = extract32(insn, 7, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_i_aes(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 20, 4);
    a->rd = extract32(insn, 7, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_j(DisasContext *ctx, arg_j *a, uint32_t insn)
{
    a->imm = ex_shift_1(ctx, deposit32(deposit32(deposit32(extract32(insn, 21, 10), 10, 22, extract32(insn, 20, 1)), 11, 21, extract32(insn, 12, 8)), 19, 13, sextract32(insn, 31, 1)));
    a->rd = extract32(insn, 7, 5);
}

static void decode_insn32_extract_k_aes(DisasContext *ctx, arg_k_aes *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->rd = extract32(insn, 7, 5);
    a->shamt = ex_shift_3(ctx, extract32(insn, 30, 2));
}

static void decode_insn32_extract_mm_cfg(DisasContext *ctx, arg_mm_cfg *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
}

static void decode_insn32_extract_mm_cfg_i(DisasContext *ctx, arg_mm_cfg_i *a, uint32_t insn)
{
    a->uimm7 = extract32(insn, 18, 7);
    a->rd = extract32(insn, 7, 5);
}

static void decode_insn32_extract_mm_dup(DisasContext *ctx, arg_mm_dup *a, uint32_t insn)
{
    a->rs2 = extract32(insn, 20, 5);
    a->mo = extract32(insn, 10, 2);
    a->md = extract32(insn, 7, 3);
}

static void decode_insn32_extract_mm_i(DisasContext *ctx, arg_mm_i *a, uint32_t insn)
{
    a->ms2 = extract32(insn, 21, 3);
    a->uimm3 = extract32(insn, 7, 3);
    a->ms1 = extract32(insn, 18, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_ld(DisasContext *ctx, arg_mm_ld *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->md = extract32(insn, 7, 3);
}

static void decode_insn32_extract_mm_ldm(DisasContext *ctx, arg_mm_ldm *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->md = extract32(insn, 7, 3);
}

static void decode_insn32_extract_mm_mov(DisasContext *ctx, arg_mm_mov *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->mo = extract32(insn, 10, 2);
    a->md = extract32(insn, 7, 3);
}

static void decode_insn32_extract_mm_mv(DisasContext *ctx, arg_mm_mv *a, uint32_t insn)
{
    a->ms1 = extract32(insn, 18, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_mv_i(DisasContext *ctx, arg_mm_mv_i *a, uint32_t insn)
{
    a->uimm3 = extract32(insn, 7, 3);
    a->ms1 = extract32(insn, 18, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_mv_x(DisasContext *ctx, arg_mm_mv_x *a, uint32_t insn)
{
    a->rs1 = ex_plus_8(ctx, extract32(insn, 7, 3));
    a->ms1 = extract32(insn, 18, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_mxm(DisasContext *ctx, arg_mm_mxm *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->ms2 = extract32(insn, 21, 3);
    a->rd = extract32(insn, 7, 5);
    a->mo = deposit32(extract32(insn, 20, 1), 1, 31, extract32(insn, 24, 1));
}

static void decode_insn32_extract_mm_r(DisasContext *ctx, arg_mm_r *a, uint32_t insn)
{
    a->rs1 = ex_plus_8(ctx, extract32(insn, 7, 3));
    a->ms2 = extract32(insn, 21, 3);
    a->ms1 = extract32(insn, 18, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_rm(DisasContext *ctx, arg_mm_rm *a, uint32_t insn)
{
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_rmm(DisasContext *ctx, arg_mm_rmm *a, uint32_t insn)
{
    a->ms2 = extract32(insn, 21, 3);
    a->ms1 = extract32(insn, 18, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_rx(DisasContext *ctx, arg_mm_rx *a, uint32_t insn)
{
    a->rs1 = ex_plus_8(ctx, extract32(insn, 7, 3));
    a->ms2 = extract32(insn, 21, 3);
    a->md = extract32(insn, 15, 3);
}

static void decode_insn32_extract_mm_st(DisasContext *ctx, arg_mm_st *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->ms3 = extract32(insn, 7, 3);
}

static void decode_insn32_extract_mm_stm(DisasContext *ctx, arg_mm_stm *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->ms3 = extract32(insn, 7, 3);
}

static void decode_insn32_extract_r(DisasContext *ctx, arg_r *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r1_vm(DisasContext *ctx, arg_decode_insn3238 *a, uint32_t insn)
{
    a->vm = extract32(insn, 25, 1);
    a->rd = extract32(insn, 7, 5);
}

static void decode_insn32_extract_r2(DisasContext *ctx, arg_r2 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
}

static void decode_insn32_extract_r2_nfvm(DisasContext *ctx, arg_r2nfvm *a, uint32_t insn)
{
    a->nf = ex_plus_1(ctx, extract32(insn, 29, 3));
    a->vm = extract32(insn, 25, 1);
    a->rd = extract32(insn, 7, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_r2_rm(DisasContext *ctx, arg_decode_insn3237 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->rm = extract32(insn, 12, 3);
}

static void decode_insn32_extract_r2_s(DisasContext *ctx, arg_r2_s *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r2_vm(DisasContext *ctx, arg_rmr *a, uint32_t insn)
{
    a->vm = extract32(insn, 25, 1);
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r2_zimm10(DisasContext *ctx, arg_decode_insn3240 *a, uint32_t insn)
{
    a->zimm = extract32(insn, 20, 10);
    a->rd = extract32(insn, 7, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_r2_zimm11(DisasContext *ctx, arg_decode_insn3240 *a, uint32_t insn)
{
    a->zimm = extract32(insn, 20, 11);
    a->rd = extract32(insn, 7, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_r2rd(DisasContext *ctx, arg_decode_insn3239 *a, uint32_t insn)
{
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r4(DisasContext *ctx, arg_r4 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->rd = extract32(insn, 7, 5);
    a->rs3 = extract32(insn, 27, 5);
}

static void decode_insn32_extract_r4_rm(DisasContext *ctx, arg_decode_insn3235 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->rs3 = extract32(insn, 27, 5);
    a->rm = extract32(insn, 12, 3);
}

static void decode_insn32_extract_r_nfvm(DisasContext *ctx, arg_rnfvm *a, uint32_t insn)
{
    a->nf = ex_plus_1(ctx, extract32(insn, 29, 3));
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
    a->vm = extract32(insn, 25, 1);
}

static void decode_insn32_extract_r_rm(DisasContext *ctx, arg_decode_insn3236 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->rm = extract32(insn, 12, 3);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r_vm(DisasContext *ctx, arg_rmrr *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->vm = extract32(insn, 25, 1);
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r_vm_0(DisasContext *ctx, arg_rmrr *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->vm = 0;
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_r_vm_1(DisasContext *ctx, arg_rmrr *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->vm = 1;
    a->rd = extract32(insn, 7, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_s(DisasContext *ctx, arg_s *a, uint32_t insn)
{
    a->imm = deposit32(extract32(insn, 7, 5), 5, 27, sextract32(insn, 25, 7));
    a->rs2 = extract32(insn, 20, 5);
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_sfence_vm(DisasContext *ctx, arg_decode_insn3241 *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
}

static void decode_insn32_extract_sfence_vma(DisasContext *ctx, arg_r2_s *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rs2 = extract32(insn, 20, 5);
}

static void decode_insn32_extract_sh(DisasContext *ctx, arg_shift *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->shamt = extract32(insn, 20, 7);
}

static void decode_insn32_extract_sh3(DisasContext *ctx, arg_shift *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->shamt = extract32(insn, 20, 3);
}

static void decode_insn32_extract_sh4(DisasContext *ctx, arg_shift *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->shamt = extract32(insn, 20, 4);
}

static void decode_insn32_extract_sh5(DisasContext *ctx, arg_shift *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->shamt = extract32(insn, 20, 5);
}

static void decode_insn32_extract_sh6(DisasContext *ctx, arg_shift *a, uint32_t insn)
{
    a->rs1 = extract32(insn, 15, 5);
    a->rd = extract32(insn, 7, 5);
    a->shamt = extract32(insn, 20, 6);
}

static void decode_insn32_extract_u(DisasContext *ctx, arg_u *a, uint32_t insn)
{
    a->imm = ex_shift_12(ctx, sextract32(insn, 12, 20));
    a->rd = extract32(insn, 7, 5);
}

static bool decode_insn32(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_atomic f_atomic;
        arg_b f_b;
        arg_decode_insn3234 f_decode_insn3234;
        arg_decode_insn3235 f_decode_insn3235;
        arg_decode_insn3236 f_decode_insn3236;
        arg_decode_insn3237 f_decode_insn3237;
        arg_decode_insn3238 f_decode_insn3238;
        arg_decode_insn3239 f_decode_insn3239;
        arg_decode_insn3240 f_decode_insn3240;
        arg_decode_insn3241 f_decode_insn3241;
        arg_decode_insn3242 f_decode_insn3242;
        arg_empty f_empty;
        arg_i f_i;
        arg_j f_j;
        arg_k_aes f_k_aes;
        arg_mm_cfg f_mm_cfg;
        arg_mm_cfg_i f_mm_cfg_i;
        arg_mm_dup f_mm_dup;
        arg_mm_i f_mm_i;
        arg_mm_ld f_mm_ld;
        arg_mm_ldm f_mm_ldm;
        arg_mm_mov f_mm_mov;
        arg_mm_mv f_mm_mv;
        arg_mm_mv_i f_mm_mv_i;
        arg_mm_mv_x f_mm_mv_x;
        arg_mm_mxm f_mm_mxm;
        arg_mm_r f_mm_r;
        arg_mm_rm f_mm_rm;
        arg_mm_rmm f_mm_rmm;
        arg_mm_rx f_mm_rx;
        arg_mm_st f_mm_st;
        arg_mm_stm f_mm_stm;
        arg_r f_r;
        arg_r2 f_r2;
        arg_r2_s f_r2_s;
        arg_r2nfvm f_r2nfvm;
        arg_r4 f_r4;
        arg_rmr f_rmr;
        arg_rmrr f_rmrr;
        arg_rnfvm f_rnfvm;
        arg_s f_s;
        arg_shift f_shift;
        arg_u f_u;
    } u;

    switch (insn & 0x0000007f) {
    case 0x00000003:
        /* ........ ........ ........ .0000011 */
        decode_insn32_extract_i(ctx, &u.f_i, insn);
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0000011 */
            /* ../target/riscv/insn32.decode:179 */
            if (trans_lb(ctx, &u.f_i)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .0000011 */
            /* ../target/riscv/insn32.decode:180 */
            if (trans_lh(ctx, &u.f_i)) return true;
            break;
        case 0x2:
            /* ........ ........ .010.... .0000011 */
            /* ../target/riscv/insn32.decode:181 */
            if (trans_lw(ctx, &u.f_i)) return true;
            break;
        case 0x3:
            /* ........ ........ .011.... .0000011 */
            /* ../target/riscv/insn32.decode:223 */
            if (trans_ld(ctx, &u.f_i)) return true;
            break;
        case 0x4:
            /* ........ ........ .100.... .0000011 */
            /* ../target/riscv/insn32.decode:182 */
            if (trans_lbu(ctx, &u.f_i)) return true;
            break;
        case 0x5:
            /* ........ ........ .101.... .0000011 */
            /* ../target/riscv/insn32.decode:183 */
            if (trans_lhu(ctx, &u.f_i)) return true;
            break;
        case 0x6:
            /* ........ ........ .110.... .0000011 */
            /* ../target/riscv/insn32.decode:222 */
            if (trans_lwu(ctx, &u.f_i)) return true;
            break;
        case 0x7:
            /* ........ ........ .111.... .0000011 */
            /* ../target/riscv/insn32.decode:236 */
            if (trans_ldu(ctx, &u.f_i)) return true;
            break;
        }
        break;
    case 0x00000007:
        /* ........ ........ ........ .0000111 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0000111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .000.... .0000111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .000.... .0000111 */
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .000.... .0000111 */
                        /* ../target/riscv/insn32.decode:403 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle8_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    case 0x8:
                        /* ...000.0 1000.... .000.... .0000111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1000.... .000.... .0000111 */
                            /* ../target/riscv/insn32.decode:445 */
                            if (trans_vl1re8_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x22000000:
                            /* 00100010 1000.... .000.... .0000111 */
                            /* ../target/riscv/insn32.decode:449 */
                            if (trans_vl2re8_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x62000000:
                            /* 01100010 1000.... .000.... .0000111 */
                            /* ../target/riscv/insn32.decode:453 */
                            if (trans_vl4re8_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0xe2000000u:
                            /* 11100010 1000.... .000.... .0000111 */
                            /* ../target/riscv/insn32.decode:457 */
                            if (trans_vl8re8_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    case 0xb:
                        /* ...000.0 1011.... .000.... .0000111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1011.... .000.... .0000111 */
                            /* ../target/riscv/insn32.decode:413 */
                            if (trans_vlm_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    case 0x10:
                        /* ...000.1 0000.... .000.... .0000111 */
                        /* ../target/riscv/insn32.decode:439 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle8ff_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .000.... .0000111 */
                    /* ../target/riscv/insn32.decode:417 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vlse8_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .000.... .0000111 */
                /* ../target/riscv/insn32.decode:427 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vlxei8_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        case 0x1:
            /* ........ ........ .001.... .0000111 */
            /* ../target/riscv/insn32.decode:905 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_flh(ctx, &u.f_i)) return true;
            break;
        case 0x2:
            /* ........ ........ .010.... .0000111 */
            /* ../target/riscv/insn32.decode:313 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_flw(ctx, &u.f_i)) return true;
            break;
        case 0x3:
            /* ........ ........ .011.... .0000111 */
            /* ../target/riscv/insn32.decode:347 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_fld(ctx, &u.f_i)) return true;
            break;
        case 0x5:
            /* ........ ........ .101.... .0000111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .101.... .0000111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .101.... .0000111 */
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .101.... .0000111 */
                        /* ../target/riscv/insn32.decode:404 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle16_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    case 0x8:
                        /* ...000.0 1000.... .101.... .0000111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1000.... .101.... .0000111 */
                            /* ../target/riscv/insn32.decode:446 */
                            if (trans_vl1re16_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x22000000:
                            /* 00100010 1000.... .101.... .0000111 */
                            /* ../target/riscv/insn32.decode:450 */
                            if (trans_vl2re16_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x62000000:
                            /* 01100010 1000.... .101.... .0000111 */
                            /* ../target/riscv/insn32.decode:454 */
                            if (trans_vl4re16_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0xe2000000u:
                            /* 11100010 1000.... .101.... .0000111 */
                            /* ../target/riscv/insn32.decode:458 */
                            if (trans_vl8re16_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    case 0x10:
                        /* ...000.1 0000.... .101.... .0000111 */
                        /* ../target/riscv/insn32.decode:440 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle16ff_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .101.... .0000111 */
                    /* ../target/riscv/insn32.decode:418 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vlse16_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .101.... .0000111 */
                /* ../target/riscv/insn32.decode:428 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vlxei16_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        case 0x6:
            /* ........ ........ .110.... .0000111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .110.... .0000111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .110.... .0000111 */
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .110.... .0000111 */
                        /* ../target/riscv/insn32.decode:405 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle32_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    case 0x8:
                        /* ...000.0 1000.... .110.... .0000111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1000.... .110.... .0000111 */
                            /* ../target/riscv/insn32.decode:447 */
                            if (trans_vl1re32_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x22000000:
                            /* 00100010 1000.... .110.... .0000111 */
                            /* ../target/riscv/insn32.decode:451 */
                            if (trans_vl2re32_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x62000000:
                            /* 01100010 1000.... .110.... .0000111 */
                            /* ../target/riscv/insn32.decode:455 */
                            if (trans_vl4re32_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0xe2000000u:
                            /* 11100010 1000.... .110.... .0000111 */
                            /* ../target/riscv/insn32.decode:459 */
                            if (trans_vl8re32_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    case 0x10:
                        /* ...000.1 0000.... .110.... .0000111 */
                        /* ../target/riscv/insn32.decode:441 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle32ff_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .110.... .0000111 */
                    /* ../target/riscv/insn32.decode:419 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vlse32_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .110.... .0000111 */
                /* ../target/riscv/insn32.decode:429 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vlxei32_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        case 0x7:
            /* ........ ........ .111.... .0000111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .111.... .0000111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .111.... .0000111 */
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .111.... .0000111 */
                        /* ../target/riscv/insn32.decode:406 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle64_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    case 0x8:
                        /* ...000.0 1000.... .111.... .0000111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1000.... .111.... .0000111 */
                            /* ../target/riscv/insn32.decode:448 */
                            if (trans_vl1re64_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x22000000:
                            /* 00100010 1000.... .111.... .0000111 */
                            /* ../target/riscv/insn32.decode:452 */
                            if (trans_vl2re64_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x62000000:
                            /* 01100010 1000.... .111.... .0000111 */
                            /* ../target/riscv/insn32.decode:456 */
                            if (trans_vl4re64_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0xe2000000u:
                            /* 11100010 1000.... .111.... .0000111 */
                            /* ../target/riscv/insn32.decode:460 */
                            if (trans_vl8re64_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    case 0x10:
                        /* ...000.1 0000.... .111.... .0000111 */
                        /* ../target/riscv/insn32.decode:442 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vle64ff_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .111.... .0000111 */
                    /* ../target/riscv/insn32.decode:420 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vlse64_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .111.... .0000111 */
                /* ../target/riscv/insn32.decode:430 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vlxei64_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        }
        break;
    case 0x0000000b:
        /* ........ ........ ........ .0001011 */
        decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
        switch (insn & 0xfc007000u) {
        case 0x80006000u:
            /* 100000.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1501 */
            if (trans_vmaqa_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0x80007000u:
            /* 100000.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1508 */
            if (trans_vpmaqa_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0x84006000u:
            /* 100001.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1504 */
            if (trans_vmaqa_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x84007000u:
            /* 100001.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1511 */
            if (trans_vpmaqa_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x88006000u:
            /* 100010.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1502 */
            if (trans_vmaqau_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0x88007000u:
            /* 100010.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1509 */
            if (trans_vpmaqau_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0x8c006000u:
            /* 100011.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1505 */
            if (trans_vmaqau_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x8c007000u:
            /* 100011.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1512 */
            if (trans_vpmaqau_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x90006000u:
            /* 100100.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1503 */
            if (trans_vmaqasu_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0x90007000u:
            /* 100100.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1510 */
            if (trans_vpmaqasu_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0x94006000u:
            /* 100101.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1506 */
            if (trans_vmaqasu_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x94007000u:
            /* 100101.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1513 */
            if (trans_vpmaqasu_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x9c006000u:
            /* 100111.. ........ .110.... .0001011 */
            /* ../target/riscv/insn32.decode:1507 */
            if (trans_vmaqaus_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0x9c007000u:
            /* 100111.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1514 */
            if (trans_vpmaqaus_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0xa0007000u:
            /* 101000.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1515 */
            if (trans_vpnclip_wv(ctx, &u.f_rmrr)) return true;
            break;
        case 0xa4007000u:
            /* 101001.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1517 */
            if (trans_vpnclip_wx(ctx, &u.f_rmrr)) return true;
            break;
        case 0xa8007000u:
            /* 101010.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1516 */
            if (trans_vpnclipu_wv(ctx, &u.f_rmrr)) return true;
            break;
        case 0xac007000u:
            /* 101011.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1518 */
            if (trans_vpnclipu_wx(ctx, &u.f_rmrr)) return true;
            break;
        case 0xb0007000u:
            /* 101100.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1519 */
            if (trans_vpwadd_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0xb4007000u:
            /* 101101.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1521 */
            if (trans_vpwadd_vx(ctx, &u.f_rmrr)) return true;
            break;
        case 0xb8007000u:
            /* 101110.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1520 */
            if (trans_vpwaddu_vv(ctx, &u.f_rmrr)) return true;
            break;
        case 0xbc007000u:
            /* 101111.. ........ .111.... .0001011 */
            /* ../target/riscv/insn32.decode:1522 */
            if (trans_vpwaddu_vx(ctx, &u.f_rmrr)) return true;
            break;
        }
        break;
    case 0x0000000f:
        /* ........ ........ ........ .0001111 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0001111 */
            if ((insn & 0xffff8f80u) == 0x01000000) {
                /* 00000001 00000000 00000000 00001111 */
                /* ../target/riscv/insn32.decode:209 */
                decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
                if (trans_pause(ctx, &u.f_empty)) return true;
            }
            /* ../target/riscv/insn32.decode:210 */
            decode_insn32_extract_decode_insn32_Fmt_54(ctx, &u.f_decode_insn3242, insn);
            if (trans_fence(ctx, &u.f_decode_insn3242)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .0001111 */
            /* ../target/riscv/insn32.decode:213 */
            decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
            if (trans_fence_i(ctx, &u.f_empty)) return true;
            break;
        case 0x2:
            /* ........ ........ .010.... .0001111 */
            if ((insn & 0xff800f80u) == 0x00000000) {
                /* 00000000 0....... .0100000 00001111 */
                decode_insn32_extract_sfence_vm(ctx, &u.f_decode_insn3241, insn);
                switch ((insn >> 20) & 0x7) {
                case 0x0:
                    /* 00000000 0000.... .0100000 00001111 */
                    /* ../target/riscv/insn32.decode:242 */
                    if (trans_cbo_inval(ctx, &u.f_decode_insn3241)) return true;
                    break;
                case 0x1:
                    /* 00000000 0001.... .0100000 00001111 */
                    /* ../target/riscv/insn32.decode:240 */
                    if (trans_cbo_clean(ctx, &u.f_decode_insn3241)) return true;
                    break;
                case 0x2:
                    /* 00000000 0010.... .0100000 00001111 */
                    /* ../target/riscv/insn32.decode:241 */
                    if (trans_cbo_flush(ctx, &u.f_decode_insn3241)) return true;
                    break;
                case 0x4:
                    /* 00000000 0100.... .0100000 00001111 */
                    /* ../target/riscv/insn32.decode:245 */
                    if (trans_cbo_zero(ctx, &u.f_decode_insn3241)) return true;
                    break;
                }
            }
            /* ../target/riscv/insn32.decode:249 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_lq(ctx, &u.f_i)) return true;
            break;
        }
        break;
    case 0x00000013:
        /* ........ ........ ........ .0010011 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0010011 */
            /* ../target/riscv/insn32.decode:187 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_addi(ctx, &u.f_i)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .0010011 */
            switch ((insn >> 27) & 0x1f) {
            case 0x0:
                /* 00000... ........ .001.... .0010011 */
                /* ../target/riscv/insn32.decode:194 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_slli(ctx, &u.f_shift)) return true;
                break;
            case 0x1:
                /* 00001... ........ .001.... .0010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0xf:
                    /* 00001000 1111.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:836 */
                    if (trans_zip(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x2:
                /* 00010... ........ .001.... .0010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0x0:
                    /* 00010000 0000.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:968 */
                    if (trans_sha256sum0(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 00010000 0001.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:969 */
                    if (trans_sha256sum1(ctx, &u.f_r2)) return true;
                    break;
                case 0x2:
                    /* 00010000 0010.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:966 */
                    if (trans_sha256sig0(ctx, &u.f_r2)) return true;
                    break;
                case 0x3:
                    /* 00010000 0011.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:967 */
                    if (trans_sha256sig1(ctx, &u.f_r2)) return true;
                    break;
                case 0x4:
                    /* 00010000 0100.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:979 */
                    if (trans_sha512sum0(ctx, &u.f_r2)) return true;
                    break;
                case 0x5:
                    /* 00010000 0101.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:980 */
                    if (trans_sha512sum1(ctx, &u.f_r2)) return true;
                    break;
                case 0x6:
                    /* 00010000 0110.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:977 */
                    if (trans_sha512sig0(ctx, &u.f_r2)) return true;
                    break;
                case 0x7:
                    /* 00010000 0111.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:978 */
                    if (trans_sha512sig1(ctx, &u.f_r2)) return true;
                    break;
                case 0x8:
                    /* 00010000 1000.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:982 */
                    if (trans_sm3p0(ctx, &u.f_r2)) return true;
                    break;
                case 0x9:
                    /* 00010000 1001.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:983 */
                    if (trans_sm3p1(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x5:
                /* 00101... ........ .001.... .0010011 */
                /* ../target/riscv/insn32.decode:876 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_bseti(ctx, &u.f_shift)) return true;
                break;
            case 0x6:
                /* 00110... ........ .001.... .0010011 */
                switch ((insn >> 24) & 0x7) {
                case 0x0:
                    /* 00110000 ........ .001.... .0010011 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0xf) {
                    case 0x0:
                        /* 00110000 0000.... .001.... .0010011 */
                        /* ../target/riscv/insn32.decode:955 */
                        if (trans_aes64im(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 00110001 ........ .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:964 */
                    decode_insn32_extract_i_aes(ctx, &u.f_i, insn);
                    if (trans_aes64ks1i(ctx, &u.f_i)) return true;
                    break;
                }
                break;
            case 0x9:
                /* 01001... ........ .001.... .0010011 */
                /* ../target/riscv/insn32.decode:870 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_bclri(ctx, &u.f_shift)) return true;
                break;
            case 0xc:
                /* 01100... ........ .001.... .0010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0x0:
                    /* 01100000 0000.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:821 */
                    if (trans_clz(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 01100000 0001.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:823 */
                    if (trans_ctz(ctx, &u.f_r2)) return true;
                    break;
                case 0x2:
                    /* 01100000 0010.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:822 */
                    if (trans_cpop(ctx, &u.f_r2)) return true;
                    break;
                case 0x4:
                    /* 01100000 0100.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:830 */
                    if (trans_sext_b(ctx, &u.f_r2)) return true;
                    break;
                case 0x5:
                    /* 01100000 0101.... .001.... .0010011 */
                    /* ../target/riscv/insn32.decode:831 */
                    if (trans_sext_h(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0xd:
                /* 01101... ........ .001.... .0010011 */
                /* ../target/riscv/insn32.decode:874 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_binvi(ctx, &u.f_shift)) return true;
                break;
            }
            break;
        case 0x2:
            /* ........ ........ .010.... .0010011 */
            /* ../target/riscv/insn32.decode:188 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_slti(ctx, &u.f_i)) return true;
            break;
        case 0x3:
            /* ........ ........ .011.... .0010011 */
            /* ../target/riscv/insn32.decode:189 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_sltiu(ctx, &u.f_i)) return true;
            break;
        case 0x4:
            /* ........ ........ .100.... .0010011 */
            /* ../target/riscv/insn32.decode:190 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_xori(ctx, &u.f_i)) return true;
            break;
        case 0x5:
            /* ........ ........ .101.... .0010011 */
            switch ((insn >> 27) & 0x1f) {
            case 0x0:
                /* 00000... ........ .101.... .0010011 */
                /* ../target/riscv/insn32.decode:195 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_srli(ctx, &u.f_shift)) return true;
                break;
            case 0x1:
                /* 00001... ........ .101.... .0010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0xf:
                    /* 00001000 1111.... .101.... .0010011 */
                    /* ../target/riscv/insn32.decode:835 */
                    if (trans_unzip(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x5:
                /* 00101... ........ .101.... .0010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0x7:
                    /* 00101000 0111.... .101.... .0010011 */
                    /* ../target/riscv/insn32.decode:828 */
                    if (trans_orc_b(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 01000... ........ .101.... .0010011 */
                /* ../target/riscv/insn32.decode:196 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_srai(ctx, &u.f_shift)) return true;
                break;
            case 0x9:
                /* 01001... ........ .101.... .0010011 */
                /* ../target/riscv/insn32.decode:872 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_bexti(ctx, &u.f_shift)) return true;
                break;
            case 0xc:
                /* 01100... ........ .101.... .0010011 */
                /* ../target/riscv/insn32.decode:809 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_rori(ctx, &u.f_shift)) return true;
                break;
            case 0xd:
                /* 01101... ........ .101.... .0010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0x7:
                    /* 01101000 0111.... .101.... .0010011 */
                    /* ../target/riscv/insn32.decode:833 */
                    if (trans_brev8(ctx, &u.f_r2)) return true;
                    break;
                case 0x18:
                    /* 01101001 1000.... .101.... .0010011 */
                    /* ../target/riscv/insn32.decode:812 */
                    if (trans_rev8_32(ctx, &u.f_r2)) return true;
                    break;
                case 0x38:
                    /* 01101011 1000.... .101.... .0010011 */
                    /* ../target/riscv/insn32.decode:842 */
                    if (trans_rev8_64(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x6:
            /* ........ ........ .110.... .0010011 */
            /* ../target/riscv/insn32.decode:192 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_ori(ctx, &u.f_i)) return true;
            break;
        case 0x7:
            /* ........ ........ .111.... .0010011 */
            /* ../target/riscv/insn32.decode:193 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_andi(ctx, &u.f_i)) return true;
            break;
        }
        break;
    case 0x00000017:
        /* ........ ........ ........ .0010111 */
        /* ../target/riscv/insn32.decode:170 */
        decode_insn32_extract_u(ctx, &u.f_u, insn);
        if (trans_auipc(ctx, &u.f_u)) return true;
        break;
    case 0x0000001b:
        /* ........ ........ ........ .0011011 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0011011 */
            /* ../target/riscv/insn32.decode:225 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_addiw(ctx, &u.f_i)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .0011011 */
            switch ((insn >> 27) & 0x1f) {
            case 0x0:
                /* 00000... ........ .001.... .0011011 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                switch ((insn >> 25) & 0x3) {
                case 0x0:
                    /* 0000000. ........ .001.... .0011011 */
                    /* ../target/riscv/insn32.decode:226 */
                    if (trans_slliw(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 00001... ........ .001.... .0011011 */
                /* ../target/riscv/insn32.decode:803 */
                decode_insn32_extract_sh(ctx, &u.f_shift, insn);
                if (trans_slli_uw(ctx, &u.f_shift)) return true;
                break;
            case 0xc:
                /* 01100... ........ .001.... .0011011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x7f) {
                case 0x0:
                    /* 01100000 0000.... .001.... .0011011 */
                    /* ../target/riscv/insn32.decode:854 */
                    if (trans_clzw(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 01100000 0001.... .001.... .0011011 */
                    /* ../target/riscv/insn32.decode:855 */
                    if (trans_ctzw(ctx, &u.f_r2)) return true;
                    break;
                case 0x2:
                    /* 01100000 0010.... .001.... .0011011 */
                    /* ../target/riscv/insn32.decode:856 */
                    if (trans_cpopw(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x5:
            /* ........ ........ .101.... .0011011 */
            decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
            switch ((insn >> 25) & 0x7f) {
            case 0x0:
                /* 0000000. ........ .101.... .0011011 */
                /* ../target/riscv/insn32.decode:227 */
                if (trans_srliw(ctx, &u.f_shift)) return true;
                break;
            case 0x20:
                /* 0100000. ........ .101.... .0011011 */
                /* ../target/riscv/insn32.decode:228 */
                if (trans_sraiw(ctx, &u.f_shift)) return true;
                break;
            case 0x30:
                /* 0110000. ........ .101.... .0011011 */
                /* ../target/riscv/insn32.decode:844 */
                if (trans_roriw(ctx, &u.f_shift)) return true;
                break;
            }
            break;
        }
        break;
    case 0x00000023:
        /* ........ ........ ........ .0100011 */
        decode_insn32_extract_s(ctx, &u.f_s, insn);
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0100011 */
            /* ../target/riscv/insn32.decode:184 */
            if (trans_sb(ctx, &u.f_s)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .0100011 */
            /* ../target/riscv/insn32.decode:185 */
            if (trans_sh(ctx, &u.f_s)) return true;
            break;
        case 0x2:
            /* ........ ........ .010.... .0100011 */
            /* ../target/riscv/insn32.decode:186 */
            if (trans_sw(ctx, &u.f_s)) return true;
            break;
        case 0x3:
            /* ........ ........ .011.... .0100011 */
            /* ../target/riscv/insn32.decode:224 */
            if (trans_sd(ctx, &u.f_s)) return true;
            break;
        case 0x4:
            /* ........ ........ .100.... .0100011 */
            /* ../target/riscv/insn32.decode:251 */
            if (trans_sq(ctx, &u.f_s)) return true;
            break;
        }
        break;
    case 0x00000027:
        /* ........ ........ ........ .0100111 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .0100111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .000.... .0100111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .000.... .0100111 */
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .000.... .0100111 */
                        /* ../target/riscv/insn32.decode:407 */
                        decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                        if (trans_vse8_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    case 0x8:
                        /* ...000.0 1000.... .000.... .0100111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1000.... .000.... .0100111 */
                            /* ../target/riscv/insn32.decode:461 */
                            if (trans_vs1r_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x22000000:
                            /* 00100010 1000.... .000.... .0100111 */
                            /* ../target/riscv/insn32.decode:462 */
                            if (trans_vs2r_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0x62000000:
                            /* 01100010 1000.... .000.... .0100111 */
                            /* ../target/riscv/insn32.decode:463 */
                            if (trans_vs4r_v(ctx, &u.f_r2)) return true;
                            break;
                        case 0xe2000000u:
                            /* 11100010 1000.... .000.... .0100111 */
                            /* ../target/riscv/insn32.decode:464 */
                            if (trans_vs8r_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    case 0xb:
                        /* ...000.0 1011.... .000.... .0100111 */
                        decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                        switch (insn & 0xe2000000u) {
                        case 0x02000000:
                            /* 00000010 1011.... .000.... .0100111 */
                            /* ../target/riscv/insn32.decode:414 */
                            if (trans_vsm_v(ctx, &u.f_r2)) return true;
                            break;
                        }
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .000.... .0100111 */
                    /* ../target/riscv/insn32.decode:421 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vsse8_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .000.... .0100111 */
                /* ../target/riscv/insn32.decode:433 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vsxei8_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        case 0x1:
            /* ........ ........ .001.... .0100111 */
            /* ../target/riscv/insn32.decode:906 */
            decode_insn32_extract_s(ctx, &u.f_s, insn);
            if (trans_fsh(ctx, &u.f_s)) return true;
            break;
        case 0x2:
            /* ........ ........ .010.... .0100111 */
            /* ../target/riscv/insn32.decode:314 */
            decode_insn32_extract_s(ctx, &u.f_s, insn);
            if (trans_fsw(ctx, &u.f_s)) return true;
            break;
        case 0x3:
            /* ........ ........ .011.... .0100111 */
            /* ../target/riscv/insn32.decode:348 */
            decode_insn32_extract_s(ctx, &u.f_s, insn);
            if (trans_fsd(ctx, &u.f_s)) return true;
            break;
        case 0x5:
            /* ........ ........ .101.... .0100111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .101.... .0100111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .101.... .0100111 */
                    decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .101.... .0100111 */
                        /* ../target/riscv/insn32.decode:408 */
                        if (trans_vse16_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .101.... .0100111 */
                    /* ../target/riscv/insn32.decode:422 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vsse16_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .101.... .0100111 */
                /* ../target/riscv/insn32.decode:434 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vsxei16_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        case 0x6:
            /* ........ ........ .110.... .0100111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .110.... .0100111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .110.... .0100111 */
                    decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .110.... .0100111 */
                        /* ../target/riscv/insn32.decode:409 */
                        if (trans_vse32_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .110.... .0100111 */
                    /* ../target/riscv/insn32.decode:423 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vsse32_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .110.... .0100111 */
                /* ../target/riscv/insn32.decode:435 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vsxei32_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        case 0x7:
            /* ........ ........ .111.... .0100111 */
            switch (insn & 0x14000000) {
            case 0x00000000:
                /* ...0.0.. ........ .111.... .0100111 */
                switch ((insn >> 27) & 0x1) {
                case 0x0:
                    /* ...000.. ........ .111.... .0100111 */
                    decode_insn32_extract_r2_nfvm(ctx, &u.f_r2nfvm, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* ...000.0 0000.... .111.... .0100111 */
                        /* ../target/riscv/insn32.decode:410 */
                        if (trans_vse64_v(ctx, &u.f_r2nfvm)) return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* ...010.. ........ .111.... .0100111 */
                    /* ../target/riscv/insn32.decode:424 */
                    decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                    if (trans_vsse64_v(ctx, &u.f_rnfvm)) return true;
                    break;
                }
                break;
            case 0x04000000:
                /* ...0.1.. ........ .111.... .0100111 */
                /* ../target/riscv/insn32.decode:436 */
                decode_insn32_extract_r_nfvm(ctx, &u.f_rnfvm, insn);
                if (trans_vsxei64_v(ctx, &u.f_rnfvm)) return true;
                break;
            }
            break;
        }
        break;
    case 0x0000002b:
        /* ........ ........ ........ .0101011 */
        switch (insn & 0xfe007000u) {
        case 0x00000000:
            /* 0000000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_mv(ctx, &u.f_mm_mv, insn);
            switch (insn & 0x01e00f80) {
            case 0x00000080:
                /* 00000000 000..... .0000000 10101011 */
                /* ../target/riscv/insn32.decode:1409 */
                if (trans_mmov_mm(ctx, &u.f_mm_mv)) return true;
                break;
            }
            break;
        case 0x02000000:
            /* 0000001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_mv_x(ctx, &u.f_mm_mv_x, insn);
            switch (insn & 0x01e00c00) {
            case 0x00000000:
                /* 00000010 000..... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1410 */
                if (trans_mmov_mv_x(ctx, &u.f_mm_mv_x)) return true;
                break;
            }
            break;
        case 0x04000000:
            /* 0000010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_mv_i(ctx, &u.f_mm_mv_i, insn);
            switch (insn & 0x01e00c00) {
            case 0x00000000:
                /* 00000100 000..... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1411 */
                if (trans_mmov_mv_i(ctx, &u.f_mm_mv_i)) return true;
                break;
            }
            break;
        case 0x08000000:
            /* 0000100. ........ .000.... .0101011 */
            decode_insn32_extract_mm_ld(ctx, &u.f_mm_ld, insn);
            switch ((insn >> 10) & 0x3) {
            case 0x0:
                /* 0000100. ........ .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1435 */
                if (trans_mld_b(ctx, &u.f_mm_ld)) return true;
                break;
            case 0x1:
                /* 0000100. ........ .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1436 */
                if (trans_mld_h(ctx, &u.f_mm_ld)) return true;
                break;
            case 0x2:
                /* 0000100. ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1437 */
                if (trans_mld_w(ctx, &u.f_mm_ld)) return true;
                break;
            case 0x3:
                /* 0000100. ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1438 */
                if (trans_mld_d(ctx, &u.f_mm_ld)) return true;
                break;
            }
            break;
        case 0x0a000000:
            /* 0000101. ........ .000.... .0101011 */
            decode_insn32_extract_mm_st(ctx, &u.f_mm_st, insn);
            switch ((insn >> 10) & 0x3) {
            case 0x0:
                /* 0000101. ........ .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1459 */
                if (trans_mst_b(ctx, &u.f_mm_st)) return true;
                break;
            case 0x1:
                /* 0000101. ........ .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1460 */
                if (trans_mst_h(ctx, &u.f_mm_st)) return true;
                break;
            case 0x2:
                /* 0000101. ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1461 */
                if (trans_mst_w(ctx, &u.f_mm_st)) return true;
                break;
            case 0x3:
                /* 0000101. ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1462 */
                if (trans_mst_d(ctx, &u.f_mm_st)) return true;
                break;
            }
            break;
        case 0x0c000000:
            /* 0000110. ........ .000.... .0101011 */
            /* ../target/riscv/insn32.decode:1498 */
            decode_insn32_extract_mm_mxm(ctx, &u.f_mm_mxm, insn);
            if (trans_mmov_x_m(ctx, &u.f_mm_mxm)) return true;
            break;
        case 0x0e000000:
            /* 0000111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg_i(ctx, &u.f_mm_cfg_i, insn);
            switch ((insn >> 15) & 0x7) {
            case 0x0:
                /* 0000111. ......00 0000.... .0101011 */
                /* ../target/riscv/insn32.decode:1488 */
                if (trans_mcfgki(ctx, &u.f_mm_cfg_i)) return true;
                break;
            }
            break;
        case 0x10000000:
            /* 0001000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000400:
                /* 00010000 ........ .0000100 00101011 */
                /* ../target/riscv/insn32.decode:1415 */
                if (trans_fmmacc_h(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000800:
                /* 00010000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1416 */
                if (trans_fmmacc_s(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 00010000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1417 */
                if (trans_fmmacc_d(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x01000400:
                /* 00010001 ........ .0000100 00101011 */
                /* ../target/riscv/insn32.decode:1418 */
                if (trans_fwmmacc_h(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x01000800:
                /* 00010001 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1419 */
                if (trans_fwmmacc_s(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x18000000:
            /* 0001100. ........ .000.... .0101011 */
            decode_insn32_extract_mm_ld(ctx, &u.f_mm_ld, insn);
            switch ((insn >> 10) & 0x3) {
            case 0x0:
                /* 0001100. ........ .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1439 */
                if (trans_msld_b(ctx, &u.f_mm_ld)) return true;
                break;
            case 0x1:
                /* 0001100. ........ .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1440 */
                if (trans_msld_h(ctx, &u.f_mm_ld)) return true;
                break;
            case 0x2:
                /* 0001100. ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1441 */
                if (trans_msld_w(ctx, &u.f_mm_ld)) return true;
                break;
            case 0x3:
                /* 0001100. ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1442 */
                if (trans_msld_d(ctx, &u.f_mm_ld)) return true;
                break;
            }
            break;
        case 0x1a000000:
            /* 0001101. ........ .000.... .0101011 */
            decode_insn32_extract_mm_st(ctx, &u.f_mm_st, insn);
            switch ((insn >> 10) & 0x3) {
            case 0x0:
                /* 0001101. ........ .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1463 */
                if (trans_msst_b(ctx, &u.f_mm_st)) return true;
                break;
            case 0x1:
                /* 0001101. ........ .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1464 */
                if (trans_msst_h(ctx, &u.f_mm_st)) return true;
                break;
            case 0x2:
                /* 0001101. ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1465 */
                if (trans_msst_w(ctx, &u.f_mm_st)) return true;
                break;
            case 0x3:
                /* 0001101. ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1466 */
                if (trans_msst_d(ctx, &u.f_mm_st)) return true;
                break;
            }
            break;
        case 0x1c000000:
            /* 0001110. ........ .000.... .0101011 */
            decode_insn32_extract_mm_dup(ctx, &u.f_mm_dup, insn);
            switch ((insn >> 15) & 0x1f) {
            case 0x0:
                /* 0001110. ....0000 0000.... .0101011 */
                /* ../target/riscv/insn32.decode:1496 */
                if (trans_mdup_m_x(ctx, &u.f_mm_dup)) return true;
                break;
            }
            break;
        case 0x1e000000:
            /* 0001111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg_i(ctx, &u.f_mm_cfg_i, insn);
            switch ((insn >> 15) & 0x7) {
            case 0x0:
                /* 0001111. ......00 0000.... .0101011 */
                /* ../target/riscv/insn32.decode:1489 */
                if (trans_mcfgmi(ctx, &u.f_mm_cfg_i)) return true;
                break;
            }
            break;
        case 0x20000000:
            /* 0010000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000000:
                /* 00100000 ........ .0000000 00101011 */
                /* ../target/riscv/insn32.decode:1420 */
                if (trans_mmaqa_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000080:
                /* 00100000 ........ .0000000 10101011 */
                /* ../target/riscv/insn32.decode:1412 */
                if (trans_mmaqau_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000100:
                /* 00100000 ........ .0000001 00101011 */
                /* ../target/riscv/insn32.decode:1406 */
                if (trans_mmaqaus_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000180:
                /* 00100000 ........ .0000001 10101011 */
                /* ../target/riscv/insn32.decode:1403 */
                if (trans_mmaqasu_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000400:
                /* 00100000 ........ .0000100 00101011 */
                /* ../target/riscv/insn32.decode:1421 */
                if (trans_mmaqa_h(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000480:
                /* 00100000 ........ .0000100 10101011 */
                /* ../target/riscv/insn32.decode:1413 */
                if (trans_mmaqau_h(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000500:
                /* 00100000 ........ .0000101 00101011 */
                /* ../target/riscv/insn32.decode:1407 */
                if (trans_mmaqaus_h(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000580:
                /* 00100000 ........ .0000101 10101011 */
                /* ../target/riscv/insn32.decode:1404 */
                if (trans_mmaqasu_h(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x01000000:
                /* 00100001 ........ .0000000 00101011 */
                /* ../target/riscv/insn32.decode:1422 */
                if (trans_pmmaqa_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x01000080:
                /* 00100001 ........ .0000000 10101011 */
                /* ../target/riscv/insn32.decode:1414 */
                if (trans_pmmaqau_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x01000100:
                /* 00100001 ........ .0000001 00101011 */
                /* ../target/riscv/insn32.decode:1408 */
                if (trans_pmmaqaus_b(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x01000180:
                /* 00100001 ........ .0000001 10101011 */
                /* ../target/riscv/insn32.decode:1405 */
                if (trans_pmmaqasu_b(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x28000000:
            /* 0010100. ........ .000.... .0101011 */
            decode_insn32_extract_mm_ldm(ctx, &u.f_mm_ldm, insn);
            switch (insn & 0x01f00c00) {
            case 0x00000000:
                /* 00101000 0000.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1443 */
                if (trans_mld1m_b(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00000400:
                /* 00101000 0000.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1447 */
                if (trans_mld1m_h(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00000800:
                /* 00101000 0000.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1451 */
                if (trans_mld1m_w(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00000c00:
                /* 00101000 0000.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1455 */
                if (trans_mld1m_d(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00100000:
                /* 00101000 0001.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1444 */
                if (trans_mld2m_b(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00100400:
                /* 00101000 0001.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1448 */
                if (trans_mld2m_h(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00100800:
                /* 00101000 0001.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1452 */
                if (trans_mld2m_w(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00100c00:
                /* 00101000 0001.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1456 */
                if (trans_mld2m_d(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00300000:
                /* 00101000 0011.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1445 */
                if (trans_mld4m_b(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00300400:
                /* 00101000 0011.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1449 */
                if (trans_mld4m_h(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00300800:
                /* 00101000 0011.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1453 */
                if (trans_mld4m_w(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00300c00:
                /* 00101000 0011.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1457 */
                if (trans_mld4m_d(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00700000:
                /* 00101000 0111.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1446 */
                if (trans_mld8m_b(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00700400:
                /* 00101000 0111.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1450 */
                if (trans_mld8m_h(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00700800:
                /* 00101000 0111.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1454 */
                if (trans_mld8m_w(ctx, &u.f_mm_ldm)) return true;
                break;
            case 0x00700c00:
                /* 00101000 0111.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1458 */
                if (trans_mld8m_d(ctx, &u.f_mm_ldm)) return true;
                break;
            }
            break;
        case 0x2a000000:
            /* 0010101. ........ .000.... .0101011 */
            decode_insn32_extract_mm_stm(ctx, &u.f_mm_stm, insn);
            switch (insn & 0x01f00c00) {
            case 0x00000000:
                /* 00101010 0000.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1467 */
                if (trans_mst1m_b(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00000400:
                /* 00101010 0000.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1471 */
                if (trans_mst1m_h(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00000800:
                /* 00101010 0000.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1475 */
                if (trans_mst1m_w(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00000c00:
                /* 00101010 0000.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1479 */
                if (trans_mst1m_d(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00100000:
                /* 00101010 0001.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1468 */
                if (trans_mst2m_b(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00100400:
                /* 00101010 0001.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1472 */
                if (trans_mst2m_h(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00100800:
                /* 00101010 0001.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1476 */
                if (trans_mst2m_w(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00100c00:
                /* 00101010 0001.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1480 */
                if (trans_mst2m_d(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00300000:
                /* 00101010 0011.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1469 */
                if (trans_mst4m_b(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00300400:
                /* 00101010 0011.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1473 */
                if (trans_mst4m_h(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00300800:
                /* 00101010 0011.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1477 */
                if (trans_mst4m_w(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00300c00:
                /* 00101010 0011.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1481 */
                if (trans_mst4m_d(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00700000:
                /* 00101010 0111.... .00000.. .0101011 */
                /* ../target/riscv/insn32.decode:1470 */
                if (trans_mst8m_b(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00700400:
                /* 00101010 0111.... .00001.. .0101011 */
                /* ../target/riscv/insn32.decode:1474 */
                if (trans_mst8m_h(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00700800:
                /* 00101010 0111.... .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1478 */
                if (trans_mst8m_w(ctx, &u.f_mm_stm)) return true;
                break;
            case 0x00700c00:
                /* 00101010 0111.... .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1482 */
                if (trans_mst8m_d(ctx, &u.f_mm_stm)) return true;
                break;
            }
            break;
        case 0x2c000000:
            /* 0010110. ........ .000.... .0101011 */
            /* ../target/riscv/insn32.decode:1497 */
            decode_insn32_extract_mm_mov(ctx, &u.f_mm_mov, insn);
            if (trans_mmov_m_x(ctx, &u.f_mm_mov)) return true;
            break;
        case 0x2e000000:
            /* 0010111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg_i(ctx, &u.f_mm_cfg_i, insn);
            switch ((insn >> 15) & 0x7) {
            case 0x0:
                /* 0010111. ......00 0000.... .0101011 */
                /* ../target/riscv/insn32.decode:1490 */
                if (trans_mcfgni(ctx, &u.f_mm_cfg_i)) return true;
                break;
            }
            break;
        case 0x30000000:
            /* 0011000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 00110000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1423 */
                if (trans_madd_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 00110000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1429 */
                if (trans_madd_d_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x32000000:
            /* 0011001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 00110010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1379 */
                if (trans_madd_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            case 0x00000c00:
                /* 00110010 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1391 */
                if (trans_madd_d_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x34000000:
            /* 0011010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 00110100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1367 */
                if (trans_madd_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            case 0x00000c00:
                /* 00110100 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1373 */
                if (trans_madd_d_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x36000000:
            /* 0011011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 00110110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1380 */
                if (trans_madd_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            case 0x00000c00:
                /* 00110110 ...000.. .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1392 */
                if (trans_madd_d_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x40000000:
            /* 0100000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 01000000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1424 */
                if (trans_msub_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 01000000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1430 */
                if (trans_msub_d_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x42000000:
            /* 0100001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01000010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1381 */
                if (trans_msub_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            case 0x00000c00:
                /* 01000010 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1393 */
                if (trans_msub_d_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x44000000:
            /* 0100010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01000100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1368 */
                if (trans_msub_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            case 0x00000c00:
                /* 01000100 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1374 */
                if (trans_msub_d_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x46000000:
            /* 0100011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 01000110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1382 */
                if (trans_msub_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            case 0x00000c00:
                /* 01000110 ...000.. .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1394 */
                if (trans_msub_d_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x50000000:
            /* 0101000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 01010000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1425 */
                if (trans_msra_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 01010000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1431 */
                if (trans_msra_d_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x52000000:
            /* 0101001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01010010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1383 */
                if (trans_msra_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            case 0x00000c00:
                /* 01010010 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1395 */
                if (trans_msra_d_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x54000000:
            /* 0101010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01010100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1369 */
                if (trans_msra_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            case 0x00000c00:
                /* 01010100 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1375 */
                if (trans_msra_d_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x56000000:
            /* 0101011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 01010110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1384 */
                if (trans_msra_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            case 0x00000c00:
                /* 01010110 ...000.. .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1396 */
                if (trans_msra_d_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x60000000:
            /* 0110000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 01100000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1426 */
                if (trans_mn4clip_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 01100000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1432 */
                if (trans_mn4clip_d_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x62000000:
            /* 0110001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01100010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1385 */
                if (trans_mn4clip_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            case 0x00000c00:
                /* 01100010 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1397 */
                if (trans_mn4clip_d_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x64000000:
            /* 0110010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01100100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1370 */
                if (trans_mn4clip_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            case 0x00000c00:
                /* 01100100 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1376 */
                if (trans_mn4clip_d_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x66000000:
            /* 0110011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 01100110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1386 */
                if (trans_mn4clip_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            case 0x00000c00:
                /* 01100110 ...000.. .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1398 */
                if (trans_mn4clip_d_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x70000000:
            /* 0111000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 01110000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1427 */
                if (trans_mn4clipu_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 01110000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1433 */
                if (trans_mn4clipu_d_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x72000000:
            /* 0111001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01110010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1387 */
                if (trans_mn4clipu_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            case 0x00000c00:
                /* 01110010 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1399 */
                if (trans_mn4clipu_d_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x74000000:
            /* 0111010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 01110100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1371 */
                if (trans_mn4clipu_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            case 0x00000c00:
                /* 01110100 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1377 */
                if (trans_mn4clipu_d_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x76000000:
            /* 0111011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 01110110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1388 */
                if (trans_mn4clipu_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            case 0x00000c00:
                /* 01110110 ...000.. .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1400 */
                if (trans_mn4clipu_d_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x7e000000:
            /* 0111111. ........ .000.... .0101011 */
            decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
            switch (insn & 0x01ff8f80) {
            case 0x00000000:
                /* 01111110 00000000 00000000 00101011 */
                /* ../target/riscv/insn32.decode:1487 */
                if (trans_mrelease(ctx, &u.f_empty)) return true;
                break;
            }
            break;
        case 0x80000000u:
            /* 1000000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 10000000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1428 */
                if (trans_mmul_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            case 0x00000c00:
                /* 10000000 ........ .0001100 00101011 */
                /* ../target/riscv/insn32.decode:1434 */
                if (trans_mmul_d_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x82000000u:
            /* 1000001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 10000010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1389 */
                if (trans_mmul_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            case 0x00000c00:
                /* 10000010 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1401 */
                if (trans_mmul_d_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x84000000u:
            /* 1000010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 10000100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1372 */
                if (trans_mmul_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            case 0x00000c00:
                /* 10000100 ........ .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1378 */
                if (trans_mmul_d_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x86000000u:
            /* 1000011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 10000110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1390 */
                if (trans_mmul_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            case 0x00000c00:
                /* 10000110 ...000.. .00011.. .0101011 */
                /* ../target/riscv/insn32.decode:1402 */
                if (trans_mmul_d_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x8e000000u:
            /* 1000111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg(ctx, &u.f_mm_cfg, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 10001110 0000.... .000.... .0101011 */
                /* ../target/riscv/insn32.decode:1483 */
                if (trans_mcfgk(ctx, &u.f_mm_cfg)) return true;
                break;
            }
            break;
        case 0x90000000u:
            /* 1001000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rmm(ctx, &u.f_mm_rmm, insn);
            switch (insn & 0x01000f80) {
            case 0x00000800:
                /* 10010000 ........ .0001000 00101011 */
                /* ../target/riscv/insn32.decode:1491 */
                if (trans_mmulh_s_mm(ctx, &u.f_mm_rmm)) return true;
                break;
            }
            break;
        case 0x92000000u:
            /* 1001001. ........ .000.... .0101011 */
            decode_insn32_extract_mm_r(ctx, &u.f_mm_r, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 10010010 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1492 */
                if (trans_mmulh_s_mv_x(ctx, &u.f_mm_r)) return true;
                break;
            }
            break;
        case 0x94000000u:
            /* 1001010. ........ .000.... .0101011 */
            decode_insn32_extract_mm_i(ctx, &u.f_mm_i, insn);
            switch (insn & 0x01000c00) {
            case 0x00000800:
                /* 10010100 ........ .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1493 */
                if (trans_mmulh_s_mv_i(ctx, &u.f_mm_i)) return true;
                break;
            }
            break;
        case 0x96000000u:
            /* 1001011. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rx(ctx, &u.f_mm_rx, insn);
            switch (insn & 0x011c0c00) {
            case 0x00000800:
                /* 10010110 ...000.. .00010.. .0101011 */
                /* ../target/riscv/insn32.decode:1494 */
                if (trans_mmulh_s_mx(ctx, &u.f_mm_rx)) return true;
                break;
            }
            break;
        case 0x9e000000u:
            /* 1001111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg(ctx, &u.f_mm_cfg, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 10011110 0000.... .000.... .0101011 */
                /* ../target/riscv/insn32.decode:1484 */
                if (trans_mcfgm(ctx, &u.f_mm_cfg)) return true;
                break;
            }
            break;
        case 0xa0000000u:
            /* 1010000. ........ .000.... .0101011 */
            decode_insn32_extract_mm_rm(ctx, &u.f_mm_rm, insn);
            switch (insn & 0x01fc0f80) {
            case 0x00000000:
                /* 10100000 000000.. .0000000 00101011 */
                /* ../target/riscv/insn32.decode:1495 */
                if (trans_mzero(ctx, &u.f_mm_rm)) return true;
                break;
            }
            break;
        case 0xae000000u:
            /* 1010111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg(ctx, &u.f_mm_cfg, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 10101110 0000.... .000.... .0101011 */
                /* ../target/riscv/insn32.decode:1485 */
                if (trans_mcfgn(ctx, &u.f_mm_cfg)) return true;
                break;
            }
            break;
        case 0xfe000000u:
            /* 1111111. ........ .000.... .0101011 */
            decode_insn32_extract_mm_cfg(ctx, &u.f_mm_cfg, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11111110 0000.... .000.... .0101011 */
                /* ../target/riscv/insn32.decode:1486 */
                if (trans_mcfg(ctx, &u.f_mm_cfg)) return true;
                break;
            }
            break;
        }
        break;
    case 0x0000002f:
        /* ........ ........ ........ .0101111 */
        switch (insn & 0xf8007000u) {
        case 0x00002000:
            /* 00000... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:290 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoadd_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x00003000:
            /* 00000... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:303 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoadd_d(ctx, &u.f_atomic)) return true;
            break;
        case 0x08002000:
            /* 00001... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:289 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoswap_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x08003000:
            /* 00001... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:302 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoswap_d(ctx, &u.f_atomic)) return true;
            break;
        case 0x10002000:
            /* 00010... ........ .010.... .0101111 */
            decode_insn32_extract_atom_ld(ctx, &u.f_atomic, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 00010..0 0000.... .010.... .0101111 */
                /* ../target/riscv/insn32.decode:287 */
                if (trans_lr_w(ctx, &u.f_atomic)) return true;
                break;
            }
            break;
        case 0x10003000:
            /* 00010... ........ .011.... .0101111 */
            decode_insn32_extract_atom_ld(ctx, &u.f_atomic, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 00010..0 0000.... .011.... .0101111 */
                /* ../target/riscv/insn32.decode:300 */
                if (trans_lr_d(ctx, &u.f_atomic)) return true;
                break;
            }
            break;
        case 0x18002000:
            /* 00011... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:288 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_sc_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x18003000:
            /* 00011... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:301 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_sc_d(ctx, &u.f_atomic)) return true;
            break;
        case 0x20002000:
            /* 00100... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:291 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoxor_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x20003000:
            /* 00100... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:304 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoxor_d(ctx, &u.f_atomic)) return true;
            break;
        case 0x40002000:
            /* 01000... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:293 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoor_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x40003000:
            /* 01000... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:306 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoor_d(ctx, &u.f_atomic)) return true;
            break;
        case 0x60002000:
            /* 01100... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:292 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoand_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x60003000:
            /* 01100... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:305 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amoand_d(ctx, &u.f_atomic)) return true;
            break;
        case 0x80002000u:
            /* 10000... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:294 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amomin_w(ctx, &u.f_atomic)) return true;
            break;
        case 0x80003000u:
            /* 10000... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:307 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amomin_d(ctx, &u.f_atomic)) return true;
            break;
        case 0xa0002000u:
            /* 10100... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:295 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amomax_w(ctx, &u.f_atomic)) return true;
            break;
        case 0xa0003000u:
            /* 10100... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:308 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amomax_d(ctx, &u.f_atomic)) return true;
            break;
        case 0xc0002000u:
            /* 11000... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:296 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amominu_w(ctx, &u.f_atomic)) return true;
            break;
        case 0xc0003000u:
            /* 11000... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:309 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amominu_d(ctx, &u.f_atomic)) return true;
            break;
        case 0xe0002000u:
            /* 11100... ........ .010.... .0101111 */
            /* ../target/riscv/insn32.decode:297 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amomaxu_w(ctx, &u.f_atomic)) return true;
            break;
        case 0xe0003000u:
            /* 11100... ........ .011.... .0101111 */
            /* ../target/riscv/insn32.decode:310 */
            decode_insn32_extract_atom_st(ctx, &u.f_atomic, insn);
            if (trans_amomaxu_d(ctx, &u.f_atomic)) return true;
            break;
        }
        break;
    case 0x00000033:
        /* ........ ........ ........ .0110011 */
        switch (insn & 0x3e007000) {
        case 0x00000000:
            /* ..00000. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:197 */
                if (trans_add(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0100000. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:198 */
                if (trans_sub(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00001000:
            /* ..00000. ........ .001.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:199 */
                if (trans_sll(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00002000:
            /* ..00000. ........ .010.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .010.... .0110011 */
                /* ../target/riscv/insn32.decode:200 */
                if (trans_slt(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00003000:
            /* ..00000. ........ .011.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .011.... .0110011 */
                /* ../target/riscv/insn32.decode:201 */
                if (trans_sltu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00004000:
            /* ..00000. ........ .100.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .100.... .0110011 */
                /* ../target/riscv/insn32.decode:202 */
                if (trans_xor(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0100000. ........ .100.... .0110011 */
                /* ../target/riscv/insn32.decode:819 */
                if (trans_xnor(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00005000:
            /* ..00000. ........ .101.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:203 */
                if (trans_srl(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0100000. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:204 */
                if (trans_sra(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00006000:
            /* ..00000. ........ .110.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .110.... .0110011 */
                /* ../target/riscv/insn32.decode:205 */
                if (trans_or(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0100000. ........ .110.... .0110011 */
                /* ../target/riscv/insn32.decode:829 */
                if (trans_orn(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00007000:
            /* ..00000. ........ .111.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000000. ........ .111.... .0110011 */
                /* ../target/riscv/insn32.decode:206 */
                if (trans_and(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0100000. ........ .111.... .0110011 */
                /* ../target/riscv/insn32.decode:806 */
                if (trans_andn(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02000000:
            /* ..00001. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:263 */
                if (trans_mul(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02001000:
            /* ..00001. ........ .001.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:264 */
                if (trans_mulh(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02002000:
            /* ..00001. ........ .010.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .010.... .0110011 */
                /* ../target/riscv/insn32.decode:265 */
                if (trans_mulhsu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02003000:
            /* ..00001. ........ .011.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .011.... .0110011 */
                /* ../target/riscv/insn32.decode:266 */
                if (trans_mulhu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02004000:
            /* ..00001. ........ .100.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .100.... .0110011 */
                /* ../target/riscv/insn32.decode:267 */
                if (trans_div(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02005000:
            /* ..00001. ........ .101.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:268 */
                if (trans_divu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02006000:
            /* ..00001. ........ .110.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .110.... .0110011 */
                /* ../target/riscv/insn32.decode:269 */
                if (trans_rem(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x02007000:
            /* ..00001. ........ .111.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000001. ........ .111.... .0110011 */
                /* ../target/riscv/insn32.decode:270 */
                if (trans_remu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x08001000:
            /* ..00100. ........ .001.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0100100. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:869 */
                if (trans_bclr(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x08004000:
            /* ..00100. ........ .100.... .0110011 */
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000100. ........ .100.... .0110011 */
                if ((insn & 0x01f00000) == 0x00000000) {
                    /* 00001000 0000.... .100.... .0110011 */
                    /* ../target/riscv/insn32.decode:816 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    if (trans_zext_h_32(ctx, &u.f_r2)) return true;
                }
                /* ../target/riscv/insn32.decode:817 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pack(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x08005000:
            /* ..00100. ........ .101.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0100100. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:871 */
                if (trans_bext(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x08007000:
            /* ..00100. ........ .111.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000100. ........ .111.... .0110011 */
                /* ../target/riscv/insn32.decode:834 */
                if (trans_packh(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a001000:
            /* ..00101. ........ .001.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:859 */
                if (trans_clmul(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a002000:
            /* ..00101. ........ .010.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .010.... .0110011 */
                /* ../target/riscv/insn32.decode:862 */
                if (trans_clmulr(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a003000:
            /* ..00101. ........ .011.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .011.... .0110011 */
                /* ../target/riscv/insn32.decode:860 */
                if (trans_clmulh(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a004000:
            /* ..00101. ........ .100.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .100.... .0110011 */
                /* ../target/riscv/insn32.decode:826 */
                if (trans_min(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a005000:
            /* ..00101. ........ .101.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:827 */
                if (trans_minu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a006000:
            /* ..00101. ........ .110.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .110.... .0110011 */
                /* ../target/riscv/insn32.decode:824 */
                if (trans_max(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0a007000:
            /* ..00101. ........ .111.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000101. ........ .111.... .0110011 */
                /* ../target/riscv/insn32.decode:825 */
                if (trans_maxu(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0e005000:
            /* ..00111. ........ .101.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000111. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:989 */
                if (trans_czero_eqz(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x0e007000:
            /* ..00111. ........ .111.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0000111. ........ .111.... .0110011 */
                /* ../target/riscv/insn32.decode:990 */
                if (trans_czero_nez(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x10000000:
            /* ..01000. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0101000. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:970 */
                if (trans_sha512sum0r(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x12000000:
            /* ..01001. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0101001. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:971 */
                if (trans_sha512sum1r(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x14000000:
            /* ..01010. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0101010. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:972 */
                if (trans_sha512sig0l(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x16000000:
            /* ..01011. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0101011. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:974 */
                if (trans_sha512sig1l(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x1c000000:
            /* ..01110. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0101110. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:973 */
                if (trans_sha512sig0h(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x1e000000:
            /* ..01111. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0101111. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:975 */
                if (trans_sha512sig1h(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x20001000:
            /* ..10000. ........ .001.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0110000. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:807 */
                if (trans_rol(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x20002000:
            /* ..10000. ........ .010.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0010000. ........ .010.... .0110011 */
                /* ../target/riscv/insn32.decode:794 */
                if (trans_sh1add(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x20004000:
            /* ..10000. ........ .100.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0010000. ........ .100.... .0110011 */
                /* ../target/riscv/insn32.decode:795 */
                if (trans_sh2add(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x20005000:
            /* ..10000. ........ .101.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x1:
                /* 0110000. ........ .101.... .0110011 */
                /* ../target/riscv/insn32.decode:808 */
                if (trans_ror(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x20006000:
            /* ..10000. ........ .110.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0010000. ........ .110.... .0110011 */
                /* ../target/riscv/insn32.decode:796 */
                if (trans_sh3add(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x22000000:
            /* ..10001. ........ .000.... .0110011 */
            /* ../target/riscv/insn32.decode:958 */
            decode_insn32_extract_k_aes(ctx, &u.f_k_aes, insn);
            if (trans_aes32esi(ctx, &u.f_k_aes)) return true;
            break;
        case 0x26000000:
            /* ..10011. ........ .000.... .0110011 */
            /* ../target/riscv/insn32.decode:957 */
            decode_insn32_extract_k_aes(ctx, &u.f_k_aes, insn);
            if (trans_aes32esmi(ctx, &u.f_k_aes)) return true;
            break;
        case 0x28001000:
            /* ..10100. ........ .001.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0010100. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:875 */
                if (trans_bset(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0110100. ........ .001.... .0110011 */
                /* ../target/riscv/insn32.decode:873 */
                if (trans_binv(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x28002000:
            /* ..10100. ........ .010.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0010100. ........ .010.... .0110011 */
                /* ../target/riscv/insn32.decode:865 */
                if (trans_xperm4(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x28004000:
            /* ..10100. ........ .100.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0010100. ........ .100.... .0110011 */
                /* ../target/riscv/insn32.decode:866 */
                if (trans_xperm8(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x2a000000:
            /* ..10101. ........ .000.... .0110011 */
            /* ../target/riscv/insn32.decode:951 */
            decode_insn32_extract_k_aes(ctx, &u.f_k_aes, insn);
            if (trans_aes32dsi(ctx, &u.f_k_aes)) return true;
            break;
        case 0x2e000000:
            /* ..10111. ........ .000.... .0110011 */
            /* ../target/riscv/insn32.decode:950 */
            decode_insn32_extract_k_aes(ctx, &u.f_k_aes, insn);
            if (trans_aes32dsmi(ctx, &u.f_k_aes)) return true;
            break;
        case 0x30000000:
            /* ..11000. ........ .000.... .0110011 */
            /* ../target/riscv/insn32.decode:985 */
            decode_insn32_extract_k_aes(ctx, &u.f_k_aes, insn);
            if (trans_sm4ed(ctx, &u.f_k_aes)) return true;
            break;
        case 0x32000000:
            /* ..11001. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0011001. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:960 */
                if (trans_aes64es(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x34000000:
            /* ..11010. ........ .000.... .0110011 */
            /* ../target/riscv/insn32.decode:986 */
            decode_insn32_extract_k_aes(ctx, &u.f_k_aes, insn);
            if (trans_sm4ks(ctx, &u.f_k_aes)) return true;
            break;
        case 0x36000000:
            /* ..11011. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0011011. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:961 */
                if (trans_aes64esm(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x3a000000:
            /* ..11101. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0011101. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:954 */
                if (trans_aes64ds(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x3e000000:
            /* ..11111. ........ .000.... .0110011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 0011111. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:953 */
                if (trans_aes64dsm(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0111111. ........ .000.... .0110011 */
                /* ../target/riscv/insn32.decode:963 */
                if (trans_aes64ks2(ctx, &u.f_r)) return true;
                break;
            }
            break;
        }
        break;
    case 0x00000037:
        /* ........ ........ ........ .0110111 */
        /* ../target/riscv/insn32.decode:169 */
        decode_insn32_extract_u(ctx, &u.f_u, insn);
        if (trans_lui(ctx, &u.f_u)) return true;
        break;
    case 0x0000003b:
        /* ........ ........ ........ .0111011 */
        switch (insn & 0xfe007000u) {
        case 0x00000000:
            /* 0000000. ........ .000.... .0111011 */
            /* ../target/riscv/insn32.decode:229 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_addw(ctx, &u.f_r)) return true;
            break;
        case 0x00001000:
            /* 0000000. ........ .001.... .0111011 */
            /* ../target/riscv/insn32.decode:231 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_sllw(ctx, &u.f_r)) return true;
            break;
        case 0x00005000:
            /* 0000000. ........ .101.... .0111011 */
            /* ../target/riscv/insn32.decode:232 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_srlw(ctx, &u.f_r)) return true;
            break;
        case 0x02000000:
            /* 0000001. ........ .000.... .0111011 */
            /* ../target/riscv/insn32.decode:273 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_mulw(ctx, &u.f_r)) return true;
            break;
        case 0x02004000:
            /* 0000001. ........ .100.... .0111011 */
            /* ../target/riscv/insn32.decode:274 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_divw(ctx, &u.f_r)) return true;
            break;
        case 0x02005000:
            /* 0000001. ........ .101.... .0111011 */
            /* ../target/riscv/insn32.decode:275 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_divuw(ctx, &u.f_r)) return true;
            break;
        case 0x02006000:
            /* 0000001. ........ .110.... .0111011 */
            /* ../target/riscv/insn32.decode:276 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_remw(ctx, &u.f_r)) return true;
            break;
        case 0x02007000:
            /* 0000001. ........ .111.... .0111011 */
            /* ../target/riscv/insn32.decode:277 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_remuw(ctx, &u.f_r)) return true;
            break;
        case 0x08000000:
            /* 0000100. ........ .000.... .0111011 */
            /* ../target/riscv/insn32.decode:799 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_add_uw(ctx, &u.f_r)) return true;
            break;
        case 0x08004000:
            /* 0000100. ........ .100.... .0111011 */
            if ((insn & 0x01f00000) == 0x00000000) {
                /* 00001000 0000.... .100.... .0111011 */
                /* ../target/riscv/insn32.decode:850 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                if (trans_zext_h_64(ctx, &u.f_r2)) return true;
            }
            /* ../target/riscv/insn32.decode:851 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_packw(ctx, &u.f_r)) return true;
            break;
        case 0x20002000:
            /* 0010000. ........ .010.... .0111011 */
            /* ../target/riscv/insn32.decode:800 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_sh1add_uw(ctx, &u.f_r)) return true;
            break;
        case 0x20004000:
            /* 0010000. ........ .100.... .0111011 */
            /* ../target/riscv/insn32.decode:801 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_sh2add_uw(ctx, &u.f_r)) return true;
            break;
        case 0x20006000:
            /* 0010000. ........ .110.... .0111011 */
            /* ../target/riscv/insn32.decode:802 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_sh3add_uw(ctx, &u.f_r)) return true;
            break;
        case 0x40000000:
            /* 0100000. ........ .000.... .0111011 */
            /* ../target/riscv/insn32.decode:230 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_subw(ctx, &u.f_r)) return true;
            break;
        case 0x40005000:
            /* 0100000. ........ .101.... .0111011 */
            /* ../target/riscv/insn32.decode:233 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_sraw(ctx, &u.f_r)) return true;
            break;
        case 0x60001000:
            /* 0110000. ........ .001.... .0111011 */
            /* ../target/riscv/insn32.decode:843 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_rolw(ctx, &u.f_r)) return true;
            break;
        case 0x60005000:
            /* 0110000. ........ .101.... .0111011 */
            /* ../target/riscv/insn32.decode:845 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            if (trans_rorw(ctx, &u.f_r)) return true;
            break;
        }
        break;
    case 0x00000043:
        /* ........ ........ ........ .1000011 */
        decode_insn32_extract_r4_rm(ctx, &u.f_decode_insn3235, insn);
        switch ((insn >> 25) & 0x3) {
        case 0x0:
            /* .....00. ........ ........ .1000011 */
            /* ../target/riscv/insn32.decode:315 */
            if (trans_fmadd_s(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x1:
            /* .....01. ........ ........ .1000011 */
            /* ../target/riscv/insn32.decode:349 */
            if (trans_fmadd_d(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x2:
            /* .....10. ........ ........ .1000011 */
            /* ../target/riscv/insn32.decode:907 */
            if (trans_fmadd_h(ctx, &u.f_decode_insn3235)) return true;
            break;
        }
        break;
    case 0x00000047:
        /* ........ ........ ........ .1000111 */
        decode_insn32_extract_r4_rm(ctx, &u.f_decode_insn3235, insn);
        switch ((insn >> 25) & 0x3) {
        case 0x0:
            /* .....00. ........ ........ .1000111 */
            /* ../target/riscv/insn32.decode:316 */
            if (trans_fmsub_s(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x1:
            /* .....01. ........ ........ .1000111 */
            /* ../target/riscv/insn32.decode:350 */
            if (trans_fmsub_d(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x2:
            /* .....10. ........ ........ .1000111 */
            /* ../target/riscv/insn32.decode:908 */
            if (trans_fmsub_h(ctx, &u.f_decode_insn3235)) return true;
            break;
        }
        break;
    case 0x0000004b:
        /* ........ ........ ........ .1001011 */
        decode_insn32_extract_r4_rm(ctx, &u.f_decode_insn3235, insn);
        switch ((insn >> 25) & 0x3) {
        case 0x0:
            /* .....00. ........ ........ .1001011 */
            /* ../target/riscv/insn32.decode:317 */
            if (trans_fnmsub_s(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x1:
            /* .....01. ........ ........ .1001011 */
            /* ../target/riscv/insn32.decode:351 */
            if (trans_fnmsub_d(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x2:
            /* .....10. ........ ........ .1001011 */
            /* ../target/riscv/insn32.decode:909 */
            if (trans_fnmsub_h(ctx, &u.f_decode_insn3235)) return true;
            break;
        }
        break;
    case 0x0000004f:
        /* ........ ........ ........ .1001111 */
        decode_insn32_extract_r4_rm(ctx, &u.f_decode_insn3235, insn);
        switch ((insn >> 25) & 0x3) {
        case 0x0:
            /* .....00. ........ ........ .1001111 */
            /* ../target/riscv/insn32.decode:318 */
            if (trans_fnmadd_s(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x1:
            /* .....01. ........ ........ .1001111 */
            /* ../target/riscv/insn32.decode:352 */
            if (trans_fnmadd_d(ctx, &u.f_decode_insn3235)) return true;
            break;
        case 0x2:
            /* .....10. ........ ........ .1001111 */
            /* ../target/riscv/insn32.decode:910 */
            if (trans_fnmadd_h(ctx, &u.f_decode_insn3235)) return true;
            break;
        }
        break;
    case 0x00000053:
        /* ........ ........ ........ .1010011 */
        switch ((insn >> 25) & 0x7f) {
        case 0x0:
            /* 0000000. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:319 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fadd_s(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x1:
            /* 0000001. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:353 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fadd_d(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x2:
            /* 0000010. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:911 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fadd_h(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x4:
            /* 0000100. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:320 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fsub_s(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x5:
            /* 0000101. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:354 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fsub_d(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x6:
            /* 0000110. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:912 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fsub_h(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x8:
            /* 0001000. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:321 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fmul_s(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x9:
            /* 0001001. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:355 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fmul_d(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0xa:
            /* 0001010. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:913 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fmul_h(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0xc:
            /* 0001100. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:322 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fdiv_s(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0xd:
            /* 0001101. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:356 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fdiv_d(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0xe:
            /* 0001110. ........ ........ .1010011 */
            /* ../target/riscv/insn32.decode:914 */
            decode_insn32_extract_r_rm(ctx, &u.f_decode_insn3236, insn);
            if (trans_fdiv_h(ctx, &u.f_decode_insn3236)) return true;
            break;
        case 0x10:
            /* 0010000. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 0010000. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:324 */
                if (trans_fsgnj_s(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0010000. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:325 */
                if (trans_fsgnjn_s(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 0010000. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:326 */
                if (trans_fsgnjx_s(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x11:
            /* 0010001. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 0010001. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:358 */
                if (trans_fsgnj_d(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0010001. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:359 */
                if (trans_fsgnjn_d(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 0010001. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:360 */
                if (trans_fsgnjx_d(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x12:
            /* 0010010. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 0010010. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:916 */
                if (trans_fsgnj_h(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0010010. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:917 */
                if (trans_fsgnjn_h(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 0010010. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:918 */
                if (trans_fsgnjx_h(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x14:
            /* 0010100. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 0010100. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:327 */
                if (trans_fmin_s(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0010100. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:328 */
                if (trans_fmax_s(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 0010100. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:882 */
                if (trans_fminm_s(ctx, &u.f_r)) return true;
                break;
            case 0x3:
                /* 0010100. ........ .011.... .1010011 */
                /* ../target/riscv/insn32.decode:883 */
                if (trans_fmaxm_s(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x15:
            /* 0010101. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 0010101. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:361 */
                if (trans_fmin_d(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0010101. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:362 */
                if (trans_fmax_d(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 0010101. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:884 */
                if (trans_fminm_d(ctx, &u.f_r)) return true;
                break;
            case 0x3:
                /* 0010101. ........ .011.... .1010011 */
                /* ../target/riscv/insn32.decode:885 */
                if (trans_fmaxm_d(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x16:
            /* 0010110. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 0010110. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:919 */
                if (trans_fmin_h(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 0010110. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:920 */
                if (trans_fmax_h(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 0010110. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:886 */
                if (trans_fminm_h(ctx, &u.f_r)) return true;
                break;
            case 0x3:
                /* 0010110. ........ .011.... .1010011 */
                /* ../target/riscv/insn32.decode:887 */
                if (trans_fmaxm_h(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x20:
            /* 0100000. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x1:
                /* 01000000 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:363 */
                if (trans_fcvt_s_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 01000000 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:922 */
                if (trans_fcvt_s_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x4:
                /* 01000000 0100.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:888 */
                if (trans_fround_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x5:
                /* 01000000 0101.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:889 */
                if (trans_froundnx_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x6:
                /* 01000000 0110.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:994 */
                if (trans_fcvt_s_bf16(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x21:
            /* 0100001. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 01000010 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:364 */
                if (trans_fcvt_d_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 01000010 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:924 */
                if (trans_fcvt_d_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x4:
                /* 01000010 0100.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:890 */
                if (trans_fround_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x5:
                /* 01000010 0101.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:891 */
                if (trans_froundnx_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x22:
            /* 0100010. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 01000100 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:921 */
                if (trans_fcvt_h_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 01000100 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:923 */
                if (trans_fcvt_h_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x4:
                /* 01000100 0100.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:892 */
                if (trans_fround_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x5:
                /* 01000100 0101.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:893 */
                if (trans_froundnx_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x8:
                /* 01000100 1000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:993 */
                if (trans_fcvt_bf16_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x2c:
            /* 0101100. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 01011000 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:323 */
                if (trans_fsqrt_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x2d:
            /* 0101101. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 01011010 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:357 */
                if (trans_fsqrt_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x2e:
            /* 0101110. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 01011100 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:915 */
                if (trans_fsqrt_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x50:
            /* 1010000. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 1010000. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:334 */
                if (trans_fle_s(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 1010000. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:333 */
                if (trans_flt_s(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 1010000. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:332 */
                if (trans_feq_s(ctx, &u.f_r)) return true;
                break;
            case 0x4:
                /* 1010000. ........ .100.... .1010011 */
                /* ../target/riscv/insn32.decode:897 */
                if (trans_fleq_s(ctx, &u.f_r)) return true;
                break;
            case 0x5:
                /* 1010000. ........ .101.... .1010011 */
                /* ../target/riscv/insn32.decode:898 */
                if (trans_fltq_s(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x51:
            /* 1010001. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 1010001. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:367 */
                if (trans_fle_d(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 1010001. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:366 */
                if (trans_flt_d(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 1010001. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:365 */
                if (trans_feq_d(ctx, &u.f_r)) return true;
                break;
            case 0x4:
                /* 1010001. ........ .100.... .1010011 */
                /* ../target/riscv/insn32.decode:899 */
                if (trans_fleq_d(ctx, &u.f_r)) return true;
                break;
            case 0x5:
                /* 1010001. ........ .101.... .1010011 */
                /* ../target/riscv/insn32.decode:900 */
                if (trans_fltq_d(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x52:
            /* 1010010. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 1010010. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:930 */
                if (trans_fle_h(ctx, &u.f_r)) return true;
                break;
            case 0x1:
                /* 1010010. ........ .001.... .1010011 */
                /* ../target/riscv/insn32.decode:929 */
                if (trans_flt_h(ctx, &u.f_r)) return true;
                break;
            case 0x2:
                /* 1010010. ........ .010.... .1010011 */
                /* ../target/riscv/insn32.decode:928 */
                if (trans_feq_h(ctx, &u.f_r)) return true;
                break;
            case 0x4:
                /* 1010010. ........ .100.... .1010011 */
                /* ../target/riscv/insn32.decode:901 */
                if (trans_fleq_h(ctx, &u.f_r)) return true;
                break;
            case 0x5:
                /* 1010010. ........ .101.... .1010011 */
                /* ../target/riscv/insn32.decode:902 */
                if (trans_fltq_h(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x59:
            /* 1011001. ........ ........ .1010011 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch ((insn >> 12) & 0x7) {
            case 0x0:
                /* 1011001. ........ .000.... .1010011 */
                /* ../target/riscv/insn32.decode:896 */
                if (trans_fmvp_d_x(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x60:
            /* 1100000. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11000000 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:329 */
                if (trans_fcvt_w_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 11000000 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:330 */
                if (trans_fcvt_wu_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 11000000 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:341 */
                if (trans_fcvt_l_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x3:
                /* 11000000 0011.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:342 */
                if (trans_fcvt_lu_s(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x61:
            /* 1100001. ........ ........ .1010011 */
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11000010 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:369 */
                decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
                if (trans_fcvt_w_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 11000010 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:370 */
                decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
                if (trans_fcvt_wu_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 11000010 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:375 */
                decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
                if (trans_fcvt_l_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x3:
                /* 11000010 0011.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:376 */
                decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
                if (trans_fcvt_lu_d(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x8:
                /* 11000010 1000.... ........ .1010011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 12) & 0x7) {
                case 0x1:
                    /* 11000010 1000.... .001.... .1010011 */
                    /* ../target/riscv/insn32.decode:894 */
                    if (trans_fcvtmod_w_d(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x62:
            /* 1100010. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11000100 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:925 */
                if (trans_fcvt_w_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 11000100 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:926 */
                if (trans_fcvt_wu_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 11000100 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:937 */
                if (trans_fcvt_l_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x3:
                /* 11000100 0011.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:938 */
                if (trans_fcvt_lu_h(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x68:
            /* 1101000. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11010000 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:336 */
                if (trans_fcvt_s_w(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 11010000 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:337 */
                if (trans_fcvt_s_wu(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 11010000 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:343 */
                if (trans_fcvt_s_l(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x3:
                /* 11010000 0011.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:344 */
                if (trans_fcvt_s_lu(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x69:
            /* 1101001. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11010010 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:371 */
                if (trans_fcvt_d_w(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 11010010 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:372 */
                if (trans_fcvt_d_wu(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 11010010 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:378 */
                if (trans_fcvt_d_l(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x3:
                /* 11010010 0011.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:379 */
                if (trans_fcvt_d_lu(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x6a:
            /* 1101010. ........ ........ .1010011 */
            decode_insn32_extract_r2_rm(ctx, &u.f_decode_insn3237, insn);
            switch ((insn >> 20) & 0x1f) {
            case 0x0:
                /* 11010100 0000.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:932 */
                if (trans_fcvt_h_w(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x1:
                /* 11010100 0001.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:933 */
                if (trans_fcvt_h_wu(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x2:
                /* 11010100 0010.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:939 */
                if (trans_fcvt_h_l(ctx, &u.f_decode_insn3237)) return true;
                break;
            case 0x3:
                /* 11010100 0011.... ........ .1010011 */
                /* ../target/riscv/insn32.decode:940 */
                if (trans_fcvt_h_lu(ctx, &u.f_decode_insn3237)) return true;
                break;
            }
            break;
        case 0x70:
            /* 1110000. ........ ........ .1010011 */
            decode_insn32_extract_r2(ctx, &u.f_r2, insn);
            switch (insn & 0x01f07000) {
            case 0x00000000:
                /* 11100000 0000.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:331 */
                if (trans_fmv_x_w(ctx, &u.f_r2)) return true;
                break;
            case 0x00001000:
                /* 11100000 0000.... .001.... .1010011 */
                /* ../target/riscv/insn32.decode:335 */
                if (trans_fclass_s(ctx, &u.f_r2)) return true;
                break;
            }
            break;
        case 0x71:
            /* 1110001. ........ ........ .1010011 */
            decode_insn32_extract_r2(ctx, &u.f_r2, insn);
            switch (insn & 0x01f07000) {
            case 0x00000000:
                /* 11100010 0000.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:377 */
                if (trans_fmv_x_d(ctx, &u.f_r2)) return true;
                break;
            case 0x00001000:
                /* 11100010 0000.... .001.... .1010011 */
                /* ../target/riscv/insn32.decode:368 */
                if (trans_fclass_d(ctx, &u.f_r2)) return true;
                break;
            case 0x00100000:
                /* 11100010 0001.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:895 */
                if (trans_fmvh_x_d(ctx, &u.f_r2)) return true;
                break;
            }
            break;
        case 0x72:
            /* 1110010. ........ ........ .1010011 */
            decode_insn32_extract_r2(ctx, &u.f_r2, insn);
            switch (insn & 0x01f07000) {
            case 0x00000000:
                /* 11100100 0000.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:927 */
                if (trans_fmv_x_h(ctx, &u.f_r2)) return true;
                break;
            case 0x00001000:
                /* 11100100 0000.... .001.... .1010011 */
                /* ../target/riscv/insn32.decode:931 */
                if (trans_fclass_h(ctx, &u.f_r2)) return true;
                break;
            }
            break;
        case 0x78:
            /* 1111000. ........ ........ .1010011 */
            decode_insn32_extract_r2(ctx, &u.f_r2, insn);
            switch (insn & 0x01f07000) {
            case 0x00000000:
                /* 11110000 0000.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:338 */
                if (trans_fmv_w_x(ctx, &u.f_r2)) return true;
                break;
            case 0x00100000:
                /* 11110000 0001.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:879 */
                if (trans_fli_s(ctx, &u.f_r2)) return true;
                break;
            }
            break;
        case 0x79:
            /* 1111001. ........ ........ .1010011 */
            decode_insn32_extract_r2(ctx, &u.f_r2, insn);
            switch (insn & 0x01f07000) {
            case 0x00000000:
                /* 11110010 0000.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:380 */
                if (trans_fmv_d_x(ctx, &u.f_r2)) return true;
                break;
            case 0x00100000:
                /* 11110010 0001.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:880 */
                if (trans_fli_d(ctx, &u.f_r2)) return true;
                break;
            }
            break;
        case 0x7a:
            /* 1111010. ........ ........ .1010011 */
            decode_insn32_extract_r2(ctx, &u.f_r2, insn);
            switch (insn & 0x01f07000) {
            case 0x00000000:
                /* 11110100 0000.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:934 */
                if (trans_fmv_h_x(ctx, &u.f_r2)) return true;
                break;
            case 0x00100000:
                /* 11110100 0001.... .000.... .1010011 */
                /* ../target/riscv/insn32.decode:881 */
                if (trans_fli_h(ctx, &u.f_r2)) return true;
                break;
            }
            break;
        }
        break;
    case 0x00000057:
        /* ........ ........ ........ .1010111 */
        switch (insn & 0x80007000u) {
        case 0x00000000:
            /* 0....... ........ .000.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:467 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 000010.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:470 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 000100.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:544 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vminu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 000101.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:546 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmin_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 000110.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:548 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmaxu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 000111.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:550 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmax_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:500 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vand_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:503 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vor_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 001011.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:506 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vxor_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 001100.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:767 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vrgather_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 001110.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:768 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vrgatherei16_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .000.... .1010111 */
                decode_insn32_extract_r_vm_1(ctx, &u.f_rmrr, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100000. ........ .000.... .1010111 */
                    /* ../target/riscv/insn32.decode:490 */
                    if (trans_vadc_vvm(ctx, &u.f_rmrr)) return true;
                    break;
                }
                break;
            case 0x11:
                /* 010001.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:493 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmadc_vvm(ctx, &u.f_rmrr)) return true;
                break;
            case 0x12:
                /* 010010.. ........ .000.... .1010111 */
                decode_insn32_extract_r_vm_1(ctx, &u.f_rmrr, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100100. ........ .000.... .1010111 */
                    /* ../target/riscv/insn32.decode:496 */
                    if (trans_vsbc_vvm(ctx, &u.f_rmrr)) return true;
                    break;
                }
                break;
            case 0x13:
                /* 010011.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:498 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsbc_vvm(ctx, &u.f_rmrr)) return true;
                break;
            case 0x17:
                /* 010111.. ........ .000.... .1010111 */
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101110. ........ .000.... .1010111 */
                    /* ../target/riscv/insn32.decode:592 */
                    decode_insn32_extract_r_vm_0(ctx, &u.f_rmrr, insn);
                    if (trans_vmerge_vvm(ctx, &u.f_rmrr)) return true;
                    break;
                case 0x1:
                    /* 0101111. ........ .000.... .1010111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* 01011110 0000.... .000.... .1010111 */
                        /* ../target/riscv/insn32.decode:589 */
                        if (trans_vmv_v_v(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x18:
                /* 011000.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:524 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmseq_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x19:
                /* 011001.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:527 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsne_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1a:
                /* 011010.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:530 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsltu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 011011.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:532 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmslt_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 011100.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:534 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsleu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 011101.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:537 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsle_vv(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x00001000:
            /* 0....... ........ .001.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:627 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 000001.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:735 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfredusum_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 000010.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:629 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 000011.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:736 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfredosum_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 000100.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:674 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfmin_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 000101.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:737 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfredmin_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 000110.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:676 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfmax_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 000111.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:738 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfredmax_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 001000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:678 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsgnj_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:680 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsgnjn_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:682 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsgnjx_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .001.... .1010111 */
                decode_insn32_extract_r2rd(ctx, &u.f_decode_insn3239, insn);
                switch (insn & 0x020f8000) {
                case 0x02000000:
                    /* 0100001. ....0000 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:759 */
                    if (trans_vfmv_f_s(ctx, &u.f_decode_insn3239)) return true;
                    break;
                }
                break;
            case 0x12:
                /* 010010.. ........ .001.... .1010111 */
                decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                switch ((insn >> 15) & 0x1f) {
                case 0x0:
                    /* 010010.. ....0000 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:700 */
                    if (trans_vfcvt_xu_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x1:
                    /* 010010.. ....0000 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:701 */
                    if (trans_vfcvt_x_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x2:
                    /* 010010.. ....0001 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:702 */
                    if (trans_vfcvt_f_xu_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x3:
                    /* 010010.. ....0001 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:703 */
                    if (trans_vfcvt_f_x_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x6:
                    /* 010010.. ....0011 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:704 */
                    if (trans_vfcvt_rtz_xu_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x7:
                    /* 010010.. ....0011 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:705 */
                    if (trans_vfcvt_rtz_x_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x8:
                    /* 010010.. ....0100 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:707 */
                    if (trans_vfwcvt_xu_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x9:
                    /* 010010.. ....0100 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:708 */
                    if (trans_vfwcvt_x_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0xa:
                    /* 010010.. ....0101 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:709 */
                    if (trans_vfwcvt_f_xu_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0xb:
                    /* 010010.. ....0101 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:710 */
                    if (trans_vfwcvt_f_x_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0xc:
                    /* 010010.. ....0110 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:711 */
                    if (trans_vfwcvt_f_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0xd:
                    /* 010010.. ....0110 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:998 */
                    if (trans_vfwcvtbf16_f_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0xe:
                    /* 010010.. ....0111 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:712 */
                    if (trans_vfwcvt_rtz_xu_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0xf:
                    /* 010010.. ....0111 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:713 */
                    if (trans_vfwcvt_rtz_x_f_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x10:
                    /* 010010.. ....1000 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:715 */
                    if (trans_vfncvt_xu_f_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x11:
                    /* 010010.. ....1000 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:716 */
                    if (trans_vfncvt_x_f_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x12:
                    /* 010010.. ....1001 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:717 */
                    if (trans_vfncvt_f_xu_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x13:
                    /* 010010.. ....1001 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:718 */
                    if (trans_vfncvt_f_x_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x14:
                    /* 010010.. ....1010 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:719 */
                    if (trans_vfncvt_f_f_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x15:
                    /* 010010.. ....1010 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:720 */
                    if (trans_vfncvt_rod_f_f_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x16:
                    /* 010010.. ....1011 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:721 */
                    if (trans_vfncvt_rtz_xu_f_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x17:
                    /* 010010.. ....1011 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:722 */
                    if (trans_vfncvt_rtz_x_f_w(ctx, &u.f_rmr)) return true;
                    break;
                case 0x1d:
                    /* 010010.. ....1110 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:997 */
                    if (trans_vfncvtbf16_f_f_w(ctx, &u.f_rmr)) return true;
                    break;
                }
                break;
            case 0x13:
                /* 010011.. ........ .001.... .1010111 */
                decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                switch ((insn >> 15) & 0x1f) {
                case 0x0:
                    /* 010011.. ....0000 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:671 */
                    if (trans_vfsqrt_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x4:
                    /* 010011.. ....0010 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:672 */
                    if (trans_vfrsqrt7_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x5:
                    /* 010011.. ....0010 1001.... .1010111 */
                    /* ../target/riscv/insn32.decode:673 */
                    if (trans_vfrec7_v(ctx, &u.f_rmr)) return true;
                    break;
                case 0x10:
                    /* 010011.. ....1000 0001.... .1010111 */
                    /* ../target/riscv/insn32.decode:696 */
                    if (trans_vfclass_v(ctx, &u.f_rmr)) return true;
                    break;
                }
                break;
            case 0x18:
                /* 011000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:686 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfeq_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x19:
                /* 011001.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:692 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfle_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 011011.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:690 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmflt_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 011100.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:688 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfne_vv(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x00002000:
            /* 0....... ........ .010.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:724 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredsum_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 000001.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:725 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredand_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 000010.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:726 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredor_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 000011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:727 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredxor_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 000100.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:728 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredminu_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 000101.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:729 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredmin_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 000110.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:730 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredmaxu_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 000111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:731 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vredmax_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 001000.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:607 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vaaddu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:605 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vaadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:611 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vasubu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 001011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:609 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vasub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .010.... .1010111 */
                switch ((insn >> 15) & 0x1f) {
                case 0x0:
                    /* 010000.. ....0000 0010.... .1010111 */
                    decode_insn32_extract_r2rd(ctx, &u.f_decode_insn3239, insn);
                    switch ((insn >> 25) & 0x1) {
                    case 0x1:
                        /* 0100001. ....0000 0010.... .1010111 */
                        /* ../target/riscv/insn32.decode:757 */
                        if (trans_vmv_x_s(ctx, &u.f_decode_insn3239)) return true;
                        break;
                    }
                    break;
                case 0x10:
                    /* 010000.. ....1000 0010.... .1010111 */
                    /* ../target/riscv/insn32.decode:750 */
                    decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                    if (trans_vcpop_m(ctx, &u.f_rmr)) return true;
                    break;
                case 0x11:
                    /* 010000.. ....1000 1010.... .1010111 */
                    /* ../target/riscv/insn32.decode:751 */
                    decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                    if (trans_vfirst_m(ctx, &u.f_rmr)) return true;
                    break;
                }
                break;
            case 0x12:
                /* 010010.. ........ .010.... .1010111 */
                decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                switch ((insn >> 15) & 0x1f) {
                case 0x2:
                    /* 010010.. ....0001 0010.... .1010111 */
                    /* ../target/riscv/insn32.decode:780 */
                    if (trans_vzext_vf8(ctx, &u.f_rmr)) return true;
                    break;
                case 0x3:
                    /* 010010.. ....0001 1010.... .1010111 */
                    /* ../target/riscv/insn32.decode:783 */
                    if (trans_vsext_vf8(ctx, &u.f_rmr)) return true;
                    break;
                case 0x4:
                    /* 010010.. ....0010 0010.... .1010111 */
                    /* ../target/riscv/insn32.decode:779 */
                    if (trans_vzext_vf4(ctx, &u.f_rmr)) return true;
                    break;
                case 0x5:
                    /* 010010.. ....0010 1010.... .1010111 */
                    /* ../target/riscv/insn32.decode:782 */
                    if (trans_vsext_vf4(ctx, &u.f_rmr)) return true;
                    break;
                case 0x6:
                    /* 010010.. ....0011 0010.... .1010111 */
                    /* ../target/riscv/insn32.decode:778 */
                    if (trans_vzext_vf2(ctx, &u.f_rmr)) return true;
                    break;
                case 0x7:
                    /* 010010.. ....0011 1010.... .1010111 */
                    /* ../target/riscv/insn32.decode:781 */
                    if (trans_vsext_vf2(ctx, &u.f_rmr)) return true;
                    break;
                }
                break;
            case 0x14:
                /* 010100.. ........ .010.... .1010111 */
                switch ((insn >> 15) & 0x1f) {
                case 0x1:
                    /* 010100.. ....0000 1010.... .1010111 */
                    /* ../target/riscv/insn32.decode:752 */
                    decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                    if (trans_vmsbf_m(ctx, &u.f_rmr)) return true;
                    break;
                case 0x2:
                    /* 010100.. ....0001 0010.... .1010111 */
                    /* ../target/riscv/insn32.decode:754 */
                    decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                    if (trans_vmsof_m(ctx, &u.f_rmr)) return true;
                    break;
                case 0x3:
                    /* 010100.. ....0001 1010.... .1010111 */
                    /* ../target/riscv/insn32.decode:753 */
                    decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                    if (trans_vmsif_m(ctx, &u.f_rmr)) return true;
                    break;
                case 0x10:
                    /* 010100.. ....1000 0010.... .1010111 */
                    /* ../target/riscv/insn32.decode:755 */
                    decode_insn32_extract_r2_vm(ctx, &u.f_rmr, insn);
                    if (trans_viota_m(ctx, &u.f_rmr)) return true;
                    break;
                case 0x11:
                    /* 010100.. ....1000 1010.... .1010111 */
                    decode_insn32_extract_r1_vm(ctx, &u.f_decode_insn3238, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* 010100.0 00001000 1010.... .1010111 */
                        /* ../target/riscv/insn32.decode:756 */
                        if (trans_vid_v(ctx, &u.f_decode_insn3238)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x17:
                /* 010111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:771 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vcompress_vm(ctx, &u.f_r)) return true;
                break;
            case 0x18:
                /* 011000.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:744 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmandn_mm(ctx, &u.f_r)) return true;
                break;
            case 0x19:
                /* 011001.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:742 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmand_mm(ctx, &u.f_r)) return true;
                break;
            case 0x1a:
                /* 011010.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:746 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmor_mm(ctx, &u.f_r)) return true;
                break;
            case 0x1b:
                /* 011011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:745 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmxor_mm(ctx, &u.f_r)) return true;
                break;
            case 0x1c:
                /* 011100.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:748 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmorn_mm(ctx, &u.f_r)) return true;
                break;
            case 0x1d:
                /* 011101.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:743 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmnand_mm(ctx, &u.f_r)) return true;
                break;
            case 0x1e:
                /* 011110.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:747 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmnor_mm(ctx, &u.f_r)) return true;
                break;
            case 0x1f:
                /* 011111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:749 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_vmxnor_mm(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00003000:
            /* 0....... ........ .011.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:469 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vadd_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 000011.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:473 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vrsub_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:502 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vand_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:505 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vor_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 001011.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:508 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vxor_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 001100.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:770 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vrgather_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 001110.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:762 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vslideup_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 001111.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:765 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vslidedown_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .011.... .1010111 */
                decode_insn32_extract_r_vm_1(ctx, &u.f_rmrr, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100000. ........ .011.... .1010111 */
                    /* ../target/riscv/insn32.decode:492 */
                    if (trans_vadc_vim(ctx, &u.f_rmrr)) return true;
                    break;
                }
                break;
            case 0x11:
                /* 010001.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:495 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmadc_vim(ctx, &u.f_rmrr)) return true;
                break;
            case 0x17:
                /* 010111.. ........ .011.... .1010111 */
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101110. ........ .011.... .1010111 */
                    /* ../target/riscv/insn32.decode:594 */
                    decode_insn32_extract_r_vm_0(ctx, &u.f_rmrr, insn);
                    if (trans_vmerge_vim(ctx, &u.f_rmrr)) return true;
                    break;
                case 0x1:
                    /* 0101111. ........ .011.... .1010111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* 01011110 0000.... .011.... .1010111 */
                        /* ../target/riscv/insn32.decode:591 */
                        if (trans_vmv_v_i(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x18:
                /* 011000.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:526 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmseq_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x19:
                /* 011001.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:529 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsne_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 011100.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:536 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsleu_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 011101.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:539 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsle_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1e:
                /* 011110.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:541 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsgtu_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 011111.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:543 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsgt_vi(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x00004000:
            /* 0....... ........ .100.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:468 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vadd_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 000010.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:471 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsub_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 000011.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:472 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vrsub_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 000100.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:545 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vminu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 000101.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:547 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmin_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 000110.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:549 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmaxu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 000111.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:551 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmax_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:501 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vand_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:504 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vor_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 001011.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:507 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vxor_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 001100.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:769 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vrgather_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 001110.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:761 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vslideup_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 001111.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:764 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vslidedown_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .100.... .1010111 */
                decode_insn32_extract_r_vm_1(ctx, &u.f_rmrr, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100000. ........ .100.... .1010111 */
                    /* ../target/riscv/insn32.decode:491 */
                    if (trans_vadc_vxm(ctx, &u.f_rmrr)) return true;
                    break;
                }
                break;
            case 0x11:
                /* 010001.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:494 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmadc_vxm(ctx, &u.f_rmrr)) return true;
                break;
            case 0x12:
                /* 010010.. ........ .100.... .1010111 */
                decode_insn32_extract_r_vm_1(ctx, &u.f_rmrr, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100100. ........ .100.... .1010111 */
                    /* ../target/riscv/insn32.decode:497 */
                    if (trans_vsbc_vxm(ctx, &u.f_rmrr)) return true;
                    break;
                }
                break;
            case 0x13:
                /* 010011.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:499 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsbc_vxm(ctx, &u.f_rmrr)) return true;
                break;
            case 0x17:
                /* 010111.. ........ .100.... .1010111 */
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101110. ........ .100.... .1010111 */
                    /* ../target/riscv/insn32.decode:593 */
                    decode_insn32_extract_r_vm_0(ctx, &u.f_rmrr, insn);
                    if (trans_vmerge_vxm(ctx, &u.f_rmrr)) return true;
                    break;
                case 0x1:
                    /* 0101111. ........ .100.... .1010111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* 01011110 0000.... .100.... .1010111 */
                        /* ../target/riscv/insn32.decode:590 */
                        if (trans_vmv_v_x(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x18:
                /* 011000.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:525 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmseq_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x19:
                /* 011001.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:528 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsne_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1a:
                /* 011010.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:531 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsltu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 011011.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:533 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmslt_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 011100.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:535 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsleu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 011101.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:538 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsle_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1e:
                /* 011110.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:540 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsgtu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 011111.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:542 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmsgt_vx(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x00005000:
            /* 0....... ........ .101.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:628 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfadd_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 000010.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:630 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsub_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 000100.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:675 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfmin_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 000110.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:677 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfmax_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 001000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:679 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsgnj_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:681 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsgnjn_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:683 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfsgnjx_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 001110.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:684 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfslide1up_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 001111.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:685 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vfslide1down_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .101.... .1010111 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x3f) {
                case 0x20:
                    /* 01000010 0000.... .101.... .1010111 */
                    /* ../target/riscv/insn32.decode:760 */
                    if (trans_vfmv_s_f(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x17:
                /* 010111.. ........ .101.... .1010111 */
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101110. ........ .101.... .1010111 */
                    /* ../target/riscv/insn32.decode:697 */
                    decode_insn32_extract_r_vm_0(ctx, &u.f_rmrr, insn);
                    if (trans_vfmerge_vfm(ctx, &u.f_rmrr)) return true;
                    break;
                case 0x1:
                    /* 0101111. ........ .101.... .1010111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x1f) {
                    case 0x0:
                        /* 01011110 0000.... .101.... .1010111 */
                        /* ../target/riscv/insn32.decode:698 */
                        if (trans_vfmv_v_f(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x18:
                /* 011000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:687 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfeq_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x19:
                /* 011001.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:693 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfle_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 011011.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:691 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmflt_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 011100.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:689 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfne_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 011101.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:694 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfgt_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 011111.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:695 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vmfge_vf(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x00006000:
            /* 0....... ........ .110.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x8:
                /* 001000.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:608 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vaaddu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 001001.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:606 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vaadd_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 001010.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:612 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vasubu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 001011.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:610 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vasub_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 001110.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:763 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vslide1up_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 001111.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:766 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vslide1down_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .110.... .1010111 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x3f) {
                case 0x20:
                    /* 01000010 0000.... .110.... .1010111 */
                    /* ../target/riscv/insn32.decode:758 */
                    if (trans_vmv_s_x(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x00007000:
            /* 0....... ........ .111.... .1010111 */
            /* ../target/riscv/insn32.decode:785 */
            decode_insn32_extract_r2_zimm11(ctx, &u.f_decode_insn3240, insn);
            if (trans_vsetvli(ctx, &u.f_decode_insn3240)) return true;
            break;
        case 0x80000000u:
            /* 1....... ........ .000.... .1010111 */
            decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:595 */
                if (trans_vsaddu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 100001.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:598 */
                if (trans_vsadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 100010.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:601 */
                if (trans_vssubu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 100011.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:603 */
                if (trans_vssub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 100101.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:509 */
                if (trans_vsll_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 100111.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:613 */
                if (trans_vsmul_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 101000.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:512 */
                if (trans_vsrl_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:515 */
                if (trans_vsra_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 101010.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:615 */
                if (trans_vssrl_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:618 */
                if (trans_vssra_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 101100.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:518 */
                if (trans_vnsrl_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:521 */
                if (trans_vnsra_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 101110.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:621 */
                if (trans_vnclipu_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:624 */
                if (trans_vnclip_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 110000.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:732 */
                if (trans_vwredsumu_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x11:
                /* 110001.. ........ .000.... .1010111 */
                /* ../target/riscv/insn32.decode:733 */
                if (trans_vwredsum_vs(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80001000u:
            /* 1....... ........ .001.... .1010111 */
            decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:642 */
                if (trans_vfdiv_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 100100.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:640 */
                if (trans_vfmul_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 101000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:655 */
                if (trans_vfmadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:657 */
                if (trans_vfnmadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 101010.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:659 */
                if (trans_vfmsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:661 */
                if (trans_vfnmsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 101100.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:647 */
                if (trans_vfmacc_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:648 */
                if (trans_vfnmacc_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 101110.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:651 */
                if (trans_vfmsac_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:653 */
                if (trans_vfnmsac_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 110000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:632 */
                if (trans_vfwadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x11:
                /* 110001.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:740 */
                if (trans_vfwredusum_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x12:
                /* 110010.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:636 */
                if (trans_vfwsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x13:
                /* 110011.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:741 */
                if (trans_vfwredosum_vs(ctx, &u.f_rmrr)) return true;
                break;
            case 0x14:
                /* 110100.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:634 */
                if (trans_vfwadd_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x16:
                /* 110110.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:638 */
                if (trans_vfwsub_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x18:
                /* 111000.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:645 */
                if (trans_vfwmul_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 111011.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:1001 */
                if (trans_vfwmaccbf16_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 111100.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:663 */
                if (trans_vfwmacc_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 111101.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:665 */
                if (trans_vfwnmacc_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1e:
                /* 111110.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:667 */
                if (trans_vfwmsac_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 111111.. ........ .001.... .1010111 */
                /* ../target/riscv/insn32.decode:669 */
                if (trans_vfwnmsac_vv(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80002000u:
            /* 1....... ........ .010.... .1010111 */
            decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:560 */
                if (trans_vdivu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 100001.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:562 */
                if (trans_vdiv_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 100010.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:564 */
                if (trans_vremu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 100011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:566 */
                if (trans_vrem_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 100100.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:556 */
                if (trans_vmulhu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 100101.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:552 */
                if (trans_vmul_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 100110.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:558 */
                if (trans_vmulhsu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 100111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:554 */
                if (trans_vmulh_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:578 */
                if (trans_vmadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:580 */
                if (trans_vnmsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:574 */
                if (trans_vmacc_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:576 */
                if (trans_vnmsac_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 110000.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:474 */
                if (trans_vwaddu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x11:
                /* 110001.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:476 */
                if (trans_vwadd_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x12:
                /* 110010.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:478 */
                if (trans_vwsubu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x13:
                /* 110011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:480 */
                if (trans_vwsub_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x14:
                /* 110100.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:482 */
                if (trans_vwaddu_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x15:
                /* 110101.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:484 */
                if (trans_vwadd_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x16:
                /* 110110.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:486 */
                if (trans_vwsubu_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x17:
                /* 110111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:488 */
                if (trans_vwsub_wv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x18:
                /* 111000.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:568 */
                if (trans_vwmulu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1a:
                /* 111010.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:570 */
                if (trans_vwmulsu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 111011.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:572 */
                if (trans_vwmul_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 111100.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:582 */
                if (trans_vwmaccu_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 111101.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:584 */
                if (trans_vwmacc_vv(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 111111.. ........ .010.... .1010111 */
                /* ../target/riscv/insn32.decode:586 */
                if (trans_vwmaccsu_vv(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80003000u:
            /* 1....... ........ .011.... .1010111 */
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:597 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsaddu_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 100001.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:600 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsadd_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 100101.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:511 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsll_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 100111.. ........ .011.... .1010111 */
                decode_insn32_extract_r2rd(ctx, &u.f_decode_insn3239, insn);
                switch (insn & 0x020f8000) {
                case 0x02000000:
                    /* 1001111. ....0000 0011.... .1010111 */
                    /* ../target/riscv/insn32.decode:772 */
                    if (trans_vmv1r_v(ctx, &u.f_decode_insn3239)) return true;
                    break;
                case 0x02008000:
                    /* 1001111. ....0000 1011.... .1010111 */
                    /* ../target/riscv/insn32.decode:773 */
                    if (trans_vmv2r_v(ctx, &u.f_decode_insn3239)) return true;
                    break;
                case 0x02018000:
                    /* 1001111. ....0001 1011.... .1010111 */
                    /* ../target/riscv/insn32.decode:774 */
                    if (trans_vmv4r_v(ctx, &u.f_decode_insn3239)) return true;
                    break;
                case 0x02038000:
                    /* 1001111. ....0011 1011.... .1010111 */
                    /* ../target/riscv/insn32.decode:775 */
                    if (trans_vmv8r_v(ctx, &u.f_decode_insn3239)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 101000.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:514 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsrl_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:517 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vsra_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 101010.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:617 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vssrl_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:620 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vssra_vi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 101100.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:520 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vnsrl_wi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:523 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vnsra_wi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 101110.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:623 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vnclipu_wi(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .011.... .1010111 */
                /* ../target/riscv/insn32.decode:626 */
                decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
                if (trans_vnclip_wi(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80004000u:
            /* 1....... ........ .100.... .1010111 */
            decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:596 */
                if (trans_vsaddu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 100001.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:599 */
                if (trans_vsadd_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 100010.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:602 */
                if (trans_vssubu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 100011.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:604 */
                if (trans_vssub_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 100101.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:510 */
                if (trans_vsll_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 100111.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:614 */
                if (trans_vsmul_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 101000.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:513 */
                if (trans_vsrl_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:516 */
                if (trans_vsra_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 101010.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:616 */
                if (trans_vssrl_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:619 */
                if (trans_vssra_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 101100.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:519 */
                if (trans_vnsrl_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:522 */
                if (trans_vnsra_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 101110.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:622 */
                if (trans_vnclipu_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .100.... .1010111 */
                /* ../target/riscv/insn32.decode:625 */
                if (trans_vnclip_wx(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80005000u:
            /* 1....... ........ .101.... .1010111 */
            decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:643 */
                if (trans_vfdiv_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 100001.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:644 */
                if (trans_vfrdiv_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 100100.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:641 */
                if (trans_vfmul_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 100111.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:631 */
                if (trans_vfrsub_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x8:
                /* 101000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:656 */
                if (trans_vfmadd_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:658 */
                if (trans_vfnmadd_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xa:
                /* 101010.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:660 */
                if (trans_vfmsub_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:662 */
                if (trans_vfnmsub_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xc:
                /* 101100.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:650 */
                if (trans_vfmacc_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:649 */
                if (trans_vfnmacc_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xe:
                /* 101110.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:652 */
                if (trans_vfmsac_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:654 */
                if (trans_vfnmsac_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 110000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:633 */
                if (trans_vfwadd_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x12:
                /* 110010.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:637 */
                if (trans_vfwsub_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x14:
                /* 110100.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:635 */
                if (trans_vfwadd_wf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x16:
                /* 110110.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:639 */
                if (trans_vfwsub_wf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x18:
                /* 111000.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:646 */
                if (trans_vfwmul_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 111011.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:1002 */
                if (trans_vfwmaccbf16_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 111100.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:664 */
                if (trans_vfwmacc_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 111101.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:666 */
                if (trans_vfwnmacc_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1e:
                /* 111110.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:668 */
                if (trans_vfwmsac_vf(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 111111.. ........ .101.... .1010111 */
                /* ../target/riscv/insn32.decode:670 */
                if (trans_vfwnmsac_vf(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80006000u:
            /* 1....... ........ .110.... .1010111 */
            decode_insn32_extract_r_vm(ctx, &u.f_rmrr, insn);
            switch ((insn >> 26) & 0x1f) {
            case 0x0:
                /* 100000.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:561 */
                if (trans_vdivu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1:
                /* 100001.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:563 */
                if (trans_vdiv_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x2:
                /* 100010.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:565 */
                if (trans_vremu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x3:
                /* 100011.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:567 */
                if (trans_vrem_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x4:
                /* 100100.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:557 */
                if (trans_vmulhu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x5:
                /* 100101.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:553 */
                if (trans_vmul_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x6:
                /* 100110.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:559 */
                if (trans_vmulhsu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x7:
                /* 100111.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:555 */
                if (trans_vmulh_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x9:
                /* 101001.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:579 */
                if (trans_vmadd_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xb:
                /* 101011.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:581 */
                if (trans_vnmsub_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xd:
                /* 101101.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:575 */
                if (trans_vmacc_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0xf:
                /* 101111.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:577 */
                if (trans_vnmsac_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x10:
                /* 110000.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:475 */
                if (trans_vwaddu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x11:
                /* 110001.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:477 */
                if (trans_vwadd_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x12:
                /* 110010.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:479 */
                if (trans_vwsubu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x13:
                /* 110011.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:481 */
                if (trans_vwsub_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x14:
                /* 110100.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:483 */
                if (trans_vwaddu_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x15:
                /* 110101.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:485 */
                if (trans_vwadd_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x16:
                /* 110110.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:487 */
                if (trans_vwsubu_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x17:
                /* 110111.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:489 */
                if (trans_vwsub_wx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x18:
                /* 111000.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:569 */
                if (trans_vwmulu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1a:
                /* 111010.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:571 */
                if (trans_vwmulsu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1b:
                /* 111011.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:573 */
                if (trans_vwmul_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1c:
                /* 111100.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:583 */
                if (trans_vwmaccu_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1d:
                /* 111101.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:585 */
                if (trans_vwmacc_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1e:
                /* 111110.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:588 */
                if (trans_vwmaccus_vx(ctx, &u.f_rmrr)) return true;
                break;
            case 0x1f:
                /* 111111.. ........ .110.... .1010111 */
                /* ../target/riscv/insn32.decode:587 */
                if (trans_vwmaccsu_vx(ctx, &u.f_rmrr)) return true;
                break;
            }
            break;
        case 0x80007000u:
            /* 1....... ........ .111.... .1010111 */
            switch ((insn >> 30) & 0x1) {
            case 0x0:
                /* 10...... ........ .111.... .1010111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1f) {
                case 0x0:
                    /* 1000000. ........ .111.... .1010111 */
                    /* ../target/riscv/insn32.decode:787 */
                    if (trans_vsetvl(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 11...... ........ .111.... .1010111 */
                /* ../target/riscv/insn32.decode:786 */
                decode_insn32_extract_r2_zimm10(ctx, &u.f_decode_insn3240, insn);
                if (trans_vsetivli(ctx, &u.f_decode_insn3240)) return true;
                break;
            }
            break;
        }
        break;
    case 0x0000005b:
        /* ........ ........ ........ .1011011 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .1011011 */
            /* ../target/riscv/insn32.decode:252 */
            decode_insn32_extract_i(ctx, &u.f_i, insn);
            if (trans_addid(ctx, &u.f_i)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .1011011 */
            decode_insn32_extract_sh6(ctx, &u.f_shift, insn);
            switch ((insn >> 26) & 0x3f) {
            case 0x0:
                /* 000000.. ........ .001.... .1011011 */
                /* ../target/riscv/insn32.decode:253 */
                if (trans_sllid(ctx, &u.f_shift)) return true;
                break;
            }
            break;
        case 0x5:
            /* ........ ........ .101.... .1011011 */
            decode_insn32_extract_sh6(ctx, &u.f_shift, insn);
            switch ((insn >> 26) & 0x3f) {
            case 0x0:
                /* 000000.. ........ .101.... .1011011 */
                /* ../target/riscv/insn32.decode:254 */
                if (trans_srlid(ctx, &u.f_shift)) return true;
                break;
            case 0x10:
                /* 010000.. ........ .101.... .1011011 */
                /* ../target/riscv/insn32.decode:255 */
                if (trans_sraid(ctx, &u.f_shift)) return true;
                break;
            }
            break;
        }
        break;
    case 0x00000063:
        /* ........ ........ ........ .1100011 */
        decode_insn32_extract_b(ctx, &u.f_b, insn);
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .1100011 */
            /* ../target/riscv/insn32.decode:173 */
            if (trans_beq(ctx, &u.f_b)) return true;
            break;
        case 0x1:
            /* ........ ........ .001.... .1100011 */
            /* ../target/riscv/insn32.decode:174 */
            if (trans_bne(ctx, &u.f_b)) return true;
            break;
        case 0x4:
            /* ........ ........ .100.... .1100011 */
            /* ../target/riscv/insn32.decode:175 */
            if (trans_blt(ctx, &u.f_b)) return true;
            break;
        case 0x5:
            /* ........ ........ .101.... .1100011 */
            /* ../target/riscv/insn32.decode:176 */
            if (trans_bge(ctx, &u.f_b)) return true;
            break;
        case 0x6:
            /* ........ ........ .110.... .1100011 */
            /* ../target/riscv/insn32.decode:177 */
            if (trans_bltu(ctx, &u.f_b)) return true;
            break;
        case 0x7:
            /* ........ ........ .111.... .1100011 */
            /* ../target/riscv/insn32.decode:178 */
            if (trans_bgeu(ctx, &u.f_b)) return true;
            break;
        }
        break;
    case 0x00000067:
        /* ........ ........ ........ .1100111 */
        decode_insn32_extract_i(ctx, &u.f_i, insn);
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .1100111 */
            /* ../target/riscv/insn32.decode:172 */
            if (trans_jalr(ctx, &u.f_i)) return true;
            break;
        }
        break;
    case 0x0000006f:
        /* ........ ........ ........ .1101111 */
        /* ../target/riscv/insn32.decode:171 */
        decode_insn32_extract_j(ctx, &u.f_j, insn);
        if (trans_jal(ctx, &u.f_j)) return true;
        break;
    case 0x00000073:
        /* ........ ........ ........ .1110011 */
        switch ((insn >> 12) & 0x7) {
        case 0x0:
            /* ........ ........ .000.... .1110011 */
            switch (insn & 0xfe000f80u) {
            case 0x00000000:
                /* 0000000. ........ .0000000 01110011 */
                decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
                switch ((insn >> 15) & 0x3ff) {
                case 0x0:
                    /* 00000000 00000000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:159 */
                    if (trans_ecall(ctx, &u.f_empty)) return true;
                    break;
                case 0x20:
                    /* 00000000 00010000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:160 */
                    if (trans_ebreak(ctx, &u.f_empty)) return true;
                    break;
                case 0x40:
                    /* 00000000 00100000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:161 */
                    if (trans_uret(ctx, &u.f_empty)) return true;
                    break;
                case 0x1a0:
                    /* 00000000 11010000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:790 */
                    if (trans_wrs_nto(ctx, &u.f_empty)) return true;
                    break;
                case 0x3a0:
                    /* 00000001 11010000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:791 */
                    if (trans_wrs_sto(ctx, &u.f_empty)) return true;
                    break;
                }
                break;
            case 0x10000000:
                /* 0001000. ........ .0000000 01110011 */
                switch ((insn >> 20) & 0x1f) {
                case 0x2:
                    /* 00010000 0010.... .0000000 01110011 */
                    decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
                    switch ((insn >> 15) & 0x1f) {
                    case 0x0:
                        /* 00010000 00100000 00000000 01110011 */
                        /* ../target/riscv/insn32.decode:162 */
                        if (trans_sret(ctx, &u.f_empty)) return true;
                        break;
                    }
                    break;
                case 0x4:
                    /* 00010000 0100.... .0000000 01110011 */
                    /* ../target/riscv/insn32.decode:166 */
                    decode_insn32_extract_sfence_vm(ctx, &u.f_decode_insn3241, insn);
                    if (trans_sfence_vm(ctx, &u.f_decode_insn3241)) return true;
                    break;
                case 0x5:
                    /* 00010000 0101.... .0000000 01110011 */
                    decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
                    switch ((insn >> 15) & 0x1f) {
                    case 0x0:
                        /* 00010000 01010000 00000000 01110011 */
                        /* ../target/riscv/insn32.decode:164 */
                        if (trans_wfi(ctx, &u.f_empty)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x12000000:
                /* 0001001. ........ .0000000 01110011 */
                /* ../target/riscv/insn32.decode:165 */
                decode_insn32_extract_sfence_vma(ctx, &u.f_r2_s, insn);
                if (trans_sfence_vma(ctx, &u.f_r2_s)) return true;
                break;
            case 0x16000000:
                /* 0001011. ........ .0000000 01110011 */
                /* ../target/riscv/insn32.decode:943 */
                decode_insn32_extract_sfence_vma(ctx, &u.f_r2_s, insn);
                if (trans_sinval_vma(ctx, &u.f_r2_s)) return true;
                break;
            case 0x18000000:
                /* 0001100. ........ .0000000 01110011 */
                decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
                switch ((insn >> 15) & 0x3ff) {
                case 0x0:
                    /* 00011000 00000000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:944 */
                    if (trans_sfence_w_inval(ctx, &u.f_empty)) return true;
                    break;
                case 0x20:
                    /* 00011000 00010000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:945 */
                    if (trans_sfence_inval_ir(ctx, &u.f_empty)) return true;
                    break;
                }
                break;
            case 0x22000000:
                /* 0010001. ........ .0000000 01110011 */
                /* ../target/riscv/insn32.decode:394 */
                decode_insn32_extract_hfence_vvma(ctx, &u.f_r2_s, insn);
                if (trans_hfence_vvma(ctx, &u.f_r2_s)) return true;
                break;
            case 0x26000000:
                /* 0010011. ........ .0000000 01110011 */
                /* ../target/riscv/insn32.decode:946 */
                decode_insn32_extract_hfence_vvma(ctx, &u.f_r2_s, insn);
                if (trans_hinval_vvma(ctx, &u.f_r2_s)) return true;
                break;
            case 0x30000000:
                /* 0011000. ........ .0000000 01110011 */
                decode_insn32_extract_decode_insn32_Fmt_53(ctx, &u.f_empty, insn);
                switch ((insn >> 15) & 0x3ff) {
                case 0x40:
                    /* 00110000 00100000 00000000 01110011 */
                    /* ../target/riscv/insn32.decode:163 */
                    if (trans_mret(ctx, &u.f_empty)) return true;
                    break;
                }
                break;
            case 0x62000000:
                /* 0110001. ........ .0000000 01110011 */
                /* ../target/riscv/insn32.decode:393 */
                decode_insn32_extract_hfence_gvma(ctx, &u.f_r2_s, insn);
                if (trans_hfence_gvma(ctx, &u.f_r2_s)) return true;
                break;
            case 0x66000000:
                /* 0110011. ........ .0000000 01110011 */
                /* ../target/riscv/insn32.decode:947 */
                decode_insn32_extract_hfence_gvma(ctx, &u.f_r2_s, insn);
                if (trans_hinval_gvma(ctx, &u.f_r2_s)) return true;
                break;
            }
            break;
        case 0x1:
            /* ........ ........ .001.... .1110011 */
            /* ../target/riscv/insn32.decode:214 */
            decode_insn32_extract_csr(ctx, &u.f_decode_insn3234, insn);
            if (trans_csrrw(ctx, &u.f_decode_insn3234)) return true;
            break;
        case 0x2:
            /* ........ ........ .010.... .1110011 */
            /* ../target/riscv/insn32.decode:215 */
            decode_insn32_extract_csr(ctx, &u.f_decode_insn3234, insn);
            if (trans_csrrs(ctx, &u.f_decode_insn3234)) return true;
            break;
        case 0x3:
            /* ........ ........ .011.... .1110011 */
            /* ../target/riscv/insn32.decode:216 */
            decode_insn32_extract_csr(ctx, &u.f_decode_insn3234, insn);
            if (trans_csrrc(ctx, &u.f_decode_insn3234)) return true;
            break;
        case 0x4:
            /* ........ ........ .100.... .1110011 */
            switch ((insn >> 25) & 0x7f) {
            case 0x30:
                /* 0110000. ........ .100.... .1110011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x1f) {
                case 0x0:
                    /* 01100000 0000.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:383 */
                    if (trans_hlv_b(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 01100000 0001.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:384 */
                    if (trans_hlv_bu(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x31:
                /* 0110001. ........ .100.... .1110011 */
                decode_insn32_extract_r2_s(ctx, &u.f_r2_s, insn);
                switch ((insn >> 7) & 0x1f) {
                case 0x0:
                    /* 0110001. ........ .1000000 01110011 */
                    /* ../target/riscv/insn32.decode:390 */
                    if (trans_hsv_b(ctx, &u.f_r2_s)) return true;
                    break;
                }
                break;
            case 0x32:
                /* 0110010. ........ .100.... .1110011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x1f) {
                case 0x0:
                    /* 01100100 0000.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:385 */
                    if (trans_hlv_h(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 01100100 0001.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:386 */
                    if (trans_hlv_hu(ctx, &u.f_r2)) return true;
                    break;
                case 0x3:
                    /* 01100100 0011.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:387 */
                    if (trans_hlvx_hu(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x33:
                /* 0110011. ........ .100.... .1110011 */
                decode_insn32_extract_r2_s(ctx, &u.f_r2_s, insn);
                switch ((insn >> 7) & 0x1f) {
                case 0x0:
                    /* 0110011. ........ .1000000 01110011 */
                    /* ../target/riscv/insn32.decode:391 */
                    if (trans_hsv_h(ctx, &u.f_r2_s)) return true;
                    break;
                }
                break;
            case 0x34:
                /* 0110100. ........ .100.... .1110011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x1f) {
                case 0x0:
                    /* 01101000 0000.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:388 */
                    if (trans_hlv_w(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 01101000 0001.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:397 */
                    if (trans_hlv_wu(ctx, &u.f_r2)) return true;
                    break;
                case 0x3:
                    /* 01101000 0011.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:389 */
                    if (trans_hlvx_wu(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x35:
                /* 0110101. ........ .100.... .1110011 */
                decode_insn32_extract_r2_s(ctx, &u.f_r2_s, insn);
                switch ((insn >> 7) & 0x1f) {
                case 0x0:
                    /* 0110101. ........ .1000000 01110011 */
                    /* ../target/riscv/insn32.decode:392 */
                    if (trans_hsv_w(ctx, &u.f_r2_s)) return true;
                    break;
                }
                break;
            case 0x36:
                /* 0110110. ........ .100.... .1110011 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x1f) {
                case 0x0:
                    /* 01101100 0000.... .100.... .1110011 */
                    /* ../target/riscv/insn32.decode:398 */
                    if (trans_hlv_d(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0x37:
                /* 0110111. ........ .100.... .1110011 */
                decode_insn32_extract_r2_s(ctx, &u.f_r2_s, insn);
                switch ((insn >> 7) & 0x1f) {
                case 0x0:
                    /* 0110111. ........ .1000000 01110011 */
                    /* ../target/riscv/insn32.decode:399 */
                    if (trans_hsv_d(ctx, &u.f_r2_s)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x5:
            /* ........ ........ .101.... .1110011 */
            /* ../target/riscv/insn32.decode:217 */
            decode_insn32_extract_csr(ctx, &u.f_decode_insn3234, insn);
            if (trans_csrrwi(ctx, &u.f_decode_insn3234)) return true;
            break;
        case 0x6:
            /* ........ ........ .110.... .1110011 */
            /* ../target/riscv/insn32.decode:218 */
            decode_insn32_extract_csr(ctx, &u.f_decode_insn3234, insn);
            if (trans_csrrsi(ctx, &u.f_decode_insn3234)) return true;
            break;
        case 0x7:
            /* ........ ........ .111.... .1110011 */
            /* ../target/riscv/insn32.decode:219 */
            decode_insn32_extract_csr(ctx, &u.f_decode_insn3234, insn);
            if (trans_csrrci(ctx, &u.f_decode_insn3234)) return true;
            break;
        }
        break;
    case 0x00000077:
        /* ........ ........ ........ .1110111 */
        switch (insn & 0x04007000) {
        case 0x00000000:
            /* .....0.. ........ .000.... .1110111 */
            switch ((insn >> 27) & 0x1f) {
            case 0x0:
                /* 000000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0000000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1006 */
                    if (trans_radd16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0000001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1011 */
                    if (trans_rsub16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 000010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0000100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1037 */
                    if (trans_radd8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0000101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1042 */
                    if (trans_rsub8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x2:
                /* 000100.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0001000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1008 */
                    if (trans_kadd16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0001001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1013 */
                    if (trans_ksub16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x3:
                /* 000110.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0001100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1039 */
                    if (trans_kadd8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0001101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1044 */
                    if (trans_ksub8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x4:
                /* 001000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0010000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1007 */
                    if (trans_uradd16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0010001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1012 */
                    if (trans_ursub16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x5:
                /* 001010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0010100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1038 */
                    if (trans_uradd8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0010101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1043 */
                    if (trans_ursub8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x6:
                /* 001100.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0011000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1009 */
                    if (trans_ukadd16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0011001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1014 */
                    if (trans_uksub16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x7:
                /* 001110.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0011100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1040 */
                    if (trans_ukadd8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0011101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1045 */
                    if (trans_uksub8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 010000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1005 */
                    if (trans_add16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0100001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1010 */
                    if (trans_sub16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x9:
                /* 010010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1036 */
                    if (trans_add8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0100101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1041 */
                    if (trans_sub8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xa:
                /* 010100.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1047 */
                    if (trans_sra16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0101001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1051 */
                    if (trans_srl16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xb:
                /* 010110.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1062 */
                    if (trans_sra8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0101101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1066 */
                    if (trans_srl8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xc:
                /* 011000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0110000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1048 */
                    if (trans_sra16_u(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0110001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1052 */
                    if (trans_srl16_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xd:
                /* 011010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0110100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1063 */
                    if (trans_sra8_u(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0110101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1067 */
                    if (trans_srl8_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xe:
                /* 011100.. ........ .000.... .1110111 */
                decode_insn32_extract_sh4(ctx, &u.f_shift, insn);
                switch ((insn >> 24) & 0x3) {
                case 0x0:
                    /* 01110000 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1049 */
                    if (trans_srai16(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 01110001 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1050 */
                    if (trans_srai16_u(ctx, &u.f_shift)) return true;
                    break;
                case 0x2:
                    /* 01110010 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1053 */
                    if (trans_srli16(ctx, &u.f_shift)) return true;
                    break;
                case 0x3:
                    /* 01110011 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1054 */
                    if (trans_srli16_u(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0xf:
                /* 011110.. ........ .000.... .1110111 */
                decode_insn32_extract_sh3(ctx, &u.f_shift, insn);
                switch ((insn >> 23) & 0x7) {
                case 0x0:
                    /* 01111000 0....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1064 */
                    if (trans_srai8(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 01111000 1....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1065 */
                    if (trans_srai8_u(ctx, &u.f_shift)) return true;
                    break;
                case 0x4:
                    /* 01111010 0....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1068 */
                    if (trans_srli8(ctx, &u.f_shift)) return true;
                    break;
                case 0x5:
                    /* 01111010 1....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1069 */
                    if (trans_srli8_u(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x10:
                /* 100000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1000000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1103 */
                    if (trans_smin16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1000001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1105 */
                    if (trans_smax16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x11:
                /* 100010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1000100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1114 */
                    if (trans_smin8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1000101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1116 */
                    if (trans_smax8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x12:
                /* 100100.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1001000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1104 */
                    if (trans_umin16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1001001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1106 */
                    if (trans_umax16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x13:
                /* 100110.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1001100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1115 */
                    if (trans_umin8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1001101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1117 */
                    if (trans_umax8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x14:
                /* 101000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1010000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1089 */
                    if (trans_smul16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1010001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1090 */
                    if (trans_smulx16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x15:
                /* 101010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1010100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1096 */
                    if (trans_smul8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1010101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1097 */
                    if (trans_smulx8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x16:
                /* 101100.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1011000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1091 */
                    if (trans_umul16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1011001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1092 */
                    if (trans_umulx16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x17:
                /* 101110.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1011100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1098 */
                    if (trans_umul8(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1011101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1099 */
                    if (trans_umulx8(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x19:
                /* 110010.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1100100. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1197 */
                    if (trans_smaqa(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1100101. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1199 */
                    if (trans_smaqa_su(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1c:
                /* 111000.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1110000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1265 */
                    if (trans_ave(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1d:
                /* 111010.. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1269 */
                decode_insn32_extract_sh6(ctx, &u.f_shift, insn);
                if (trans_bitrevi(ctx, &u.f_shift)) return true;
                break;
            case 0x1e:
                /* 111100.. ........ .000.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1111000. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1261 */
                    if (trans_minw(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1111001. ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1260 */
                    if (trans_maxw(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x00001000:
            /* .....0.. ........ .001.... .1110111 */
            decode_insn32_extract_r(ctx, &u.f_r, insn);
            switch (insn & 0xfa000000u) {
            case 0x00000000:
                /* 0000000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1240 */
                if (trans_kaddw(ctx, &u.f_r)) return true;
                break;
            case 0x02000000:
                /* 0000001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1242 */
                if (trans_ksubw(ctx, &u.f_r)) return true;
                break;
            case 0x08000000:
                /* 0000100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1168 */
                if (trans_smbb16(ctx, &u.f_r)) return true;
                break;
            case 0x0a000000:
                /* 0000101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1244 */
                if (trans_kdmbb(ctx, &u.f_r)) return true;
                break;
            case 0x10000000:
                /* 0001000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1241 */
                if (trans_ukaddw(ctx, &u.f_r)) return true;
                break;
            case 0x12000000:
                /* 0001001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1243 */
                if (trans_uksubw(ctx, &u.f_r)) return true;
                break;
            case 0x18000000:
                /* 0001100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1169 */
                if (trans_smbt16(ctx, &u.f_r)) return true;
                break;
            case 0x1a000000:
                /* 0001101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1245 */
                if (trans_kdmbt(ctx, &u.f_r)) return true;
                break;
            case 0x20000000:
                /* 0010000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1256 */
                if (trans_raddw(ctx, &u.f_r)) return true;
                break;
            case 0x22000000:
                /* 0010001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1258 */
                if (trans_rsubw(ctx, &u.f_r)) return true;
                break;
            case 0x28000000:
                /* 0010100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1170 */
                if (trans_smtt16(ctx, &u.f_r)) return true;
                break;
            case 0x2a000000:
                /* 0010101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1246 */
                if (trans_kdmtt(ctx, &u.f_r)) return true;
                break;
            case 0x30000000:
                /* 0011000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1257 */
                if (trans_uraddw(ctx, &u.f_r)) return true;
                break;
            case 0x32000000:
                /* 0011001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1259 */
                if (trans_ursubw(ctx, &u.f_r)) return true;
                break;
            case 0x38000000:
                /* 0011100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1171 */
                if (trans_kmda(ctx, &u.f_r)) return true;
                break;
            case 0x3a000000:
                /* 0011101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1172 */
                if (trans_kmxda(ctx, &u.f_r)) return true;
                break;
            case 0x40000000:
                /* 0100000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1142 */
                if (trans_smmul(ctx, &u.f_r)) return true;
                break;
            case 0x42000000:
                /* 0100001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1146 */
                if (trans_kmmsb(ctx, &u.f_r)) return true;
                break;
            case 0x48000000:
                /* 0100100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1179 */
                if (trans_kmada(ctx, &u.f_r)) return true;
                break;
            case 0x4a000000:
                /* 0100101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1180 */
                if (trans_kmaxda(ctx, &u.f_r)) return true;
                break;
            case 0x50000000:
                /* 0101000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1143 */
                if (trans_smmul_u(ctx, &u.f_r)) return true;
                break;
            case 0x52000000:
                /* 0101001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1147 */
                if (trans_kmmsb_u(ctx, &u.f_r)) return true;
                break;
            case 0x58000000:
                /* 0101100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1173 */
                if (trans_smds(ctx, &u.f_r)) return true;
                break;
            case 0x5a000000:
                /* 0101101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1176 */
                if (trans_kmabb(ctx, &u.f_r)) return true;
                break;
            case 0x60000000:
                /* 0110000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1144 */
                if (trans_kmmac(ctx, &u.f_r)) return true;
                break;
            case 0x62000000:
                /* 0110001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1148 */
                if (trans_kwmmul(ctx, &u.f_r)) return true;
                break;
            case 0x68000000:
                /* 0110100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1174 */
                if (trans_smdrs(ctx, &u.f_r)) return true;
                break;
            case 0x6a000000:
                /* 0110101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1177 */
                if (trans_kmabt(ctx, &u.f_r)) return true;
                break;
            case 0x70000000:
                /* 0111000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1145 */
                if (trans_kmmac_u(ctx, &u.f_r)) return true;
                break;
            case 0x72000000:
                /* 0111001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1149 */
                if (trans_kwmmul_u(ctx, &u.f_r)) return true;
                break;
            case 0x78000000:
                /* 0111100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1175 */
                if (trans_smxds(ctx, &u.f_r)) return true;
                break;
            case 0x7a000000:
                /* 0111101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1178 */
                if (trans_kmatt(ctx, &u.f_r)) return true;
                break;
            case 0x80000000u:
                /* 1000000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1202 */
                if (trans_radd64(ctx, &u.f_r)) return true;
                break;
            case 0x82000000u:
                /* 1000001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1207 */
                if (trans_rsub64(ctx, &u.f_r)) return true;
                break;
            case 0x88000000u:
                /* 1000100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1221 */
                if (trans_smalbb(ctx, &u.f_r)) return true;
                break;
            case 0x8a000000u:
                /* 1000101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1226 */
                if (trans_smalds(ctx, &u.f_r)) return true;
                break;
            case 0x90000000u:
                /* 1001000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1204 */
                if (trans_kadd64(ctx, &u.f_r)) return true;
                break;
            case 0x92000000u:
                /* 1001001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1209 */
                if (trans_ksub64(ctx, &u.f_r)) return true;
                break;
            case 0x98000000u:
                /* 1001100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1222 */
                if (trans_smalbt(ctx, &u.f_r)) return true;
                break;
            case 0x9a000000u:
                /* 1001101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1227 */
                if (trans_smaldrs(ctx, &u.f_r)) return true;
                break;
            case 0xa0000000u:
                /* 1010000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1203 */
                if (trans_uradd64(ctx, &u.f_r)) return true;
                break;
            case 0xa2000000u:
                /* 1010001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1208 */
                if (trans_ursub64(ctx, &u.f_r)) return true;
                break;
            case 0xa8000000u:
                /* 1010100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1223 */
                if (trans_smaltt(ctx, &u.f_r)) return true;
                break;
            case 0xaa000000u:
                /* 1010101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1228 */
                if (trans_smalxds(ctx, &u.f_r)) return true;
                break;
            case 0xb0000000u:
                /* 1011000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1205 */
                if (trans_ukadd64(ctx, &u.f_r)) return true;
                break;
            case 0xb2000000u:
                /* 1011001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1210 */
                if (trans_uksub64(ctx, &u.f_r)) return true;
                break;
            case 0xc0000000u:
                /* 1100000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1201 */
                if (trans_add64(ctx, &u.f_r)) return true;
                break;
            case 0xc2000000u:
                /* 1100001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1206 */
                if (trans_sub64(ctx, &u.f_r)) return true;
                break;
            case 0xd2000000u:
                /* 1101001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1251 */
                if (trans_kdmabb(ctx, &u.f_r)) return true;
                break;
            case 0xd8000000u:
                /* 1101100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1336 */
                if (trans_kdmabb16(ctx, &u.f_r)) return true;
                break;
            case 0xda000000u:
                /* 1101101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1333 */
                if (trans_kdmbb16(ctx, &u.f_r)) return true;
                break;
            case 0xe0000000u:
                /* 1110000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1263 */
                if (trans_mulsr64(ctx, &u.f_r)) return true;
                break;
            case 0xe2000000u:
                /* 1110001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1252 */
                if (trans_kdmabt(ctx, &u.f_r)) return true;
                break;
            case 0xe8000000u:
                /* 1110100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1337 */
                if (trans_kdmabt16(ctx, &u.f_r)) return true;
                break;
            case 0xea000000u:
                /* 1110101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1334 */
                if (trans_kdmbt16(ctx, &u.f_r)) return true;
                break;
            case 0xf0000000u:
                /* 1111000. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1262 */
                if (trans_mulr64(ctx, &u.f_r)) return true;
                break;
            case 0xf2000000u:
                /* 1111001. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1253 */
                if (trans_kdmatt(ctx, &u.f_r)) return true;
                break;
            case 0xf8000000u:
                /* 1111100. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1338 */
                if (trans_kdmatt16(ctx, &u.f_r)) return true;
                break;
            case 0xfa000000u:
                /* 1111101. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1335 */
                if (trans_kdmtt16(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00002000:
            /* .....0.. ........ .010.... .1110111 */
            switch (insn & 0xfa000000u) {
            case 0x00000000:
                /* 0000000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1279 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_radd32(ctx, &u.f_r)) return true;
                break;
            case 0x02000000:
                /* 0000001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1284 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rsub32(ctx, &u.f_r)) return true;
                break;
            case 0x10000000:
                /* 0001000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1281 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kadd32(ctx, &u.f_r)) return true;
                break;
            case 0x12000000:
                /* 0001001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1286 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ksub32(ctx, &u.f_r)) return true;
                break;
            case 0x18000000:
                /* 0001100. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1340 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smbt32(ctx, &u.f_r)) return true;
                break;
            case 0x20000000:
                /* 0010000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1280 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_uradd32(ctx, &u.f_r)) return true;
                break;
            case 0x22000000:
                /* 0010001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1285 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ursub32(ctx, &u.f_r)) return true;
                break;
            case 0x28000000:
                /* 0010100. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1341 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smtt32(ctx, &u.f_r)) return true;
                break;
            case 0x30000000:
                /* 0011000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1282 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukadd32(ctx, &u.f_r)) return true;
                break;
            case 0x32000000:
                /* 0011001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1287 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_uksub32(ctx, &u.f_r)) return true;
                break;
            case 0x38000000:
                /* 0011100. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1347 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmda32(ctx, &u.f_r)) return true;
                break;
            case 0x3a000000:
                /* 0011101. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1348 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmxda32(ctx, &u.f_r)) return true;
                break;
            case 0x40000000:
                /* 0100000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1278 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_add32(ctx, &u.f_r)) return true;
                break;
            case 0x42000000:
                /* 0100001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1283 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_sub32(ctx, &u.f_r)) return true;
                break;
            case 0x4a000000:
                /* 0100101. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1349 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmaxda32(ctx, &u.f_r)) return true;
                break;
            case 0x50000000:
                /* 0101000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1309 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_sra32(ctx, &u.f_r)) return true;
                break;
            case 0x52000000:
                /* 0101001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1313 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_srl32(ctx, &u.f_r)) return true;
                break;
            case 0x58000000:
                /* 0101100. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1355 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smds32(ctx, &u.f_r)) return true;
                break;
            case 0x5a000000:
                /* 0101101. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1343 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmabb32(ctx, &u.f_r)) return true;
                break;
            case 0x60000000:
                /* 0110000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1310 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_sra32_u(ctx, &u.f_r)) return true;
                break;
            case 0x62000000:
                /* 0110001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1314 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_srl32_u(ctx, &u.f_r)) return true;
                break;
            case 0x68000000:
                /* 0110100. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1356 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smdrs32(ctx, &u.f_r)) return true;
                break;
            case 0x6a000000:
                /* 0110101. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1344 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmabt32(ctx, &u.f_r)) return true;
                break;
            case 0x70000000:
                /* 0111000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1311 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_srai32(ctx, &u.f_shift)) return true;
                break;
            case 0x72000000:
                /* 0111001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1315 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_srli32(ctx, &u.f_shift)) return true;
                break;
            case 0x78000000:
                /* 0111100. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1357 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smxds32(ctx, &u.f_r)) return true;
                break;
            case 0x7a000000:
                /* 0111101. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1345 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmatt32(ctx, &u.f_r)) return true;
                break;
            case 0x80000000u:
                /* 1000000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1312 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_srai32_u(ctx, &u.f_shift)) return true;
                break;
            case 0x82000000u:
                /* 1000001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1316 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_srli32_u(ctx, &u.f_shift)) return true;
                break;
            case 0x90000000u:
                /* 1001000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1324 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smin32(ctx, &u.f_r)) return true;
                break;
            case 0x92000000u:
                /* 1001001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1326 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_smax32(ctx, &u.f_r)) return true;
                break;
            case 0xa0000000u:
                /* 1010000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1325 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_umin32(ctx, &u.f_r)) return true;
                break;
            case 0xa2000000u:
                /* 1010001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1327 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_umax32(ctx, &u.f_r)) return true;
                break;
            case 0xb0000000u:
                /* 1011000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1299 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rstas32(ctx, &u.f_r)) return true;
                break;
            case 0xb2000000u:
                /* 1011001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1304 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rstsa32(ctx, &u.f_r)) return true;
                break;
            case 0xc0000000u:
                /* 1100000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1301 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kstas32(ctx, &u.f_r)) return true;
                break;
            case 0xc2000000u:
                /* 1100001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1306 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kstsa32(ctx, &u.f_r)) return true;
                break;
            case 0xd0000000u:
                /* 1101000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1300 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urstas32(ctx, &u.f_r)) return true;
                break;
            case 0xd2000000u:
                /* 1101001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1305 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urstsa32(ctx, &u.f_r)) return true;
                break;
            case 0xe0000000u:
                /* 1110000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1302 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukstas32(ctx, &u.f_r)) return true;
                break;
            case 0xe2000000u:
                /* 1110001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1307 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukstsa32(ctx, &u.f_r)) return true;
                break;
            case 0xf0000000u:
                /* 1111000. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1298 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_stas32(ctx, &u.f_r)) return true;
                break;
            case 0xf2000000u:
                /* 1111001. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1303 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_stsa32(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x00003000:
            /* .....0.. ........ .011.... .1110111 */
            decode_insn32_extract_r4(ctx, &u.f_r4, insn);
            switch ((insn >> 25) & 0x1) {
            case 0x0:
                /* .....00. ........ .011.... .1110111 */
                /* ../target/riscv/insn32.decode:1272 */
                if (trans_bpick(ctx, &u.f_r4)) return true;
                break;
            }
            break;
        case 0x04000000:
            /* .....1.. ........ .000.... .1110111 */
            switch (insn & 0xfa000000u) {
            case 0x00000000:
                /* 0000010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1016 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rcras16(ctx, &u.f_r)) return true;
                break;
            case 0x02000000:
                /* 0000011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1021 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rcrsa16(ctx, &u.f_r)) return true;
                break;
            case 0x08000000:
                /* 0000110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1078 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_scmplt16(ctx, &u.f_r)) return true;
                break;
            case 0x0a000000:
                /* 0000111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1084 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_scmplt8(ctx, &u.f_r)) return true;
                break;
            case 0x10000000:
                /* 0001010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1018 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kcras16(ctx, &u.f_r)) return true;
                break;
            case 0x12000000:
                /* 0001011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1023 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kcrsa16(ctx, &u.f_r)) return true;
                break;
            case 0x18000000:
                /* 0001110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1079 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_scmple16(ctx, &u.f_r)) return true;
                break;
            case 0x1a000000:
                /* 0001111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1085 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_scmple8(ctx, &u.f_r)) return true;
                break;
            case 0x20000000:
                /* 0010010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1017 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urcras16(ctx, &u.f_r)) return true;
                break;
            case 0x22000000:
                /* 0010011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1022 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urcrsa16(ctx, &u.f_r)) return true;
                break;
            case 0x28000000:
                /* 0010110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1080 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ucmplt16(ctx, &u.f_r)) return true;
                break;
            case 0x2a000000:
                /* 0010111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1086 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ucmplt8(ctx, &u.f_r)) return true;
                break;
            case 0x30000000:
                /* 0011010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1019 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukcras16(ctx, &u.f_r)) return true;
                break;
            case 0x32000000:
                /* 0011011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1024 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukcrsa16(ctx, &u.f_r)) return true;
                break;
            case 0x38000000:
                /* 0011110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1081 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ucmple16(ctx, &u.f_r)) return true;
                break;
            case 0x3a000000:
                /* 0011111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1087 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ucmple8(ctx, &u.f_r)) return true;
                break;
            case 0x40000000:
                /* 0100010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1015 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_cras16(ctx, &u.f_r)) return true;
                break;
            case 0x42000000:
                /* 0100011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1020 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_crsa16(ctx, &u.f_r)) return true;
                break;
            case 0x48000000:
                /* 0100110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1077 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_cmpeq16(ctx, &u.f_r)) return true;
                break;
            case 0x4a000000:
                /* 0100111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1083 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_cmpeq8(ctx, &u.f_r)) return true;
                break;
            case 0x50000000:
                /* 0101010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1055 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_sll16(ctx, &u.f_r)) return true;
                break;
            case 0x52000000:
                /* 0101011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1059 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kslra16(ctx, &u.f_r)) return true;
                break;
            case 0x58000000:
                /* 0101110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1070 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_sll8(ctx, &u.f_r)) return true;
                break;
            case 0x5a000000:
                /* 0101111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1074 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kslra8(ctx, &u.f_r)) return true;
                break;
            case 0x60000000:
                /* 0110010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1057 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ksll16(ctx, &u.f_r)) return true;
                break;
            case 0x62000000:
                /* 0110011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1060 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kslra16_u(ctx, &u.f_r)) return true;
                break;
            case 0x68000000:
                /* 0110110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1072 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ksll8(ctx, &u.f_r)) return true;
                break;
            case 0x6a000000:
                /* 0110111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1075 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kslra8_u(ctx, &u.f_r)) return true;
                break;
            case 0x70000000:
                /* 0111010. ........ .000.... .1110111 */
                decode_insn32_extract_sh4(ctx, &u.f_shift, insn);
                switch ((insn >> 24) & 0x1) {
                case 0x0:
                    /* 01110100 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1056 */
                    if (trans_slli16(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 01110101 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1058 */
                    if (trans_kslli16(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x78000000:
                /* 0111110. ........ .000.... .1110111 */
                decode_insn32_extract_sh3(ctx, &u.f_shift, insn);
                switch ((insn >> 23) & 0x3) {
                case 0x0:
                    /* 01111100 0....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1071 */
                    if (trans_slli8(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 01111100 1....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1073 */
                    if (trans_kslli8(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x80000000u:
                /* 1000010. ........ .000.... .1110111 */
                decode_insn32_extract_sh4(ctx, &u.f_shift, insn);
                switch ((insn >> 24) & 0x1) {
                case 0x0:
                    /* 10000100 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1107 */
                    if (trans_sclip16(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 10000101 ........ .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1108 */
                    if (trans_uclip16(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x82000000u:
                /* 1000011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1093 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_khm16(ctx, &u.f_r)) return true;
                break;
            case 0x88000000u:
                /* 1000110. ........ .000.... .1110111 */
                decode_insn32_extract_sh3(ctx, &u.f_shift, insn);
                switch ((insn >> 23) & 0x3) {
                case 0x0:
                    /* 10001100 0....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1118 */
                    if (trans_sclip8(ctx, &u.f_shift)) return true;
                    break;
                case 0x2:
                    /* 10001101 0....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1119 */
                    if (trans_uclip8(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x8a000000u:
                /* 1000111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1100 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_khm8(ctx, &u.f_r)) return true;
                break;
            case 0x92000000u:
                /* 1001011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1094 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_khmx16(ctx, &u.f_r)) return true;
                break;
            case 0x9a000000u:
                /* 1001111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1101 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_khmx8(ctx, &u.f_r)) return true;
                break;
            case 0xa8000000u:
                /* 1010110. ........ .000.... .1110111 */
                switch ((insn >> 23) & 0x3) {
                case 0x0:
                    /* 10101100 0....... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1273 */
                    decode_insn32_extract_sh3(ctx, &u.f_shift, insn);
                    if (trans_insb(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 10101100 1....... .000.... .1110111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x7) {
                    case 0x0:
                        /* 10101100 1000.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1126 */
                        if (trans_sunpkd810(ctx, &u.f_r2)) return true;
                        break;
                    case 0x1:
                        /* 10101100 1001.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1127 */
                        if (trans_sunpkd820(ctx, &u.f_r2)) return true;
                        break;
                    case 0x2:
                        /* 10101100 1010.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1128 */
                        if (trans_sunpkd830(ctx, &u.f_r2)) return true;
                        break;
                    case 0x3:
                        /* 10101100 1011.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1129 */
                        if (trans_sunpkd831(ctx, &u.f_r2)) return true;
                        break;
                    case 0x4:
                        /* 10101100 1100.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1131 */
                        if (trans_zunpkd810(ctx, &u.f_r2)) return true;
                        break;
                    case 0x5:
                        /* 10101100 1101.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1132 */
                        if (trans_zunpkd820(ctx, &u.f_r2)) return true;
                        break;
                    case 0x6:
                        /* 10101100 1110.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1133 */
                        if (trans_zunpkd830(ctx, &u.f_r2)) return true;
                        break;
                    case 0x7:
                        /* 10101100 1111.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1134 */
                        if (trans_zunpkd831(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                case 0x2:
                    /* 10101101 0....... .000.... .1110111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x7) {
                    case 0x0:
                        /* 10101101 0000.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1120 */
                        if (trans_kabs8(ctx, &u.f_r2)) return true;
                        break;
                    case 0x1:
                        /* 10101101 0001.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1109 */
                        if (trans_kabs16(ctx, &u.f_r2)) return true;
                        break;
                    case 0x2:
                        /* 10101101 0010.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1328 */
                        if (trans_kabs32(ctx, &u.f_r2)) return true;
                        break;
                    case 0x3:
                        /* 10101101 0011.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1130 */
                        if (trans_sunpkd832(ctx, &u.f_r2)) return true;
                        break;
                    case 0x4:
                        /* 10101101 0100.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1254 */
                        if (trans_kabsw(ctx, &u.f_r2)) return true;
                        break;
                    case 0x7:
                        /* 10101101 0111.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1135 */
                        if (trans_zunpkd832(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                case 0x3:
                    /* 10101101 1....... .000.... .1110111 */
                    decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                    switch ((insn >> 20) & 0x7) {
                    case 0x0:
                        /* 10101101 1000.... .000.... .1110111 */
                        /* ../target/riscv/insn32.decode:1124 */
                        if (trans_swap8(ctx, &u.f_r2)) return true;
                        break;
                    }
                    break;
                }
                break;
            case 0xaa000000u:
                /* 1010111. ........ .000.... .1110111 */
                decode_insn32_extract_r2(ctx, &u.f_r2, insn);
                switch ((insn >> 20) & 0x1f) {
                case 0x0:
                    /* 10101110 0000.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1121 */
                    if (trans_clrs8(ctx, &u.f_r2)) return true;
                    break;
                case 0x1:
                    /* 10101110 0001.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1122 */
                    if (trans_clz8(ctx, &u.f_r2)) return true;
                    break;
                case 0x3:
                    /* 10101110 0011.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1123 */
                    if (trans_clo8(ctx, &u.f_r2)) return true;
                    break;
                case 0x8:
                    /* 10101110 1000.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1110 */
                    if (trans_clrs16(ctx, &u.f_r2)) return true;
                    break;
                case 0x9:
                    /* 10101110 1001.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1111 */
                    if (trans_clz16(ctx, &u.f_r2)) return true;
                    break;
                case 0xb:
                    /* 10101110 1011.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1112 */
                    if (trans_clo16(ctx, &u.f_r2)) return true;
                    break;
                case 0x18:
                    /* 10101111 1000.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1191 */
                    if (trans_clrs32(ctx, &u.f_r2)) return true;
                    break;
                case 0x19:
                    /* 10101111 1001.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1192 */
                    if (trans_clz32(ctx, &u.f_r2)) return true;
                    break;
                case 0x1b:
                    /* 10101111 1011.... .000.... .1110111 */
                    /* ../target/riscv/insn32.decode:1193 */
                    if (trans_clo32(ctx, &u.f_r2)) return true;
                    break;
                }
                break;
            case 0xc8000000u:
                /* 1100110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1198 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_umaqa(ctx, &u.f_r)) return true;
                break;
            case 0xca000000u:
                /* 1100111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1270 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_wext(ctx, &u.f_r)) return true;
                break;
            case 0xda000000u:
                /* 1101111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1271 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_wexti(ctx, &u.f_shift)) return true;
                break;
            case 0xe0000000u:
                /* 1110010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1189 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_sclip32(ctx, &u.f_shift)) return true;
                break;
            case 0xe2000000u:
                /* 1110011. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1268 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_bitrev(ctx, &u.f_r)) return true;
                break;
            case 0xf0000000u:
                /* 1111010. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1190 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_uclip32(ctx, &u.f_shift)) return true;
                break;
            case 0xf8000000u:
                /* 1111110. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1194 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pbsad(ctx, &u.f_r)) return true;
                break;
            case 0xfa000000u:
                /* 1111111. ........ .000.... .1110111 */
                /* ../target/riscv/insn32.decode:1195 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pbsada(ctx, &u.f_r)) return true;
                break;
            }
            break;
        case 0x04001000:
            /* .....1.. ........ .001.... .1110111 */
            switch ((insn >> 27) & 0x1f) {
            case 0x0:
                /* 000001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0000010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1232 */
                    if (trans_kaddh(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0000011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1233 */
                    if (trans_ksubh(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1:
                /* 000011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0000110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1234 */
                    if (trans_khmbb(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0000111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1137 */
                    if (trans_pkbb16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x2:
                /* 000101.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0001010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1237 */
                    if (trans_ukaddh(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0001011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1238 */
                    if (trans_uksubh(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x3:
                /* 000111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0001110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1235 */
                    if (trans_khmbt(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0001111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1138 */
                    if (trans_pkbt16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x4:
                /* 001001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0010010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1266 */
                    if (trans_sra_u(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0010011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1249 */
                    if (trans_ksllw(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x5:
                /* 001011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0010110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1236 */
                    if (trans_khmtt(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0010111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1139 */
                    if (trans_pktt16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x6:
                /* 001101.. ........ .001.... .1110111 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0011010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1359 */
                    if (trans_sraiw_u(ctx, &u.f_shift)) return true;
                    break;
                case 0x1:
                    /* 0011011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1250 */
                    if (trans_kslliw(ctx, &u.f_shift)) return true;
                    break;
                }
                break;
            case 0x7:
                /* 001111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x1:
                    /* 0011111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1140 */
                    if (trans_pktb16(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x8:
                /* 010001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1151 */
                    if (trans_smmwb(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0100011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1155 */
                    if (trans_kmmawb(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x9:
                /* 010011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0100110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1184 */
                    if (trans_kmsda(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0100111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1185 */
                    if (trans_kmsxda(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xa:
                /* 010101.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1152 */
                    if (trans_smmwb_u(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0101011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1156 */
                    if (trans_kmmawb_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xb:
                /* 010111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0101110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1181 */
                    if (trans_kmads(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0101111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1187 */
                    if (trans_smal(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xc:
                /* 011001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0110010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1153 */
                    if (trans_smmwt(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0110011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1157 */
                    if (trans_kmmawt(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xd:
                /* 011011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0110110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1182 */
                    if (trans_kmadrs(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0110111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1247 */
                    if (trans_kslraw(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xe:
                /* 011101.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0111010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1154 */
                    if (trans_smmwt_u(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0111011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1158 */
                    if (trans_kmmawt_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0xf:
                /* 011111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 0111110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1183 */
                    if (trans_kmaxds(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 0111111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1248 */
                    if (trans_kslraw_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x10:
                /* 100001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1000010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1212 */
                    if (trans_smar64(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1000011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1213 */
                    if (trans_smsr64(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x11:
                /* 100011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1000110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1224 */
                    if (trans_smalda(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1000111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1159 */
                    if (trans_kmmwb2(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x12:
                /* 100101.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1001010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1216 */
                    if (trans_kmar64(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1001011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1217 */
                    if (trans_kmsr64(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x13:
                /* 100111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1001110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1225 */
                    if (trans_smalxda(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1001111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1160 */
                    if (trans_kmmwb2_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x14:
                /* 101001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1010010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1214 */
                    if (trans_umar64(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1010011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1215 */
                    if (trans_umsr64(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x15:
                /* 101011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1010110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1229 */
                    if (trans_smslda(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1010111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1161 */
                    if (trans_kmmwt2(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x16:
                /* 101101.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1011010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1218 */
                    if (trans_ukmar64(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1011011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1219 */
                    if (trans_ukmsr64(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x17:
                /* 101111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1011110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1230 */
                    if (trans_smslxda(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1011111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1162 */
                    if (trans_kmmwt2_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x18:
                /* 110001.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1100010. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1274 */
                    if (trans_maddr32(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1100011. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1275 */
                    if (trans_msubr32(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x19:
                /* 110011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x1:
                    /* 1100111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1163 */
                    if (trans_kmmawb2(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1a:
                /* 110101.. ........ .001.... .1110111 */
                /* ../target/riscv/insn32.decode:1267 */
                decode_insn32_extract_sh6(ctx, &u.f_shift, insn);
                if (trans_srai_u(ctx, &u.f_shift)) return true;
                break;
            case 0x1b:
                /* 110111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1101110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1330 */
                    if (trans_khmbb16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1101111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1164 */
                    if (trans_kmmawb2_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1d:
                /* 111011.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1110110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1331 */
                    if (trans_khmbt16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1110111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1165 */
                    if (trans_kmmawt2(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            case 0x1f:
                /* 111111.. ........ .001.... .1110111 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                switch ((insn >> 25) & 0x1) {
                case 0x0:
                    /* 1111110. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1332 */
                    if (trans_khmtt16(ctx, &u.f_r)) return true;
                    break;
                case 0x1:
                    /* 1111111. ........ .001.... .1110111 */
                    /* ../target/riscv/insn32.decode:1166 */
                    if (trans_kmmawt2_u(ctx, &u.f_r)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x04002000:
            /* .....1.. ........ .010.... .1110111 */
            switch (insn & 0xfa000000u) {
            case 0x00000000:
                /* 0000010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1289 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rcras32(ctx, &u.f_r)) return true;
                break;
            case 0x02000000:
                /* 0000011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1294 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rcrsa32(ctx, &u.f_r)) return true;
                break;
            case 0x0a000000:
                /* 0000111. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1361 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pkbb32(ctx, &u.f_r)) return true;
                break;
            case 0x10000000:
                /* 0001010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1291 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kcras32(ctx, &u.f_r)) return true;
                break;
            case 0x12000000:
                /* 0001011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1296 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kcrsa32(ctx, &u.f_r)) return true;
                break;
            case 0x1a000000:
                /* 0001111. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1362 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pkbt32(ctx, &u.f_r)) return true;
                break;
            case 0x20000000:
                /* 0010010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1290 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urcras32(ctx, &u.f_r)) return true;
                break;
            case 0x22000000:
                /* 0010011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1295 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urcrsa32(ctx, &u.f_r)) return true;
                break;
            case 0x2a000000:
                /* 0010111. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1363 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pktt32(ctx, &u.f_r)) return true;
                break;
            case 0x30000000:
                /* 0011010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1292 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukcras32(ctx, &u.f_r)) return true;
                break;
            case 0x32000000:
                /* 0011011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1297 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukcrsa32(ctx, &u.f_r)) return true;
                break;
            case 0x3a000000:
                /* 0011111. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1364 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_pktb32(ctx, &u.f_r)) return true;
                break;
            case 0x40000000:
                /* 0100010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1288 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_cras32(ctx, &u.f_r)) return true;
                break;
            case 0x42000000:
                /* 0100011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1293 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_crsa32(ctx, &u.f_r)) return true;
                break;
            case 0x48000000:
                /* 0100110. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1353 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmsda32(ctx, &u.f_r)) return true;
                break;
            case 0x4a000000:
                /* 0100111. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1354 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmsxda32(ctx, &u.f_r)) return true;
                break;
            case 0x50000000:
                /* 0101010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1317 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_sll32(ctx, &u.f_r)) return true;
                break;
            case 0x52000000:
                /* 0101011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1321 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kslra32(ctx, &u.f_r)) return true;
                break;
            case 0x58000000:
                /* 0101110. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1350 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmads32(ctx, &u.f_r)) return true;
                break;
            case 0x60000000:
                /* 0110010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1319 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ksll32(ctx, &u.f_r)) return true;
                break;
            case 0x62000000:
                /* 0110011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1322 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kslra32_u(ctx, &u.f_r)) return true;
                break;
            case 0x68000000:
                /* 0110110. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1351 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmadrs32(ctx, &u.f_r)) return true;
                break;
            case 0x70000000:
                /* 0111010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1318 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_slli32(ctx, &u.f_shift)) return true;
                break;
            case 0x78000000:
                /* 0111110. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1352 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kmaxds32(ctx, &u.f_r)) return true;
                break;
            case 0x80000000u:
                /* 1000010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1320 */
                decode_insn32_extract_sh5(ctx, &u.f_shift, insn);
                if (trans_kslli32(ctx, &u.f_shift)) return true;
                break;
            case 0xb0000000u:
                /* 1011010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1026 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rstas16(ctx, &u.f_r)) return true;
                break;
            case 0xb2000000u:
                /* 1011011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1031 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_rstsa16(ctx, &u.f_r)) return true;
                break;
            case 0xc0000000u:
                /* 1100010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1028 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kstas16(ctx, &u.f_r)) return true;
                break;
            case 0xc2000000u:
                /* 1100011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1033 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_kstsa16(ctx, &u.f_r)) return true;
                break;
            case 0xd0000000u:
                /* 1101010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1027 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urstas16(ctx, &u.f_r)) return true;
                break;
            case 0xd2000000u:
                /* 1101011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1032 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_urstsa16(ctx, &u.f_r)) return true;
                break;
            case 0xe0000000u:
                /* 1110010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1029 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukstas16(ctx, &u.f_r)) return true;
                break;
            case 0xe2000000u:
                /* 1110011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1034 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_ukstsa16(ctx, &u.f_r)) return true;
                break;
            case 0xf0000000u:
                /* 1111010. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1025 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_stas16(ctx, &u.f_r)) return true;
                break;
            case 0xf2000000u:
                /* 1111011. ........ .010.... .1110111 */
                /* ../target/riscv/insn32.decode:1030 */
                decode_insn32_extract_r(ctx, &u.f_r, insn);
                if (trans_stsa16(ctx, &u.f_r)) return true;
                break;
            }
            break;
        }
        break;
    case 0x0000007b:
        /* ........ ........ ........ .1111011 */
        decode_insn32_extract_r(ctx, &u.f_r, insn);
        switch (insn & 0xfe007000u) {
        case 0x00000000:
            /* 0000000. ........ .000.... .1111011 */
            /* ../target/riscv/insn32.decode:256 */
            if (trans_addd(ctx, &u.f_r)) return true;
            break;
        case 0x00001000:
            /* 0000000. ........ .001.... .1111011 */
            /* ../target/riscv/insn32.decode:258 */
            if (trans_slld(ctx, &u.f_r)) return true;
            break;
        case 0x00005000:
            /* 0000000. ........ .101.... .1111011 */
            /* ../target/riscv/insn32.decode:259 */
            if (trans_srld(ctx, &u.f_r)) return true;
            break;
        case 0x02000000:
            /* 0000001. ........ .000.... .1111011 */
            /* ../target/riscv/insn32.decode:280 */
            if (trans_muld(ctx, &u.f_r)) return true;
            break;
        case 0x02004000:
            /* 0000001. ........ .100.... .1111011 */
            /* ../target/riscv/insn32.decode:281 */
            if (trans_divd(ctx, &u.f_r)) return true;
            break;
        case 0x02005000:
            /* 0000001. ........ .101.... .1111011 */
            /* ../target/riscv/insn32.decode:282 */
            if (trans_divud(ctx, &u.f_r)) return true;
            break;
        case 0x02006000:
            /* 0000001. ........ .110.... .1111011 */
            /* ../target/riscv/insn32.decode:283 */
            if (trans_remd(ctx, &u.f_r)) return true;
            break;
        case 0x02007000:
            /* 0000001. ........ .111.... .1111011 */
            /* ../target/riscv/insn32.decode:284 */
            if (trans_remud(ctx, &u.f_r)) return true;
            break;
        case 0x40000000:
            /* 0100000. ........ .000.... .1111011 */
            /* ../target/riscv/insn32.decode:257 */
            if (trans_subd(ctx, &u.f_r)) return true;
            break;
        case 0x40005000:
            /* 0100000. ........ .101.... .1111011 */
            /* ../target/riscv/insn32.decode:260 */
            if (trans_srad(ctx, &u.f_r)) return true;
            break;
        }
        break;
    }
    return false;
}
